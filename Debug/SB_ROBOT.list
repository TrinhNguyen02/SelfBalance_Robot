
SB_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005610  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005720  08005720  00015720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005798  08005798  00020124  2**0
                  CONTENTS
  4 .ARM          00000000  08005798  08005798  00020124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005798  08005798  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  080057a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000128  080058c4  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080058c4  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d31f  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a56  00000000  00000000  0002d46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002eec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002fb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ecc  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c73  00000000  00000000  00047624  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086ca5  00000000  00000000  00051297  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7f3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000d7fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000128 	.word	0x20000128
 800012c:	00000000 	.word	0x00000000
 8000130:	08005708 	.word	0x08005708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000012c 	.word	0x2000012c
 800014c:	08005708 	.word	0x08005708

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 030f 	add.w	r3, r7, #15
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2275      	movs	r2, #117	; 0x75
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f002 f991 	bl	8003450 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b68      	cmp	r3, #104	; 0x68
 8001132:	d13d      	bne.n	80011b0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 030e 	add.w	r3, r7, #14
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	226b      	movs	r2, #107	; 0x6b
 800114a:	21d0      	movs	r1, #208	; 0xd0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f002 f885 	bl	800325c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001152:	2307      	movs	r3, #7
 8001154:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030e 	add.w	r3, r7, #14
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2219      	movs	r2, #25
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f002 f876 	bl	800325c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 030e 	add.w	r3, r7, #14
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	221c      	movs	r2, #28
 8001186:	21d0      	movs	r1, #208	; 0xd0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f002 f867 	bl	800325c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	f107 030e 	add.w	r3, r7, #14
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	221b      	movs	r2, #27
 80011a4:	21d0      	movs	r1, #208	; 0xd0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f002 f858 	bl	800325c <HAL_I2C_Mem_Write>
        return 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <MPU6050_Init+0xa6>
    }
    return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	0000      	movs	r0, r0
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80011c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c4:	b094      	sub	sp, #80	; 0x50
 80011c6:	af04      	add	r7, sp, #16
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	230e      	movs	r3, #14
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	223b      	movs	r2, #59	; 0x3b
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f002 f935 	bl	8003450 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011e6:	7a3b      	ldrb	r3, [r7, #8]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7a7b      	ldrb	r3, [r7, #9]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800122a:	7c3b      	ldrb	r3, [r7, #16]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7c7b      	ldrb	r3, [r7, #17]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21a      	sxth	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800123c:	7cbb      	ldrb	r3, [r7, #18]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	7cfb      	ldrb	r3, [r7, #19]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21a      	sxth	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800124e:	7d3b      	ldrb	r3, [r7, #20]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	7d7b      	ldrb	r3, [r7, #21]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21a      	sxth	r2, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8c4 	bl	80003f4 <__aeabi_i2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4bb7      	ldr	r3, [pc, #732]	; (8001550 <MPU6050_Read_All+0x390>)
 8001272:	f7ff fa53 	bl	800071c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8b4 	bl	80003f4 <__aeabi_i2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4baf      	ldr	r3, [pc, #700]	; (8001550 <MPU6050_Read_All+0x390>)
 8001292:	f7ff fa43 	bl	800071c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8a4 	bl	80003f4 <__aeabi_i2d>
 80012ac:	a3a2      	add	r3, pc, #648	; (adr r3, 8001538 <MPU6050_Read_All+0x378>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff fa33 	bl	800071c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80012c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fce1 	bl	8000c8c <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	49a1      	ldr	r1, [pc, #644]	; (8001554 <MPU6050_Read_All+0x394>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fde4 	bl	8000e9c <__aeabi_fdiv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	49a0      	ldr	r1, [pc, #640]	; (8001558 <MPU6050_Read_All+0x398>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fc23 	bl	8000b24 <__addsf3>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f881 	bl	80003f4 <__aeabi_i2d>
 80012f2:	a393      	add	r3, pc, #588	; (adr r3, 8001540 <MPU6050_Read_All+0x380>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff fa10 	bl	800071c <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f871 	bl	80003f4 <__aeabi_i2d>
 8001312:	a38b      	add	r3, pc, #556	; (adr r3, 8001540 <MPU6050_Read_All+0x380>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fa00 	bl	800071c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f861 	bl	80003f4 <__aeabi_i2d>
 8001332:	a383      	add	r3, pc, #524	; (adr r3, 8001540 <MPU6050_Read_All+0x380>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f9f0 	bl	800071c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001346:	f001 fbc7 	bl	8002ad8 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	4b83      	ldr	r3, [pc, #524]	; (800155c <MPU6050_Read_All+0x39c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f83e 	bl	80003d4 <__aeabi_ui2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b80      	ldr	r3, [pc, #512]	; (8001560 <MPU6050_Read_All+0x3a0>)
 800135e:	f7ff f9dd 	bl	800071c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800136a:	f001 fbb5 	bl	8002ad8 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <MPU6050_Read_All+0x39c>)
 8001372:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	fb03 f202 	mul.w	r2, r3, r2
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138c:	4619      	mov	r1, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001394:	fb03 f301 	mul.w	r3, r3, r1
 8001398:	4413      	add	r3, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f82a 	bl	80003f4 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f003 ffce 	bl	8005348 <sqrt>
 80013ac:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013bc:	f7ff faec 	bl	8000998 <__aeabi_dcmpeq>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d119      	bne.n	80013fa <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f811 	bl	80003f4 <__aeabi_i2d>
 80013d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d6:	f7ff f9a1 	bl	800071c <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f003 fe21 	bl	8005028 <atan>
 80013e6:	a358      	add	r3, pc, #352	; (adr r3, 8001548 <MPU6050_Read_All+0x388>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f86c 	bl	80004c8 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013f8:	e005      	b.n	8001406 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	425b      	negs	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fff0 	bl	80003f4 <__aeabi_i2d>
 8001414:	4682      	mov	sl, r0
 8001416:	468b      	mov	fp, r1
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ffe8 	bl	80003f4 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4650      	mov	r0, sl
 800142a:	4659      	mov	r1, fp
 800142c:	f003 ff8a 	bl	8005344 <atan2>
 8001430:	a345      	add	r3, pc, #276	; (adr r3, 8001548 <MPU6050_Read_All+0x388>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f847 	bl	80004c8 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <MPU6050_Read_All+0x3a4>)
 8001448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144c:	f7ff faae 	bl	80009ac <__aeabi_dcmplt>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <MPU6050_Read_All+0x2ac>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <MPU6050_Read_All+0x3a8>)
 8001462:	f7ff fac1 	bl	80009e8 <__aeabi_dcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d114      	bne.n	8001496 <MPU6050_Read_All+0x2d6>
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <MPU6050_Read_All+0x3a8>)
 8001472:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001476:	f7ff fab7 	bl	80009e8 <__aeabi_dcmpgt>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d015      	beq.n	80014ac <MPU6050_Read_All+0x2ec>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <MPU6050_Read_All+0x3a4>)
 800148c:	f7ff fa8e 	bl	80009ac <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00a      	beq.n	80014ac <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 8001496:	4935      	ldr	r1, [pc, #212]	; (800156c <MPU6050_Read_All+0x3ac>)
 8001498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800149c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014aa:	e012      	b.n	80014d2 <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014ba:	e9cd 2300 	strd	r2, r3, [sp]
 80014be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014c2:	482a      	ldr	r0, [pc, #168]	; (800156c <MPU6050_Read_All+0x3ac>)
 80014c4:	f000 f856 	bl	8001574 <Kalman_getAngle>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014d8:	4690      	mov	r8, r2
 80014da:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MPU6050_Read_All+0x3a8>)
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff fa7e 	bl	80009e8 <__aeabi_dcmpgt>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014f8:	4614      	mov	r4, r2
 80014fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800150a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800150e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001512:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001516:	e9cd 3400 	strd	r3, r4, [sp]
 800151a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MPU6050_Read_All+0x3b0>)
 8001520:	f000 f828 	bl	8001574 <Kalman_getAngle>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 800152e:	bf00      	nop
 8001530:	3740      	adds	r7, #64	; 0x40
 8001532:	46bd      	mov	sp, r7
 8001534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001538:	00000000 	.word	0x00000000
 800153c:	40cc2900 	.word	0x40cc2900
 8001540:	00000000 	.word	0x00000000
 8001544:	40606000 	.word	0x40606000
 8001548:	1a63c1f8 	.word	0x1a63c1f8
 800154c:	404ca5dc 	.word	0x404ca5dc
 8001550:	40d00000 	.word	0x40d00000
 8001554:	43aa0000 	.word	0x43aa0000
 8001558:	42121eb8 	.word	0x42121eb8
 800155c:	20000164 	.word	0x20000164
 8001560:	408f4000 	.word	0x408f4000
 8001564:	c0568000 	.word	0xc0568000
 8001568:	40568000 	.word	0x40568000
 800156c:	20000048 	.word	0x20000048
 8001570:	20000000 	.word	0x20000000

08001574 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b092      	sub	sp, #72	; 0x48
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f103 0420 	add.w	r4, r3, #32
 8001586:	e9d4 3400 	ldrd	r3, r4, [r4]
 800158a:	461a      	mov	r2, r3
 800158c:	4623      	mov	r3, r4
 800158e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001592:	f7fe fde1 	bl	8000158 <__aeabi_dsub>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015ac:	f7fe ff8c 	bl	80004c8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fdd0 	bl	800015c <__adddf3>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015d6:	f7fe ff77 	bl	80004c8 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015e8:	f7fe fdb6 	bl	8000158 <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015fa:	f7fe fdad 	bl	8000158 <__aeabi_dsub>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fda6 	bl	800015c <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800161c:	f7fe ff54 	bl	80004c8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fd98 	bl	800015c <__adddf3>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001642:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001646:	f7fe ff3f 	bl	80004c8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fd81 	bl	8000158 <__aeabi_dsub>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800166c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001670:	f7fe ff2a 	bl	80004c8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fd6c 	bl	8000158 <__aeabi_dsub>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001696:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800169a:	f7fe ff15 	bl	80004c8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe fd59 	bl	800015c <__adddf3>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f103 0410 	add.w	r4, r3, #16
 80016c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	f7fe fd48 	bl	800015c <__adddf3>
 80016cc:	4603      	mov	r3, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016de:	f7ff f81d 	bl	800071c <__aeabi_ddiv>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016f4:	f7ff f812 	bl	800071c <__aeabi_ddiv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f103 0418 	add.w	r4, r3, #24
 8001706:	e9d4 3400 	ldrd	r3, r4, [r4]
 800170a:	461a      	mov	r2, r3
 800170c:	4623      	mov	r3, r4
 800170e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001712:	f7fe fd21 	bl	8000158 <__aeabi_dsub>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001728:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800172c:	f7fe fecc 	bl	80004c8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fd10 	bl	800015c <__adddf3>
 800173c:	4603      	mov	r3, r0
 800173e:	460c      	mov	r4, r1
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800174c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001750:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001754:	f7fe feb8 	bl	80004c8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fcfc 	bl	800015c <__adddf3>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001774:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001778:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001782:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001786:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001790:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001798:	f7fe fe96 	bl	80004c8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fcd8 	bl	8000158 <__aeabi_dsub>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80017b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c0:	f7fe fe82 	bl	80004c8 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fcc4 	bl	8000158 <__aeabi_dsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e8:	f7fe fe6e 	bl	80004c8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fcb0 	bl	8000158 <__aeabi_dsub>
 80017f8:	4603      	mov	r3, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001808:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800180c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001810:	f7fe fe5a 	bl	80004c8 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fc9c 	bl	8000158 <__aeabi_dsub>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f103 0418 	add.w	r4, r3, #24
 8001830:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 8001834:	4618      	mov	r0, r3
 8001836:	4621      	mov	r1, r4
 8001838:	3748      	adds	r7, #72	; 0x48
 800183a:	46bd      	mov	sp, r7
 800183c:	bdb0      	pop	{r4, r5, r7, pc}

0800183e <constrain>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;


int32_t constrain(int32_t value, int32_t min, int32_t max) {
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	429a      	cmp	r2, r3
 8001850:	da01      	bge.n	8001856 <constrain+0x18>
        return min;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	e006      	b.n	8001864 <constrain+0x26>
    } else if (value > max) {
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	dd01      	ble.n	8001862 <constrain+0x24>
        return max;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e000      	b.n	8001864 <constrain+0x26>
    } else {
        return value;
 8001862:	68fb      	ldr	r3, [r7, #12]
    }
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <adjustPreiodTM1>:

// adjust preiod for timer
void adjustPreiodTM1(int preiod)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM1_Init 1 */
	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <adjustPreiodTM1+0x9c>)
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <adjustPreiodTM1+0xa0>)
 8001894:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 35;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <adjustPreiodTM1+0x9c>)
 8001898:	2223      	movs	r2, #35	; 0x23
 800189a:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <adjustPreiodTM1+0x9c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = preiod;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <adjustPreiodTM1+0x9c>)
 80018a6:	60d3      	str	r3, [r2, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <adjustPreiodTM1+0x9c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <adjustPreiodTM1+0x9c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <adjustPreiodTM1+0x9c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <adjustPreiodTM1+0x9c>)
 80018bc:	f002 ff8c 	bl	80047d8 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <adjustPreiodTM1+0x5a>
	  {
	    Error_Handler();
 80018c6:	f000 fef7 	bl	80026b8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <adjustPreiodTM1+0x9c>)
 80018d8:	f003 f928 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <adjustPreiodTM1+0x76>
	  {
	    Error_Handler();
 80018e2:	f000 fee9 	bl	80026b8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <adjustPreiodTM1+0x9c>)
 80018f6:	f003 faf5 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <adjustPreiodTM1+0x94>
	  {
	    Error_Handler();
 8001900:	f000 feda 	bl	80026b8 <Error_Handler>
	  }

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200002c0 	.word	0x200002c0
 8001910:	40012c00 	.word	0x40012c00

08001914 <adjustPreiodTM2>:
void adjustPreiodTM2(int preiod)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  htim2.Init.Period = preiod;
//  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <adjustPreiodTM2+0x98>)
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <adjustPreiodTM2+0x98>)
 800193e:	2223      	movs	r2, #35	; 0x23
 8001940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <adjustPreiodTM2+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = preiod;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <adjustPreiodTM2+0x98>)
 800194c:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <adjustPreiodTM2+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <adjustPreiodTM2+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <adjustPreiodTM2+0x98>)
 800195c:	f002 ff3c 	bl	80047d8 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <adjustPreiodTM2+0x56>
  {
    Error_Handler();
 8001966:	f000 fea7 	bl	80026b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <adjustPreiodTM2+0x98>)
 8001978:	f003 f8d8 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <adjustPreiodTM2+0x72>
  {
    Error_Handler();
 8001982:	f000 fe99 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <adjustPreiodTM2+0x98>)
 8001996:	f003 faa5 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <adjustPreiodTM2+0x90>
  {
    Error_Handler();
 80019a0:	f000 fe8a 	bl	80026b8 <Error_Handler>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000308 	.word	0x20000308

080019b0 <stabilityPDControl>:

// Control functions (PID controls, Steppers control...)

// PD controller implementation(Proportional, derivative). DT in seconds
float stabilityPDControl(float DT, float input, float setPoint,  float Kp, float Kd)
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  float error;
  float output;

  error = setPoint - input;
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff f8ad 	bl	8000b20 <__aeabi_fsub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	61fb      	str	r3, [r7, #28]

  // Kd is implemented in two parts
  //    The biggest one using only the input (sensor) part not the SetPoint input-input(t-1).
  //    And the second using the setpoint to make it a bit more agressive   setPoint-setPoint(t-1)
  float Kd_setPoint = constrain((setPoint - setPointOld), -8, 8); // We limit the input part...
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <stabilityPDControl+0xb0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff f8a5 	bl	8000b20 <__aeabi_fsub>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb71 	bl	80010c0 <__aeabi_f2iz>
 80019de:	4603      	mov	r3, r0
 80019e0:	2208      	movs	r2, #8
 80019e2:	f06f 0107 	mvn.w	r1, #7
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff29 	bl	800183e <constrain>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f94c 	bl	8000c8c <__aeabi_i2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]
  output = Kp * error + (Kd * Kd_setPoint - Kd * (input - PID_errorOld)) / DT;
 80019f8:	69f9      	ldr	r1, [r7, #28]
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f7ff f99a 	bl	8000d34 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461c      	mov	r4, r3
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a08:	f7ff f994 	bl	8000d34 <__aeabi_fmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461d      	mov	r5, r3
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <stabilityPDControl+0xb4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	68b8      	ldr	r0, [r7, #8]
 8001a18:	f7ff f882 	bl	8000b20 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f987 	bl	8000d34 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7ff f878 	bl	8000b20 <__aeabi_fsub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa31 	bl	8000e9c <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff f870 	bl	8000b24 <__addsf3>
 8001a44:	4603      	mov	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]
  //Serial.print(Kd*(error-PID_errorOld));Serial.print("\t");
  //PID_errorOld2 = PID_errorOld;
  PID_errorOld = input;  // error for Kd is only the input component
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <stabilityPDControl+0xb4>)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	6013      	str	r3, [r2, #0]
  setPointOld = setPoint;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <stabilityPDControl+0xb0>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
  return (output);
 8001a54:	697b      	ldr	r3, [r7, #20]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000148 	.word	0x20000148
 8001a64:	20000144 	.word	0x20000144

08001a68 <speedPIControl>:


// PI controller implementation (Proportional, integral). DT in seconds
float speedPIControl(float DT, int16_t input, int16_t setPoint,  float Kp, float Ki)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	4613      	mov	r3, r2
 8001a78:	813b      	strh	r3, [r7, #8]
  int16_t error;
  float output;

  error = setPoint - input;
 8001a7a:	893a      	ldrh	r2, [r7, #8]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	82fb      	strh	r3, [r7, #22]
  PID_errorSum += constrain(error, -ITERM_MAX_ERROR, ITERM_MAX_ERROR);
 8001a84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a88:	221e      	movs	r2, #30
 8001a8a:	f06f 011d 	mvn.w	r1, #29
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fed5 	bl	800183e <constrain>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f8f8 	bl	8000c8c <__aeabi_i2f>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <speedPIControl+0xb8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f7ff f83d 	bl	8000b24 <__addsf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <speedPIControl+0xb8>)
 8001ab0:	601a      	str	r2, [r3, #0]
  PID_errorSum = constrain(PID_errorSum, -ITERM_MAX, ITERM_MAX);
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <speedPIControl+0xb8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb02 	bl	80010c0 <__aeabi_f2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ac2:	4918      	ldr	r1, [pc, #96]	; (8001b24 <speedPIControl+0xbc>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff feba 	bl	800183e <constrain>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f8dd 	bl	8000c8c <__aeabi_i2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <speedPIControl+0xb8>)
 8001ad6:	601a      	str	r2, [r3, #0]

  //Serial.println(PID_errorSum);

  output = Kp * error + Ki * PID_errorSum * DT; // DT is in miliseconds...
 8001ad8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f8d5 	bl	8000c8c <__aeabi_i2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f924 	bl	8000d34 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461c      	mov	r4, r3
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <speedPIControl+0xb8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f91c 	bl	8000d34 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f917 	bl	8000d34 <__aeabi_fmul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff f80a 	bl	8000b24 <__addsf3>
 8001b10:	4603      	mov	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]
  return (output);
 8001b14:	693b      	ldr	r3, [r7, #16]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001a4 	.word	0x200001a4
 8001b24:	ffffd8f0 	.word	0xffffd8f0

08001b28 <positionPDControl>:


float positionPDControl(long actualPos, long setPointPos, float Kpp, float Kdp, int16_t speedM)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  float output;
  float P;

  P = constrain(Kpp*(float)(setPointPos - actualPos), -80, 80); // Limit command
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f8a5 	bl	8000c8c <__aeabi_i2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f8f4 	bl	8000d34 <__aeabi_fmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fab6 	bl	80010c0 <__aeabi_f2iz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2250      	movs	r2, #80	; 0x50
 8001b58:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe6e 	bl	800183e <constrain>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f891 	bl	8000c8c <__aeabi_i2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]
  output = P + Kdp * (float)(speedM);
 8001b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f88a 	bl	8000c8c <__aeabi_i2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f8d9 	bl	8000d34 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7fe ffcc 	bl	8000b24 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]
  return (output);
 8001b90:	693b      	ldr	r3, [r7, #16]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <setMotorSpeedM1>:


// Set speed of Stepper Motor1
// tspeed could be positive or negative (reverse)
void setMotorSpeedM1(int16_t tspeed)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  int16_t speed;

  // Limit max speed?

  // WE LIMIT MAX ACCELERATION of the motors
  if ((speed_M1 - tspeed) > MAX_ACCEL)
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	dd09      	ble.n	8001bcc <setMotorSpeedM1+0x30>
    speed_M1 -= MAX_ACCEL;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b02      	subs	r3, #2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e016      	b.n	8001bfa <setMotorSpeedM1+0x5e>
  else if ((speed_M1 - tspeed) < -MAX_ACCEL)
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f113 0f02 	cmn.w	r3, #2
 8001bde:	da09      	bge.n	8001bf4 <setMotorSpeedM1+0x58>
    speed_M1 += MAX_ACCEL;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3302      	adds	r3, #2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e002      	b.n	8001bfa <setMotorSpeedM1+0x5e>
  else
    speed_M1 = tspeed;
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	8013      	strh	r3, [r2, #0]

  speed = speed_M1 * 40; // 1/16 Microstepping
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	817b      	strh	r3, [r7, #10]

  if (speed == 0)
 8001c0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <setMotorSpeedM1+0x88>
  {
    timer_period1 = ZERO_SPEED;
 8001c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1a:	60fb      	str	r3, [r7, #12]
    dir_M1 = 0;
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <setMotorSpeedM1+0x104>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e021      	b.n	8001c68 <setMotorSpeedM1+0xcc>
  }
  else if (speed > 0)
 8001c24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	dd0e      	ble.n	8001c4a <setMotorSpeedM1+0xae>
  {
    timer_period1 = 2000000 / speed; // 2Mhz timer
 8001c2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <setMotorSpeedM1+0x108>)
 8001c32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c36:	60fb      	str	r3, [r7, #12]
    dir_M1 = 1;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <setMotorSpeedM1+0x104>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // DIR Motor 1 (Forward)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2102      	movs	r1, #2
 8001c42:	4819      	ldr	r0, [pc, #100]	; (8001ca8 <setMotorSpeedM1+0x10c>)
 8001c44:	f001 f9ba 	bl	8002fbc <HAL_GPIO_WritePin>
 8001c48:	e00e      	b.n	8001c68 <setMotorSpeedM1+0xcc>
  }
  else
  {
    timer_period1 = 2000000 / -speed;
 8001c4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c4e:	425b      	negs	r3, r3
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <setMotorSpeedM1+0x108>)
 8001c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c56:	60fb      	str	r3, [r7, #12]
    dir_M1 = -1;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <setMotorSpeedM1+0x104>)
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Dir Motor 1
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2102      	movs	r1, #2
 8001c62:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <setMotorSpeedM1+0x10c>)
 8001c64:	f001 f9aa 	bl	8002fbc <HAL_GPIO_WritePin>
  }
  if (timer_period1 > 65535)   // Check for minimun speed (maximun period without overflow)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	db02      	blt.n	8001c76 <setMotorSpeedM1+0xda>
    timer_period1 = ZERO_SPEED;
 8001c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c74:	60fb      	str	r3, [r7, #12]

  adjustPreiodTM1(timer_period1);
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fdfa 	bl	8001870 <adjustPreiodTM1>
  if (__HAL_TIM_GET_COUNTER(&htim1) > htim1.Init.Period) {
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <setMotorSpeedM1+0x110>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <setMotorSpeedM1+0x110>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d903      	bls.n	8001c92 <setMotorSpeedM1+0xf6>
    __HAL_TIM_SET_COUNTER(&htim1, 0);  // Reset the timer counter to 0
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <setMotorSpeedM1+0x110>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001b4 	.word	0x200001b4
 8001ca0:	2000018a 	.word	0x2000018a
 8001ca4:	001e8480 	.word	0x001e8480
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	200002c0 	.word	0x200002c0

08001cb0 <setMotorSpeedM2>:

// Set speed of Stepper Motor2
// tspeed could be positive or negative (reverse)
void setMotorSpeedM2(int16_t tspeed)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  int16_t speed;

  // Limit max speed?

//   WE LIMIT MAX ACCELERATION of the motors
  if ((speed_M2 - tspeed) > MAX_ACCEL)
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	dd09      	ble.n	8001ce0 <setMotorSpeedM2+0x30>
    speed_M2 -= MAX_ACCEL;
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b02      	subs	r3, #2
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	e016      	b.n	8001d0e <setMotorSpeedM2+0x5e>
  else if ((speed_M2 - tspeed) < -MAX_ACCEL)
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f113 0f02 	cmn.w	r3, #2
 8001cf2:	da09      	bge.n	8001d08 <setMotorSpeedM2+0x58>
    speed_M2 += MAX_ACCEL;
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	e002      	b.n	8001d0e <setMotorSpeedM2+0x5e>
  else
    speed_M2 = tspeed;
 8001d08:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	8013      	strh	r3, [r2, #0]


  speed = speed_M2 * 40; // 1/16 Microstepping
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	817b      	strh	r3, [r7, #10]

  if (speed == 0)
 8001d22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <setMotorSpeedM2+0x88>
  {
    timer_period2 = ZERO_SPEED;
 8001d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2e:	60fb      	str	r3, [r7, #12]
    dir_M2 = 0;
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <setMotorSpeedM2+0x104>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e021      	b.n	8001d7c <setMotorSpeedM2+0xcc>
  }
  else if (speed > 0)
 8001d38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd0e      	ble.n	8001d5e <setMotorSpeedM2+0xae>
  {
    timer_period2 = 2000000 / speed; // 2Mhz timer
 8001d40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <setMotorSpeedM2+0x108>)
 8001d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
    dir_M2 = 1;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <setMotorSpeedM2+0x104>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);  // Dir Motor2 (Forward)
 8001d52:	2200      	movs	r2, #0
 8001d54:	2108      	movs	r1, #8
 8001d56:	4819      	ldr	r0, [pc, #100]	; (8001dbc <setMotorSpeedM2+0x10c>)
 8001d58:	f001 f930 	bl	8002fbc <HAL_GPIO_WritePin>
 8001d5c:	e00e      	b.n	8001d7c <setMotorSpeedM2+0xcc>
  }
  else
  {
    timer_period2 = 2000000 / -speed;
 8001d5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d62:	425b      	negs	r3, r3
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <setMotorSpeedM2+0x108>)
 8001d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
    dir_M2 = -1;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <setMotorSpeedM2+0x104>)
 8001d6e:	22ff      	movs	r2, #255	; 0xff
 8001d70:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // DIR Motor 2
 8001d72:	2201      	movs	r2, #1
 8001d74:	2108      	movs	r1, #8
 8001d76:	4811      	ldr	r0, [pc, #68]	; (8001dbc <setMotorSpeedM2+0x10c>)
 8001d78:	f001 f920 	bl	8002fbc <HAL_GPIO_WritePin>
  }
  if (timer_period2 > 65535)   // Check for minimun speed (maximun period without overflow)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	db02      	blt.n	8001d8a <setMotorSpeedM2+0xda>
    timer_period2 = ZERO_SPEED;
 8001d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d88:	60fb      	str	r3, [r7, #12]

  adjustPreiodTM2(timer_period2);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fdc2 	bl	8001914 <adjustPreiodTM2>
  // Check  if we need to reset the timer...
  if (__HAL_TIM_GET_COUNTER(&htim2) > htim2.Init.Period) {
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <setMotorSpeedM2+0x110>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <setMotorSpeedM2+0x110>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d903      	bls.n	8001da6 <setMotorSpeedM2+0xf6>
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the timer counter to 0
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <setMotorSpeedM2+0x110>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001b6 	.word	0x200001b6
 8001db4:	200001ac 	.word	0x200001ac
 8001db8:	001e8480 	.word	0x001e8480
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	20000308 	.word	0x20000308
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


		HAL_Init();
 8001dce:	f000 fe2b 	bl	8002a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd2:	f000 faa7 	bl	8002324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd6:	f000 fc03 	bl	80025e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001dda:	f000 fb17 	bl	800240c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001dde:	f000 fb65 	bl	80024ac <MX_TIM2_Init>
  MX_I2C1_Init();
 8001de2:	f000 fae5 	bl	80023b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001de6:	f000 fbad 	bl	8002544 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001dea:	48ad      	ldr	r0, [pc, #692]	; (80020a0 <main+0x2d8>)
 8001dec:	f002 fd44 	bl	8004878 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001df0:	48ac      	ldr	r0, [pc, #688]	; (80020a4 <main+0x2dc>)
 8001df2:	f002 fd41 	bl	8004878 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001df6:	48ac      	ldr	r0, [pc, #688]	; (80020a8 <main+0x2e0>)
 8001df8:	f002 fd3e 	bl	8004878 <HAL_TIM_Base_Start_IT>


  MPU6050_Init(&hi2c1);
 8001dfc:	48ab      	ldr	r0, [pc, #684]	; (80020ac <main+0x2e4>)
 8001dfe:	f7ff f985 	bl	800110c <MPU6050_Init>

  /* USER CODE END 2 */
  timer_old = __HAL_TIM_GET_COUNTER(&htim3);
 8001e02:	4ba9      	ldr	r3, [pc, #676]	; (80020a8 <main+0x2e0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4ba9      	ldr	r3, [pc, #676]	; (80020b0 <main+0x2e8>)
 8001e0c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    loop_counter++;
 8001e0e:	4ba9      	ldr	r3, [pc, #676]	; (80020b4 <main+0x2ec>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4ba7      	ldr	r3, [pc, #668]	; (80020b4 <main+0x2ec>)
 8001e18:	701a      	strb	r2, [r3, #0]
	    slow_loop_counter++;
 8001e1a:	4ba7      	ldr	r3, [pc, #668]	; (80020b8 <main+0x2f0>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4ba5      	ldr	r3, [pc, #660]	; (80020b8 <main+0x2f0>)
 8001e24:	701a      	strb	r2, [r3, #0]
	    dt = (timer_value - timer_old) * 0.000001; // dt in seconds
 8001e26:	4ba5      	ldr	r3, [pc, #660]	; (80020bc <main+0x2f4>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4ba1      	ldr	r3, [pc, #644]	; (80020b0 <main+0x2e8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fadf 	bl	80003f4 <__aeabi_i2d>
 8001e36:	a394      	add	r3, pc, #592	; (adr r3, 8002088 <main+0x2c0>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fb44 	bl	80004c8 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4618      	mov	r0, r3
 8001e46:	4621      	mov	r1, r4
 8001e48:	f7fe fe16 	bl	8000a78 <__aeabi_d2f>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b9c      	ldr	r3, [pc, #624]	; (80020c0 <main+0x2f8>)
 8001e50:	601a      	str	r2, [r3, #0]
	    timer_old = timer_value;
 8001e52:	4b9a      	ldr	r3, [pc, #616]	; (80020bc <main+0x2f4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a96      	ldr	r2, [pc, #600]	; (80020b0 <main+0x2e8>)
 8001e58:	6013      	str	r3, [r2, #0]
	    timer_value = __HAL_TIM_GET_COUNTER(&htim3);
 8001e5a:	4b93      	ldr	r3, [pc, #588]	; (80020a8 <main+0x2e0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b96      	ldr	r3, [pc, #600]	; (80020bc <main+0x2f4>)
 8001e64:	601a      	str	r2, [r3, #0]
	    angle_adjusted_Old = angle_adjusted;
 8001e66:	4b97      	ldr	r3, [pc, #604]	; (80020c4 <main+0x2fc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a97      	ldr	r2, [pc, #604]	; (80020c8 <main+0x300>)
 8001e6c:	6013      	str	r3, [r2, #0]
//	     Get new orientation angle from IMU (MPU6050)
	    MPU6050_Read_All(&hi2c1, &MPU6050);
 8001e6e:	4997      	ldr	r1, [pc, #604]	; (80020cc <main+0x304>)
 8001e70:	488e      	ldr	r0, [pc, #568]	; (80020ac <main+0x2e4>)
 8001e72:	f7ff f9a5 	bl	80011c0 <MPU6050_Read_All>
	    MPU_sensor_angle = (float)MPU6050.KalmanAngleY;
 8001e76:	4b95      	ldr	r3, [pc, #596]	; (80020cc <main+0x304>)
 8001e78:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001e7c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	4621      	mov	r1, r4
 8001e84:	f7fe fdf8 	bl	8000a78 <__aeabi_d2f>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <main+0x308>)
 8001e8c:	601a      	str	r2, [r3, #0]
//	    MPU_sensor_angleX = (float)MPU6050.KalmanAngleX;


	    angle_adjusted = MPU_sensor_angle + angle_offset;
 8001e8e:	4b90      	ldr	r3, [pc, #576]	; (80020d0 <main+0x308>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b90      	ldr	r3, [pc, #576]	; (80020d4 <main+0x30c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7fe fe43 	bl	8000b24 <__addsf3>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <main+0x2fc>)
 8001ea4:	601a      	str	r2, [r3, #0]



	    // We calculate the estimated robot speed:
	    // Estimated_Speed = angular_velocity_of_stepper_motors(combined) - angular_velocity_of_robot(angle measured by IMU)
	    actual_robot_speed = (speed_M1 + speed_M2) / 2; // Positive: forward
 8001ea6:	4b8c      	ldr	r3, [pc, #560]	; (80020d8 <main+0x310>)
 8001ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b8b      	ldr	r3, [pc, #556]	; (80020dc <main+0x314>)
 8001eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	0fda      	lsrs	r2, r3, #31
 8001eb8:	4413      	add	r3, r2
 8001eba:	105b      	asrs	r3, r3, #1
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <main+0x318>)
 8001ec0:	801a      	strh	r2, [r3, #0]

	    int16_t angular_velocity = (angle_adjusted - angle_adjusted_Old) * 25.0; // 25 is an empirical extracted factor to adjust for real units
 8001ec2:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <main+0x2fc>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <main+0x300>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7fe fe27 	bl	8000b20 <__aeabi_fsub>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fa9f 	bl	8000418 <__aeabi_f2d>
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <main+0x31c>)
 8001ee0:	f7fe faf2 	bl	80004c8 <__aeabi_dmul>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4621      	mov	r1, r4
 8001eec:	f7fe fd9c 	bl	8000a28 <__aeabi_d2iz>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	80fb      	strh	r3, [r7, #6]
	    int16_t estimated_speed = -actual_robot_speed + angular_velocity;
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	; (80020e0 <main+0x318>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	80bb      	strh	r3, [r7, #4]
	    estimated_speed_filtered = estimated_speed_filtered * 0.9 + (float)estimated_speed * 0.1; // low pass filter on estimated speed
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <main+0x320>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fa85 	bl	8000418 <__aeabi_f2d>
 8001f0e:	a360      	add	r3, pc, #384	; (adr r3, 8002090 <main+0x2c8>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe fad8 	bl	80004c8 <__aeabi_dmul>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	4625      	mov	r5, r4
 8001f1e:	461c      	mov	r4, r3
 8001f20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe feb1 	bl	8000c8c <__aeabi_i2f>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fa73 	bl	8000418 <__aeabi_f2d>
 8001f32:	a359      	add	r3, pc, #356	; (adr r3, 8002098 <main+0x2d0>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fac6 	bl	80004c8 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f90a 	bl	800015c <__adddf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f7fe fd92 	bl	8000a78 <__aeabi_d2f>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <main+0x320>)
 8001f58:	601a      	str	r2, [r3, #0]

	      // POSITION CONTROL. INPUT: Target steps for each motor. Output: motors speed
	      motor1_control = positionPDControl(steps1, target_steps1, Kp_position, Kd_position, speed_M1);
 8001f5a:	4b64      	ldr	r3, [pc, #400]	; (80020ec <main+0x324>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <main+0x328>)
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <main+0x32c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b64      	ldr	r3, [pc, #400]	; (80020f8 <main+0x330>)
 8001f68:	681c      	ldr	r4, [r3, #0]
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <main+0x310>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4623      	mov	r3, r4
 8001f74:	f7ff fdd8 	bl	8001b28 <positionPDControl>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f8a0 	bl	80010c0 <__aeabi_f2iz>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <main+0x334>)
 8001f86:	801a      	strh	r2, [r3, #0]
	      motor2_control = positionPDControl(steps2, target_steps2, Kp_position, Kd_position, speed_M2);
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <main+0x338>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <main+0x33c>)
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <main+0x32c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <main+0x330>)
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <main+0x314>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	f7ff fdc1 	bl	8001b28 <positionPDControl>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f889 	bl	80010c0 <__aeabi_f2iz>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	4b55      	ldr	r3, [pc, #340]	; (8002108 <main+0x340>)
 8001fb4:	801a      	strh	r2, [r3, #0]

//	       Convert from motor position control to throttle / steering commands
	      throttle = (motor1_control + motor2_control) / 2;
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <main+0x334>)
 8001fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <main+0x340>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	0fda      	lsrs	r2, r3, #31
 8001fc8:	4413      	add	r3, r2
 8001fca:	105b      	asrs	r3, r3, #1
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	4b4f      	ldr	r3, [pc, #316]	; (800210c <main+0x344>)
 8001fd0:	801a      	strh	r2, [r3, #0]
	      throttle = constrain(throttle, -10, 10);
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <main+0x344>)
 8001fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd8:	220a      	movs	r2, #10
 8001fda:	f06f 0109 	mvn.w	r1, #9
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fc2d 	bl	800183e <constrain>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <main+0x344>)
 8001fea:	801a      	strh	r2, [r3, #0]
	      steering = motor2_control - motor1_control;
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <main+0x340>)
 8001fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <main+0x334>)
 8001ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fe45 	bl	8000c8c <__aeabi_i2f>
 8002002:	4602      	mov	r2, r0
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <main+0x348>)
 8002006:	601a      	str	r2, [r3, #0]
	      steering = constrain(steering, -10, 10);
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <main+0x348>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f857 	bl	80010c0 <__aeabi_f2iz>
 8002012:	4603      	mov	r3, r0
 8002014:	220a      	movs	r2, #10
 8002016:	f06f 0109 	mvn.w	r1, #9
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fc0f 	bl	800183e <constrain>
 8002020:	4603      	mov	r3, r0
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fe32 	bl	8000c8c <__aeabi_i2f>
 8002028:	4602      	mov	r2, r0
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <main+0x348>)
 800202c:	601a      	str	r2, [r3, #0]

	    // ROBOT SPEED CONTROL: This is a PI controller.
	    //    input:user throttle(robot speed), variable: estimated robot speed, output: target robot angle to get the desired speed
	    target_angle = 0;
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <main+0x34c>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
	      	    target_angle = speedPIControl(dt, estimated_speed_filtered, throttle, Kp_thr, Ki_thr);
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <main+0x2f8>)
 8002038:	681c      	ldr	r4, [r3, #0]
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <main+0x320>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f83e 	bl	80010c0 <__aeabi_f2iz>
 8002044:	4603      	mov	r3, r0
 8002046:	b219      	sxth	r1, r3
 8002048:	4b30      	ldr	r3, [pc, #192]	; (800210c <main+0x344>)
 800204a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <main+0x350>)
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <main+0x354>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4603      	mov	r3, r0
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff fd04 	bl	8001a68 <speedPIControl>
 8002060:	4602      	mov	r2, r0
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <main+0x34c>)
 8002064:	601a      	str	r2, [r3, #0]
	    target_angle = constrain(target_angle, -max_target_angle, max_target_angle); // limited output
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <main+0x34c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f828 	bl	80010c0 <__aeabi_f2iz>
 8002070:	4604      	mov	r4, r0
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <main+0x358>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f820 	bl	80010c0 <__aeabi_f2iz>
 8002080:	4605      	mov	r5, r0
 8002082:	e04f      	b.n	8002124 <main+0x35c>
 8002084:	f3af 8000 	nop.w
 8002088:	a0b5ed8d 	.word	0xa0b5ed8d
 800208c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002090:	cccccccd 	.word	0xcccccccd
 8002094:	3feccccc 	.word	0x3feccccc
 8002098:	9999999a 	.word	0x9999999a
 800209c:	3fb99999 	.word	0x3fb99999
 80020a0:	200002c0 	.word	0x200002c0
 80020a4:	20000308 	.word	0x20000308
 80020a8:	20000270 	.word	0x20000270
 80020ac:	200001c0 	.word	0x200001c0
 80020b0:	20000174 	.word	0x20000174
 80020b4:	2000016c 	.word	0x2000016c
 80020b8:	2000018e 	.word	0x2000018e
 80020bc:	20000178 	.word	0x20000178
 80020c0:	200001a8 	.word	0x200001a8
 80020c4:	20000184 	.word	0x20000184
 80020c8:	2000019c 	.word	0x2000019c
 80020cc:	20000218 	.word	0x20000218
 80020d0:	200002bc 	.word	0x200002bc
 80020d4:	200000ac 	.word	0x200000ac
 80020d8:	200001b4 	.word	0x200001b4
 80020dc:	200001b6 	.word	0x200001b6
 80020e0:	20000198 	.word	0x20000198
 80020e4:	40390000 	.word	0x40390000
 80020e8:	200001a0 	.word	0x200001a0
 80020ec:	2000017c 	.word	0x2000017c
 80020f0:	20000158 	.word	0x20000158
 80020f4:	200000a0 	.word	0x200000a0
 80020f8:	200000a4 	.word	0x200000a4
 80020fc:	20000192 	.word	0x20000192
 8002100:	2000015c 	.word	0x2000015c
 8002104:	20000194 	.word	0x20000194
 8002108:	2000018c 	.word	0x2000018c
 800210c:	20000170 	.word	0x20000170
 8002110:	200001b0 	.word	0x200001b0
 8002114:	20000154 	.word	0x20000154
 8002118:	20000098 	.word	0x20000098
 800211c:	2000009c 	.word	0x2000009c
 8002120:	200000a8 	.word	0x200000a8
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <main+0x508>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ffc9 	bl	80010c0 <__aeabi_f2iz>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	4629      	mov	r1, r5
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff fb82 	bl	800183e <constrain>
 800213a:	4603      	mov	r3, r0
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fda5 	bl	8000c8c <__aeabi_i2f>
 8002142:	4602      	mov	r2, r0
 8002144:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <main+0x50c>)
 8002146:	601a      	str	r2, [r3, #0]


//	     Stability control (100Hz loop): This is a PD controller.
//	        input: robot target angle(from SPEED CONTROL), variable: robot angle, output: Motor speed
//	        We integrate the output (sumatory), so the output is really the motor acceleration, not motor speed.
	    control_output += stabilityPDControl(dt, angle_adjusted, target_angle, Kp, Kd);
 8002148:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <main+0x510>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	4b63      	ldr	r3, [pc, #396]	; (80022dc <main+0x514>)
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <main+0x50c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <main+0x518>)
 8002156:	681c      	ldr	r4, [r3, #0]
 8002158:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <main+0x51c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4623      	mov	r3, r4
 8002160:	f7ff fc26 	bl	80019b0 <stabilityPDControl>
 8002164:	4602      	mov	r2, r0
 8002166:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <main+0x520>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f7fe fcd9 	bl	8000b24 <__addsf3>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b5c      	ldr	r3, [pc, #368]	; (80022e8 <main+0x520>)
 8002178:	601a      	str	r2, [r3, #0]
	    control_output = constrain(control_output, -MAX_CONTROL_OUTPUT, MAX_CONTROL_OUTPUT); // Limit max output from control
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <main+0x520>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe ff9e 	bl	80010c0 <__aeabi_f2iz>
 8002184:	4603      	mov	r3, r0
 8002186:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800218a:	4958      	ldr	r1, [pc, #352]	; (80022ec <main+0x524>)
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fb56 	bl	800183e <constrain>
 8002192:	4603      	mov	r3, r0
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fd79 	bl	8000c8c <__aeabi_i2f>
 800219a:	4602      	mov	r2, r0
 800219c:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <main+0x520>)
 800219e:	601a      	str	r2, [r3, #0]

	    // The steering part from the user is injected directly to the output
	    motor1 = control_output + steering;
 80021a0:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <main+0x520>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <main+0x528>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7fe fcba 	bl	8000b24 <__addsf3>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff84 	bl	80010c0 <__aeabi_f2iz>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <main+0x52c>)
 80021be:	801a      	strh	r2, [r3, #0]
	    motor2 = control_output - steering;
 80021c0:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <main+0x520>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <main+0x528>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7fe fca8 	bl	8000b20 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe ff74 	bl	80010c0 <__aeabi_f2iz>
 80021d8:	4603      	mov	r3, r0
 80021da:	b21a      	sxth	r2, r3
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <main+0x530>)
 80021de:	801a      	strh	r2, [r3, #0]

	    // Limit max speed (control output)
	    motor1 = constrain(motor1, -MAX_CONTROL_OUTPUT, MAX_CONTROL_OUTPUT);
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <main+0x52c>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021ea:	4940      	ldr	r1, [pc, #256]	; (80022ec <main+0x524>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fb26 	bl	800183e <constrain>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <main+0x52c>)
 80021f8:	801a      	strh	r2, [r3, #0]
	    motor2 = constrain(motor2, -MAX_CONTROL_OUTPUT, MAX_CONTROL_OUTPUT);
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <main+0x530>)
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002204:	4939      	ldr	r1, [pc, #228]	; (80022ec <main+0x524>)
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb19 	bl	800183e <constrain>
 800220c:	4603      	mov	r3, r0
 800220e:	b21a      	sxth	r2, r3
 8002210:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <main+0x530>)
 8002212:	801a      	strh	r2, [r3, #0]

	    int angle_ready = 70;  // Default angle
 8002214:	2346      	movs	r3, #70	; 0x46
 8002216:	603b      	str	r3, [r7, #0]
	    if ((angle_adjusted < angle_ready) && (angle_adjusted > -angle_ready)) // Is robot ready (upright?)
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f7fe fd37 	bl	8000c8c <__aeabi_i2f>
 800221e:	4602      	mov	r2, r0
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <main+0x514>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f7fe ff40 	bl	80010ac <__aeabi_fcmpgt>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d020      	beq.n	8002274 <main+0x4ac>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	425b      	negs	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fd28 	bl	8000c8c <__aeabi_i2f>
 800223c:	4602      	mov	r2, r0
 800223e:	4b27      	ldr	r3, [pc, #156]	; (80022dc <main+0x514>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7fe ff13 	bl	8001070 <__aeabi_fcmplt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d011      	beq.n	8002274 <main+0x4ac>
	    {
	      // NORMAL MODE
	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);  // Motors enable
 8002250:	2200      	movs	r2, #0
 8002252:	2120      	movs	r1, #32
 8002254:	4829      	ldr	r0, [pc, #164]	; (80022fc <main+0x534>)
 8002256:	f000 feb1 	bl	8002fbc <HAL_GPIO_WritePin>
	      // NOW we send the commands to the motors
	      setMotorSpeedM1(motor1);
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <main+0x52c>)
 800225c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc9b 	bl	8001b9c <setMotorSpeedM1>
	      setMotorSpeedM2(motor2);
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <main+0x530>)
 8002268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fd1f 	bl	8001cb0 <setMotorSpeedM2>
 8002272:	e02c      	b.n	80022ce <main+0x506>
	    }
	    else   // Robot not ready (flat), angle > angle_ready => ROBOT OFF
	    {
	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // Disable motors
 8002274:	2201      	movs	r2, #1
 8002276:	2120      	movs	r1, #32
 8002278:	4820      	ldr	r0, [pc, #128]	; (80022fc <main+0x534>)
 800227a:	f000 fe9f 	bl	8002fbc <HAL_GPIO_WritePin>
	      setMotorSpeedM1(0);
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fc8c 	bl	8001b9c <setMotorSpeedM1>
	      setMotorSpeedM2(0);
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff fd13 	bl	8001cb0 <setMotorSpeedM2>
	      PID_errorSum = 0;  // Reset PID I term
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <main+0x538>)
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
	      Kp = KP_RAISEUP;   // CONTROL GAINS FOR RAISE UP
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <main+0x518>)
 8002294:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <main+0x53c>)
 8002296:	601a      	str	r2, [r3, #0]
	      Kd = KD_RAISEUP;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <main+0x51c>)
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <main+0x540>)
 800229c:	601a      	str	r2, [r3, #0]
	      Kp_thr = KP_THROTTLE_RAISEUP;
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <main+0x544>)
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
	      Ki_thr = KI_THROTTLE_RAISEUP;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <main+0x548>)
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
	      // RESET steps
	      steps1 = 0;
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <main+0x54c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
	      steps2 = 0;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <main+0x550>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
	      positionControlMode = false;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <main+0x554>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
//	      OSCmove_mode = false;
	      throttle = 0;
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <main+0x558>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	801a      	strh	r2, [r3, #0]
	      steering = 0;
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <main+0x528>)
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
  {
 80022ce:	e59e      	b.n	8001e0e <main+0x46>
 80022d0:	200000a8 	.word	0x200000a8
 80022d4:	20000154 	.word	0x20000154
 80022d8:	200001a8 	.word	0x200001a8
 80022dc:	20000184 	.word	0x20000184
 80022e0:	20000090 	.word	0x20000090
 80022e4:	20000094 	.word	0x20000094
 80022e8:	20000168 	.word	0x20000168
 80022ec:	fffffe0c 	.word	0xfffffe0c
 80022f0:	200001b0 	.word	0x200001b0
 80022f4:	20000188 	.word	0x20000188
 80022f8:	20000150 	.word	0x20000150
 80022fc:	40010800 	.word	0x40010800
 8002300:	200001a4 	.word	0x200001a4
 8002304:	3dcccccd 	.word	0x3dcccccd
 8002308:	3e23d70a 	.word	0x3e23d70a
 800230c:	20000098 	.word	0x20000098
 8002310:	2000009c 	.word	0x2000009c
 8002314:	2000017c 	.word	0x2000017c
 8002318:	2000015c 	.word	0x2000015c
 800231c:	2000014c 	.word	0x2000014c
 8002320:	20000170 	.word	0x20000170

08002324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b090      	sub	sp, #64	; 0x40
 8002328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232a:	f107 0318 	add.w	r3, r7, #24
 800232e:	2228      	movs	r2, #40	; 0x28
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fe70 	bl	8005018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002346:	2301      	movs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002354:	2301      	movs	r3, #1
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002358:	2302      	movs	r3, #2
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800235c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002362:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	4618      	mov	r0, r3
 800236e:	f001 fe2b 	bl	8003fc8 <HAL_RCC_OscConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002378:	f000 f99e 	bl	80026b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237c:	230f      	movs	r3, #15
 800237e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002380:	2302      	movs	r3, #2
 8002382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002392:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2102      	movs	r1, #2
 8002398:	4618      	mov	r0, r3
 800239a:	f002 f895 	bl	80044c8 <HAL_RCC_ClockConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023a4:	f000 f988 	bl	80026b8 <Error_Handler>
  }
}
 80023a8:	bf00      	nop
 80023aa:	3740      	adds	r7, #64	; 0x40
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <MX_I2C1_Init+0x50>)
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <MX_I2C1_Init+0x54>)
 80023b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_I2C1_Init+0x50>)
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <MX_I2C1_Init+0x58>)
 80023be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <MX_I2C1_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_I2C1_Init+0x50>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MX_I2C1_Init+0x50>)
 80023ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <MX_I2C1_Init+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_I2C1_Init+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <MX_I2C1_Init+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_I2C1_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ec:	4804      	ldr	r0, [pc, #16]	; (8002400 <MX_I2C1_Init+0x50>)
 80023ee:	f000 fdfd 	bl	8002fec <HAL_I2C_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023f8:	f000 f95e 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200001c0 	.word	0x200001c0
 8002404:	40005400 	.word	0x40005400
 8002408:	000186a0 	.word	0x000186a0

0800240c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002420:	463b      	mov	r3, r7
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_TIM1_Init+0x98>)
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <MX_TIM1_Init+0x9c>)
 800242c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <MX_TIM1_Init+0x98>)
 8002430:	2223      	movs	r2, #35	; 0x23
 8002432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_TIM1_Init+0x98>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_TIM1_Init+0x98>)
 800243c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <MX_TIM1_Init+0x98>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <MX_TIM1_Init+0x98>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <MX_TIM1_Init+0x98>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002454:	4813      	ldr	r0, [pc, #76]	; (80024a4 <MX_TIM1_Init+0x98>)
 8002456:	f002 f9bf 	bl	80047d8 <HAL_TIM_Base_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002460:	f000 f92a 	bl	80026b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	4619      	mov	r1, r3
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <MX_TIM1_Init+0x98>)
 8002472:	f002 fb5b 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800247c:	f000 f91c 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002488:	463b      	mov	r3, r7
 800248a:	4619      	mov	r1, r3
 800248c:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_TIM1_Init+0x98>)
 800248e:	f002 fd29 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002498:	f000 f90e 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200002c0 	.word	0x200002c0
 80024a8:	40012c00 	.word	0x40012c00

080024ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c0:	463b      	mov	r3, r7
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <MX_TIM2_Init+0x94>)
 80024ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <MX_TIM2_Init+0x94>)
 80024d2:	2223      	movs	r2, #35	; 0x23
 80024d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_TIM2_Init+0x94>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <MX_TIM2_Init+0x94>)
 80024de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <MX_TIM2_Init+0x94>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <MX_TIM2_Init+0x94>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <MX_TIM2_Init+0x94>)
 80024f2:	f002 f971 	bl	80047d8 <HAL_TIM_Base_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024fc:	f000 f8dc 	bl	80026b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	4619      	mov	r1, r3
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <MX_TIM2_Init+0x94>)
 800250e:	f002 fb0d 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002518:	f000 f8ce 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_TIM2_Init+0x94>)
 800252a:	f002 fcdb 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002534:	f000 f8c0 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000308 	.word	0x20000308

08002544 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <MX_TIM3_Init+0x94>)
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_TIM3_Init+0x98>)
 8002564:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002566:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <MX_TIM3_Init+0x94>)
 8002568:	2247      	movs	r2, #71	; 0x47
 800256a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <MX_TIM3_Init+0x94>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <MX_TIM3_Init+0x94>)
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <MX_TIM3_Init+0x94>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_TIM3_Init+0x94>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <MX_TIM3_Init+0x94>)
 8002588:	f002 f926 	bl	80047d8 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002592:	f000 f891 	bl	80026b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4619      	mov	r1, r3
 80025a2:	480d      	ldr	r0, [pc, #52]	; (80025d8 <MX_TIM3_Init+0x94>)
 80025a4:	f002 fac2 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f000 f883 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ba:	463b      	mov	r3, r7
 80025bc:	4619      	mov	r1, r3
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <MX_TIM3_Init+0x94>)
 80025c0:	f002 fc90 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80025ca:	f000 f875 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000270 	.word	0x20000270
 80025dc:	40000400 	.word	0x40000400

080025e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f4:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <MX_GPIO_Init+0xcc>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <MX_GPIO_Init+0xcc>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <MX_GPIO_Init+0xcc>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <MX_GPIO_Init+0xcc>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a26      	ldr	r2, [pc, #152]	; (80026ac <MX_GPIO_Init+0xcc>)
 8002612:	f043 0320 	orr.w	r3, r3, #32
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <MX_GPIO_Init+0xcc>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_GPIO_Init+0xcc>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <MX_GPIO_Init+0xcc>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6193      	str	r3, [r2, #24]
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_GPIO_Init+0xcc>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_GPIO_Init+0xcc>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <MX_GPIO_Init+0xcc>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_GPIO_Init+0xcc>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265a:	4815      	ldr	r0, [pc, #84]	; (80026b0 <MX_GPIO_Init+0xd0>)
 800265c:	f000 fcae 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002660:	2200      	movs	r2, #0
 8002662:	213e      	movs	r1, #62	; 0x3e
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <MX_GPIO_Init+0xd4>)
 8002666:	f000 fca9 	bl	8002fbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2302      	movs	r3, #2
 800267a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	4619      	mov	r1, r3
 8002682:	480b      	ldr	r0, [pc, #44]	; (80026b0 <MX_GPIO_Init+0xd0>)
 8002684:	f000 fb40 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002688:	233e      	movs	r3, #62	; 0x3e
 800268a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2302      	movs	r3, #2
 8002696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4619      	mov	r1, r3
 800269e:	4805      	ldr	r0, [pc, #20]	; (80026b4 <MX_GPIO_Init+0xd4>)
 80026a0:	f000 fb32 	bl	8002d08 <HAL_GPIO_Init>

}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40011000 	.word	0x40011000
 80026b4:	40010800 	.word	0x40010800

080026b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026be:	e7fe      	b.n	80026be <Error_Handler+0x6>

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_MspInit+0x5c>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_MspInit+0x5c>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6193      	str	r3, [r2, #24]
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_MspInit+0x5c>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_MspInit+0x5c>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_MspInit+0x5c>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_MspInit+0x5c>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_MspInit+0x60>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_MspInit+0x60>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000
 8002720:	40010000 	.word	0x40010000

08002724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_I2C_MspInit+0x90>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d132      	bne.n	80027aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_I2C_MspInit+0x94>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_I2C_MspInit+0x94>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_I2C_MspInit+0x94>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800275c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002762:	2312      	movs	r3, #18
 8002764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4812      	ldr	r0, [pc, #72]	; (80027bc <HAL_I2C_MspInit+0x98>)
 8002772:	f000 fac9 	bl	8002d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_I2C_MspInit+0x9c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_I2C_MspInit+0x9c>)
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_I2C_MspInit+0x94>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_I2C_MspInit+0x94>)
 8002798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_I2C_MspInit+0x94>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40005400 	.word	0x40005400
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010c00 	.word	0x40010c00
 80027c0:	40010000 	.word	0x40010000

080027c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_TIM_Base_MspInit+0xac>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d114      	bne.n	8002800 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d6:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a26      	ldr	r2, [pc, #152]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 80027dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2102      	movs	r1, #2
 80027f2:	2019      	movs	r0, #25
 80027f4:	f000 fa51 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027f8:	2019      	movs	r0, #25
 80027fa:	f000 fa6a 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027fe:	e032      	b.n	8002866 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d114      	bne.n	8002834 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2102      	movs	r1, #2
 8002826:	201c      	movs	r0, #28
 8002828:	f000 fa37 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800282c:	201c      	movs	r0, #28
 800282e:	f000 fa50 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 8002832:	e018      	b.n	8002866 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_TIM_Base_MspInit+0xb4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d113      	bne.n	8002866 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_TIM_Base_MspInit+0xb0>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	201d      	movs	r0, #29
 800285c:	f000 fa1d 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002860:	201d      	movs	r0, #29
 8002862:	f000 fa36 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40000400 	.word	0x40000400

0800287c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <NMI_Handler+0x4>

08002882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <MemManage_Handler+0x4>

0800288e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <UsageFault_Handler+0x4>

0800289a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c2:	f000 f8f7 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028d2:	4818      	ldr	r0, [pc, #96]	; (8002934 <TIM1_UP_IRQHandler+0x68>)
 80028d4:	f002 f822 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  if (dir_M1 == 0) // If we are not moving we dont generate a pulse
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <TIM1_UP_IRQHandler+0x6c>)
 80028da:	f993 3000 	ldrsb.w	r3, [r3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d024      	beq.n	800292c <TIM1_UP_IRQHandler+0x60>
    return;
  // We generate 1us STEP pulse
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 80028e2:	2201      	movs	r2, #1
 80028e4:	2104      	movs	r1, #4
 80028e6:	4815      	ldr	r0, [pc, #84]	; (800293c <TIM1_UP_IRQHandler+0x70>)
 80028e8:	f000 fb68 	bl	8002fbc <HAL_GPIO_WritePin>
//  delay_us(100);
//  for (int i=0; i<500; i++){
//	  __NOP();
//  }
  for (int i=0; i<50; i++){
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	e003      	b.n	80028fa <TIM1_UP_IRQHandler+0x2e>
	  __NOP();
 80028f2:	bf00      	nop
  for (int i=0; i<50; i++){
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b31      	cmp	r3, #49	; 0x31
 80028fe:	ddf8      	ble.n	80028f2 <TIM1_UP_IRQHandler+0x26>
  }
  if (dir_M1 > 0)
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <TIM1_UP_IRQHandler+0x6c>)
 8002902:	f993 3000 	ldrsb.w	r3, [r3]
 8002906:	2b00      	cmp	r3, #0
 8002908:	dd05      	ble.n	8002916 <TIM1_UP_IRQHandler+0x4a>
    steps1--;
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <TIM1_UP_IRQHandler+0x74>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <TIM1_UP_IRQHandler+0x74>)
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e004      	b.n	8002920 <TIM1_UP_IRQHandler+0x54>
  else
    steps1++;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <TIM1_UP_IRQHandler+0x74>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a08      	ldr	r2, [pc, #32]	; (8002940 <TIM1_UP_IRQHandler+0x74>)
 800291e:	6013      	str	r3, [r2, #0]
//  delay_us(300);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	2104      	movs	r1, #4
 8002924:	4805      	ldr	r0, [pc, #20]	; (800293c <TIM1_UP_IRQHandler+0x70>)
 8002926:	f000 fb49 	bl	8002fbc <HAL_GPIO_WritePin>
 800292a:	e000      	b.n	800292e <TIM1_UP_IRQHandler+0x62>
    return;
 800292c:	bf00      	nop

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200002c0 	.word	0x200002c0
 8002938:	2000018a 	.word	0x2000018a
 800293c:	40010800 	.word	0x40010800
 8002940:	2000017c 	.word	0x2000017c

08002944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800294a:	4818      	ldr	r0, [pc, #96]	; (80029ac <TIM2_IRQHandler+0x68>)
 800294c:	f001 ffe6 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (dir_M2 == 0) // If we are not moving we dont generate a pulse
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <TIM2_IRQHandler+0x6c>)
 8002952:	f993 3000 	ldrsb.w	r3, [r3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <TIM2_IRQHandler+0x60>
    return;
  // We generate 1us STEP pulse
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800295a:	2201      	movs	r2, #1
 800295c:	2110      	movs	r1, #16
 800295e:	4815      	ldr	r0, [pc, #84]	; (80029b4 <TIM2_IRQHandler+0x70>)
 8002960:	f000 fb2c 	bl	8002fbc <HAL_GPIO_WritePin>
//  delay_us(100);
  for (int i=0; i<50; i++){
 8002964:	2300      	movs	r3, #0
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	e003      	b.n	8002972 <TIM2_IRQHandler+0x2e>
	  __NOP();
 800296a:	bf00      	nop
  for (int i=0; i<50; i++){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3301      	adds	r3, #1
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b31      	cmp	r3, #49	; 0x31
 8002976:	ddf8      	ble.n	800296a <TIM2_IRQHandler+0x26>
  }

//  delay_us(1);
  if (dir_M2 > 0){
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <TIM2_IRQHandler+0x6c>)
 800297a:	f993 3000 	ldrsb.w	r3, [r3]
 800297e:	2b00      	cmp	r3, #0
 8002980:	dd05      	ble.n	800298e <TIM2_IRQHandler+0x4a>
	  steps2--;
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <TIM2_IRQHandler+0x74>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3b01      	subs	r3, #1
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <TIM2_IRQHandler+0x74>)
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e004      	b.n	8002998 <TIM2_IRQHandler+0x54>
  }
  else{
	  steps2++;
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <TIM2_IRQHandler+0x74>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <TIM2_IRQHandler+0x74>)
 8002996:	6013      	str	r3, [r2, #0]
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2110      	movs	r1, #16
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <TIM2_IRQHandler+0x70>)
 800299e:	f000 fb0d 	bl	8002fbc <HAL_GPIO_WritePin>
 80029a2:	e000      	b.n	80029a6 <TIM2_IRQHandler+0x62>
    return;
 80029a4:	bf00      	nop

//  delay_us(300);

  /* USER CODE END TIM2_IRQn 1 */
}
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000308 	.word	0x20000308
 80029b0:	200001ac 	.word	0x200001ac
 80029b4:	40010800 	.word	0x40010800
 80029b8:	2000015c 	.word	0x2000015c

080029bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM3_IRQHandler+0x10>)
 80029c2:	f001 ffab 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000270 	.word	0x20000270

080029d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029f4:	4c0a      	ldr	r4, [pc, #40]	; (8002a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a02:	f7ff ffe5 	bl	80029d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f002 fae3 	bl	8004fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0a:	f7ff f9dd 	bl	8001dc8 <main>
  bx lr
 8002a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a14:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002a18:	080057a0 	.word	0x080057a0
  ldr r2, =_sbss
 8002a1c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8002a20:	20000354 	.word	0x20000354

08002a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <ADC1_2_IRQHandler>
	...

08002a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_Init+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_Init+0x28>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f923 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f000 f808 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7ff fe3c 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_InitTick+0x54>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_InitTick+0x58>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f93b 	bl	8002cee <HAL_SYSTICK_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00e      	b.n	8002aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d80a      	bhi.n	8002a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f000 f903 	bl	8002c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <HAL_InitTick+0x5c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200000b0 	.word	0x200000b0
 8002aac:	200000b8 	.word	0x200000b8
 8002ab0:	200000b4 	.word	0x200000b4

08002ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_IncTick+0x1c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_IncTick+0x20>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_IncTick+0x20>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	200000b8 	.word	0x200000b8
 8002ad4:	20000350 	.word	0x20000350

08002ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_GetTick+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	20000350 	.word	0x20000350

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4906      	ldr	r1, [pc, #24]	; (8002b84 <__NVIC_EnableIRQ+0x34>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c50:	d301      	bcc.n	8002c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <SysTick_Config+0x40>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5e:	210f      	movs	r1, #15
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f7ff ff90 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <SysTick_Config+0x40>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SysTick_Config+0x40>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff2d 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cac:	f7ff ff42 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f7ff ff90 	bl	8002bdc <NVIC_EncodePriority>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff5f 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff35 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffa2 	bl	8002c40 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b08b      	sub	sp, #44	; 0x2c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1a:	e127      	b.n	8002f6c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 8116 	bne.w	8002f66 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b12      	cmp	r3, #18
 8002d40:	d034      	beq.n	8002dac <HAL_GPIO_Init+0xa4>
 8002d42:	2b12      	cmp	r3, #18
 8002d44:	d80d      	bhi.n	8002d62 <HAL_GPIO_Init+0x5a>
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d02b      	beq.n	8002da2 <HAL_GPIO_Init+0x9a>
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d804      	bhi.n	8002d58 <HAL_GPIO_Init+0x50>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d031      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d01c      	beq.n	8002d90 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d56:	e048      	b.n	8002dea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d043      	beq.n	8002de4 <HAL_GPIO_Init+0xdc>
 8002d5c:	2b11      	cmp	r3, #17
 8002d5e:	d01b      	beq.n	8002d98 <HAL_GPIO_Init+0x90>
          break;
 8002d60:	e043      	b.n	8002dea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d62:	4a89      	ldr	r2, [pc, #548]	; (8002f88 <HAL_GPIO_Init+0x280>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d026      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
 8002d68:	4a87      	ldr	r2, [pc, #540]	; (8002f88 <HAL_GPIO_Init+0x280>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d806      	bhi.n	8002d7c <HAL_GPIO_Init+0x74>
 8002d6e:	4a87      	ldr	r2, [pc, #540]	; (8002f8c <HAL_GPIO_Init+0x284>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d020      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
 8002d74:	4a86      	ldr	r2, [pc, #536]	; (8002f90 <HAL_GPIO_Init+0x288>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01d      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
          break;
 8002d7a:	e036      	b.n	8002dea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d7c:	4a85      	ldr	r2, [pc, #532]	; (8002f94 <HAL_GPIO_Init+0x28c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d019      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
 8002d82:	4a85      	ldr	r2, [pc, #532]	; (8002f98 <HAL_GPIO_Init+0x290>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d016      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
 8002d88:	4a84      	ldr	r2, [pc, #528]	; (8002f9c <HAL_GPIO_Init+0x294>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0xae>
          break;
 8002d8e:	e02c      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	623b      	str	r3, [r7, #32]
          break;
 8002d96:	e028      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e023      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	3308      	adds	r3, #8
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e01e      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	330c      	adds	r3, #12
 8002db2:	623b      	str	r3, [r7, #32]
          break;
 8002db4:	e019      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	623b      	str	r3, [r7, #32]
          break;
 8002dc2:	e012      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dcc:	2308      	movs	r3, #8
 8002dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	611a      	str	r2, [r3, #16]
          break;
 8002dd6:	e008      	b.n	8002dea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	615a      	str	r2, [r3, #20]
          break;
 8002de2:	e002      	b.n	8002dea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
          break;
 8002de8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2bff      	cmp	r3, #255	; 0xff
 8002dee:	d801      	bhi.n	8002df4 <HAL_GPIO_Init+0xec>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	e001      	b.n	8002df8 <HAL_GPIO_Init+0xf0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2bff      	cmp	r3, #255	; 0xff
 8002dfe:	d802      	bhi.n	8002e06 <HAL_GPIO_Init+0xfe>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x104>
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	3b08      	subs	r3, #8
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	210f      	movs	r1, #15
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	6a39      	ldr	r1, [r7, #32]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	431a      	orrs	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8096 	beq.w	8002f66 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e3a:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_GPIO_Init+0x298>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_GPIO_Init+0x298>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6193      	str	r3, [r2, #24]
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_GPIO_Init+0x298>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e52:	4a54      	ldr	r2, [pc, #336]	; (8002fa4 <HAL_GPIO_Init+0x29c>)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4b      	ldr	r2, [pc, #300]	; (8002fa8 <HAL_GPIO_Init+0x2a0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x19e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <HAL_GPIO_Init+0x2a4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x19a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a49      	ldr	r2, [pc, #292]	; (8002fb0 <HAL_GPIO_Init+0x2a8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x196>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a48      	ldr	r2, [pc, #288]	; (8002fb4 <HAL_GPIO_Init+0x2ac>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x192>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x1a0>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x1a0>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x1a0>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x1a0>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	f002 0203 	and.w	r2, r2, #3
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eb8:	493a      	ldr	r1, [pc, #232]	; (8002fa4 <HAL_GPIO_Init+0x29c>)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ed2:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4938      	ldr	r1, [pc, #224]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
 8002ede:	e006      	b.n	8002eee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	4933      	ldr	r1, [pc, #204]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	492e      	ldr	r1, [pc, #184]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e006      	b.n	8002f16 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	4929      	ldr	r1, [pc, #164]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4924      	ldr	r1, [pc, #144]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
 8002f2e:	e006      	b.n	8002f3e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	491f      	ldr	r1, [pc, #124]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	491a      	ldr	r1, [pc, #104]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60cb      	str	r3, [r1, #12]
 8002f56:	e006      	b.n	8002f66 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	4915      	ldr	r1, [pc, #84]	; (8002fb8 <HAL_GPIO_Init+0x2b0>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	3301      	adds	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f47f aed0 	bne.w	8002d1c <HAL_GPIO_Init+0x14>
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	372c      	adds	r7, #44	; 0x2c
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	10210000 	.word	0x10210000
 8002f8c:	10110000 	.word	0x10110000
 8002f90:	10120000 	.word	0x10120000
 8002f94:	10310000 	.word	0x10310000
 8002f98:	10320000 	.word	0x10320000
 8002f9c:	10220000 	.word	0x10220000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	40010c00 	.word	0x40010c00
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	40011400 	.word	0x40011400
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fd8:	e003      	b.n	8002fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e11f      	b.n	800323e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fb86 	bl	8002724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	; 0x24
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003050:	f001 fb90 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a7b      	ldr	r2, [pc, #492]	; (8003248 <HAL_I2C_Init+0x25c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d807      	bhi.n	8003070 <HAL_I2C_Init+0x84>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a7a      	ldr	r2, [pc, #488]	; (800324c <HAL_I2C_Init+0x260>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e006      	b.n	800307e <HAL_I2C_Init+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a77      	ldr	r2, [pc, #476]	; (8003250 <HAL_I2C_Init+0x264>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0db      	b.n	800323e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a72      	ldr	r2, [pc, #456]	; (8003254 <HAL_I2C_Init+0x268>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a64      	ldr	r2, [pc, #400]	; (8003248 <HAL_I2C_Init+0x25c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d802      	bhi.n	80030c0 <HAL_I2C_Init+0xd4>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3301      	adds	r3, #1
 80030be:	e009      	b.n	80030d4 <HAL_I2C_Init+0xe8>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	4a63      	ldr	r2, [pc, #396]	; (8003258 <HAL_I2C_Init+0x26c>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	3301      	adds	r3, #1
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4956      	ldr	r1, [pc, #344]	; (8003248 <HAL_I2C_Init+0x25c>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d80d      	bhi.n	8003110 <HAL_I2C_Init+0x124>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e59      	subs	r1, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	2b04      	cmp	r3, #4
 800310a:	bf38      	it	cc
 800310c:	2304      	movcc	r3, #4
 800310e:	e04f      	b.n	80031b0 <HAL_I2C_Init+0x1c4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d111      	bne.n	800313c <HAL_I2C_Init+0x150>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e012      	b.n	8003162 <HAL_I2C_Init+0x176>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	0099      	lsls	r1, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x17e>
 8003166:	2301      	movs	r3, #1
 8003168:	e022      	b.n	80031b0 <HAL_I2C_Init+0x1c4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10e      	bne.n	8003190 <HAL_I2C_Init+0x1a4>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e58      	subs	r0, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	440b      	add	r3, r1
 8003180:	fbb0 f3f3 	udiv	r3, r0, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	e00f      	b.n	80031b0 <HAL_I2C_Init+0x1c4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e58      	subs	r0, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	0099      	lsls	r1, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6911      	ldr	r1, [r2, #16]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	000186a0 	.word	0x000186a0
 800324c:	001e847f 	.word	0x001e847f
 8003250:	003d08ff 	.word	0x003d08ff
 8003254:	431bde83 	.word	0x431bde83
 8003258:	10624dd3 	.word	0x10624dd3

0800325c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7ff fc2f 	bl	8002ad8 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b20      	cmp	r3, #32
 8003286:	f040 80d9 	bne.w	800343c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2319      	movs	r3, #25
 8003290:	2201      	movs	r2, #1
 8003292:	496d      	ldr	r1, [pc, #436]	; (8003448 <HAL_I2C_Mem_Write+0x1ec>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fcbb 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0cc      	b.n	800343e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Mem_Write+0x56>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0c5      	b.n	800343e <HAL_I2C_Mem_Write+0x1e2>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d007      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2221      	movs	r2, #33	; 0x21
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a4d      	ldr	r2, [pc, #308]	; (800344c <HAL_I2C_Mem_Write+0x1f0>)
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331a:	88f8      	ldrh	r0, [r7, #6]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4603      	mov	r3, r0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 faf2 	bl	8003914 <I2C_RequestMemoryWrite>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d052      	beq.n	80033dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e081      	b.n	800343e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fd3c 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b04      	cmp	r3, #4
 8003350:	d107      	bne.n	8003362 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06b      	b.n	800343e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11b      	bne.n	80033dc <HAL_I2C_Mem_Write+0x180>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d017      	beq.n	80033dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1aa      	bne.n	800333a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fd28 	bl	8003e3e <I2C_WaitOnBTFFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d107      	bne.n	800340c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e016      	b.n	800343e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	00100002 	.word	0x00100002
 800344c:	ffff0000 	.word	0xffff0000

08003450 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08c      	sub	sp, #48	; 0x30
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4603      	mov	r3, r0
 8003460:	817b      	strh	r3, [r7, #10]
 8003462:	460b      	mov	r3, r1
 8003464:	813b      	strh	r3, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800346e:	f7ff fb33 	bl	8002ad8 <HAL_GetTick>
 8003472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	f040 823d 	bne.w	80038fc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2319      	movs	r3, #25
 8003488:	2201      	movs	r2, #1
 800348a:	4981      	ldr	r1, [pc, #516]	; (8003690 <HAL_I2C_Mem_Read+0x240>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fbbf 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003498:	2302      	movs	r3, #2
 800349a:	e230      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_I2C_Mem_Read+0x5a>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e229      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d007      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2222      	movs	r2, #34	; 0x22
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2240      	movs	r2, #64	; 0x40
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a61      	ldr	r2, [pc, #388]	; (8003694 <HAL_I2C_Mem_Read+0x244>)
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003512:	88f8      	ldrh	r0, [r7, #6]
 8003514:	893a      	ldrh	r2, [r7, #8]
 8003516:	8979      	ldrh	r1, [r7, #10]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	4603      	mov	r3, r0
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fa8c 	bl	8003a40 <I2C_RequestMemoryRead>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1e5      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d113      	bne.n	8003562 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e1b9      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	2b01      	cmp	r3, #1
 8003568:	d11d      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035a2:	b662      	cpsie	i
 80035a4:	e197      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d11d      	bne.n	80035ea <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035e6:	b662      	cpsie	i
 80035e8:	e175      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003610:	e161      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	2b03      	cmp	r3, #3
 8003618:	f200 811a 	bhi.w	8003850 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b01      	cmp	r3, #1
 8003622:	d123      	bne.n	800366c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fc49 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e162      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
 800366a:	e134      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b02      	cmp	r3, #2
 8003672:	d150      	bne.n	8003716 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2200      	movs	r2, #0
 800367c:	4906      	ldr	r1, [pc, #24]	; (8003698 <HAL_I2C_Mem_Read+0x248>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fac6 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e137      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
 800368e:	bf00      	nop
 8003690:	00100002 	.word	0x00100002
 8003694:	ffff0000 	.word	0xffff0000
 8003698:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800369c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036e0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003714:	e0df      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2200      	movs	r2, #0
 800371e:	497a      	ldr	r1, [pc, #488]	; (8003908 <HAL_I2C_Mem_Read+0x4b8>)
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fa75 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0e6      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003740:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003774:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_I2C_Mem_Read+0x4bc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	4a65      	ldr	r2, [pc, #404]	; (8003910 <HAL_I2C_Mem_Read+0x4c0>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	0a1a      	lsrs	r2, r3, #8
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00da      	lsls	r2, r3, #3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	3b01      	subs	r3, #1
 8003792:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d117      	bne.n	80037ca <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037bc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e099      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d1da      	bne.n	800378e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
 800381a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800384e:	e042      	b.n	80038d6 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fb33 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e04c      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d118      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f47f ae99 	bne.w	8003612 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3728      	adds	r7, #40	; 0x28
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	00010004 	.word	0x00010004
 800390c:	200000b0 	.word	0x200000b0
 8003910:	14f8b589 	.word	0x14f8b589

08003914 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4603      	mov	r3, r0
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	460b      	mov	r3, r1
 8003928:	813b      	strh	r3, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	2200      	movs	r2, #0
 8003946:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f960 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003964:	d103      	bne.n	800396e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e05f      	b.n	8003a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003980:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	492d      	ldr	r1, [pc, #180]	; (8003a3c <I2C_RequestMemoryWrite+0x128>)
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f998 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e04c      	b.n	8003a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	6a39      	ldr	r1, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa02 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d107      	bne.n	80039d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e02b      	b.n	8003a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]
 80039ea:	e021      	b.n	8003a30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039ec:	893b      	ldrh	r3, [r7, #8]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	6a39      	ldr	r1, [r7, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f9dc 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e005      	b.n	8003a32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a26:	893b      	ldrh	r3, [r7, #8]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	00010002 	.word	0x00010002

08003a40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	817b      	strh	r3, [r7, #10]
 8003a52:	460b      	mov	r3, r1
 8003a54:	813b      	strh	r3, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8c2 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	d103      	bne.n	8003aaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0aa      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	4952      	ldr	r1, [pc, #328]	; (8003c0c <I2C_RequestMemoryRead+0x1cc>)
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f8fa 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e097      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aec:	6a39      	ldr	r1, [r7, #32]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f964 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d107      	bne.n	8003b12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e076      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1c:	893b      	ldrh	r3, [r7, #8]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]
 8003b26:	e021      	b.n	8003b6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b28:	893b      	ldrh	r3, [r7, #8]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f93e 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e050      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b62:	893b      	ldrh	r3, [r7, #8]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6e:	6a39      	ldr	r1, [r7, #32]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f923 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d107      	bne.n	8003b94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e035      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f82b 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d103      	bne.n	8003bd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e013      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bdc:	897b      	ldrh	r3, [r7, #10]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	4906      	ldr	r1, [pc, #24]	; (8003c0c <I2C_RequestMemoryRead+0x1cc>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f863 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	00010002 	.word	0x00010002

08003c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c20:	e025      	b.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */

	  if (Timeout != HAL_MAX_DELAY)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d021      	beq.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe ff55 	bl	8002ad8 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e023      	b.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10d      	bne.n	8003c94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	e00c      	b.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d0b6      	beq.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ccc:	e051      	b.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d123      	bne.n	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f043 0204 	orr.w	r2, r3, #4
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e046      	b.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d021      	beq.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe fed3 	bl	8002ad8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e020      	b.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10c      	bne.n	8003d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e00b      	b.n	8003dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d18d      	bne.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc8:	e02d      	b.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f8ce 	bl	8003f6c <I2C_IsAcknowledgeFailed>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e02d      	b.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d021      	beq.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fe79 	bl	8002ad8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e007      	b.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d1ca      	bne.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e4a:	e02d      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f88d 	bl	8003f6c <I2C_IsAcknowledgeFailed>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e02d      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d021      	beq.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fe fe38 	bl	8002ad8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e007      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d1ca      	bne.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ecc:	e042      	b.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d119      	bne.n	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0210 	mvn.w	r2, #16
 8003ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e029      	b.n	8003f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */

    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fe fde2 	bl	8002ad8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d116      	bne.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d1b5      	bne.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d11b      	bne.n	8003fbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e26c      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8087 	beq.w	80040f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe8:	4b92      	ldr	r3, [pc, #584]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d00c      	beq.n	800400e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ff4:	4b8f      	ldr	r3, [pc, #572]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d112      	bne.n	8004026 <HAL_RCC_OscConfig+0x5e>
 8004000:	4b8c      	ldr	r3, [pc, #560]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d10b      	bne.n	8004026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400e:	4b89      	ldr	r3, [pc, #548]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d06c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x12c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d168      	bne.n	80040f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e246      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x76>
 8004030:	4b80      	ldr	r3, [pc, #512]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a7f      	ldr	r2, [pc, #508]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e02e      	b.n	800409c <HAL_RCC_OscConfig+0xd4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x98>
 8004046:	4b7b      	ldr	r3, [pc, #492]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800404c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b78      	ldr	r3, [pc, #480]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a77      	ldr	r2, [pc, #476]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e01d      	b.n	800409c <HAL_RCC_OscConfig+0xd4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0xbc>
 800406a:	4b72      	ldr	r3, [pc, #456]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a71      	ldr	r2, [pc, #452]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b6f      	ldr	r3, [pc, #444]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6e      	ldr	r2, [pc, #440]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0xd4>
 8004084:	4b6b      	ldr	r3, [pc, #428]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a6a      	ldr	r2, [pc, #424]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b68      	ldr	r3, [pc, #416]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a67      	ldr	r2, [pc, #412]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fd18 	bl	8002ad8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fe fd14 	bl	8002ad8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e1fa      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b5d      	ldr	r3, [pc, #372]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0xe4>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fd04 	bl	8002ad8 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fe fd00 	bl	8002ad8 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1e6      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x10c>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d063      	beq.n	80041ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004102:	4b4c      	ldr	r3, [pc, #304]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800410e:	4b49      	ldr	r3, [pc, #292]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b08      	cmp	r3, #8
 8004118:	d11c      	bne.n	8004154 <HAL_RCC_OscConfig+0x18c>
 800411a:	4b46      	ldr	r3, [pc, #280]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d116      	bne.n	8004154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	4b43      	ldr	r3, [pc, #268]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x176>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1ba      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4939      	ldr	r1, [pc, #228]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	e03a      	b.n	80041ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800415c:	4b36      	ldr	r3, [pc, #216]	; (8004238 <HAL_RCC_OscConfig+0x270>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fe fcb9 	bl	8002ad8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7fe fcb5 	bl	8002ad8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e19b      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4927      	ldr	r1, [pc, #156]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	e015      	b.n	80041ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_RCC_OscConfig+0x270>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fe fc98 	bl	8002ad8 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fe fc94 	bl	8002ad8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e17a      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d03a      	beq.n	800424c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d019      	beq.n	8004212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041de:	4b17      	ldr	r3, [pc, #92]	; (800423c <HAL_RCC_OscConfig+0x274>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fe fc78 	bl	8002ad8 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fe fc74 	bl	8002ad8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e15a      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_RCC_OscConfig+0x26c>)
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800420a:	2001      	movs	r0, #1
 800420c:	f000 fac6 	bl	800479c <RCC_Delay>
 8004210:	e01c      	b.n	800424c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_OscConfig+0x274>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004218:	f7fe fc5e 	bl	8002ad8 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421e:	e00f      	b.n	8004240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004220:	f7fe fc5a 	bl	8002ad8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d908      	bls.n	8004240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e140      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	42420000 	.word	0x42420000
 800423c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b9e      	ldr	r3, [pc, #632]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e9      	bne.n	8004220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a6 	beq.w	80043a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b97      	ldr	r3, [pc, #604]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	4b94      	ldr	r3, [pc, #592]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4a93      	ldr	r2, [pc, #588]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	61d3      	str	r3, [r2, #28]
 8004276:	4b91      	ldr	r3, [pc, #580]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004286:	4b8e      	ldr	r3, [pc, #568]	; (80044c0 <HAL_RCC_OscConfig+0x4f8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d118      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004292:	4b8b      	ldr	r3, [pc, #556]	; (80044c0 <HAL_RCC_OscConfig+0x4f8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a8a      	ldr	r2, [pc, #552]	; (80044c0 <HAL_RCC_OscConfig+0x4f8>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429e:	f7fe fc1b 	bl	8002ad8 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a6:	f7fe fc17 	bl	8002ad8 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	; 0x64
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0fd      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <HAL_RCC_OscConfig+0x4f8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x312>
 80042cc:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a7a      	ldr	r2, [pc, #488]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6213      	str	r3, [r2, #32]
 80042d8:	e02d      	b.n	8004336 <HAL_RCC_OscConfig+0x36e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x334>
 80042e2:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4a75      	ldr	r2, [pc, #468]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	6213      	str	r3, [r2, #32]
 80042ee:	4b73      	ldr	r3, [pc, #460]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	4a72      	ldr	r2, [pc, #456]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	6213      	str	r3, [r2, #32]
 80042fa:	e01c      	b.n	8004336 <HAL_RCC_OscConfig+0x36e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b05      	cmp	r3, #5
 8004302:	d10c      	bne.n	800431e <HAL_RCC_OscConfig+0x356>
 8004304:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	4a6c      	ldr	r2, [pc, #432]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	6213      	str	r3, [r2, #32]
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4a69      	ldr	r2, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6213      	str	r3, [r2, #32]
 800431c:	e00b      	b.n	8004336 <HAL_RCC_OscConfig+0x36e>
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4a66      	ldr	r2, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6213      	str	r3, [r2, #32]
 800432a:	4b64      	ldr	r3, [pc, #400]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	4a63      	ldr	r2, [pc, #396]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d015      	beq.n	800436a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fe fbcb 	bl	8002ad8 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	e00a      	b.n	800435c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fe fbc7 	bl	8002ad8 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0ab      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435c:	4b57      	ldr	r3, [pc, #348]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ee      	beq.n	8004346 <HAL_RCC_OscConfig+0x37e>
 8004368:	e014      	b.n	8004394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436a:	f7fe fbb5 	bl	8002ad8 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fe fbb1 	bl	8002ad8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e095      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004388:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ee      	bne.n	8004372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d105      	bne.n	80043a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439a:	4b48      	ldr	r3, [pc, #288]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4a47      	ldr	r2, [pc, #284]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8081 	beq.w	80044b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b0:	4b42      	ldr	r3, [pc, #264]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d061      	beq.n	8004480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d146      	bne.n	8004452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c4:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCC_OscConfig+0x4fc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe fb85 	bl	8002ad8 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fe fb81 	bl	8002ad8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e067      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d108      	bne.n	800440c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043fa:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	492d      	ldr	r1, [pc, #180]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a19      	ldr	r1, [r3, #32]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	430b      	orrs	r3, r1
 800441e:	4927      	ldr	r1, [pc, #156]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <HAL_RCC_OscConfig+0x4fc>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fe fb55 	bl	8002ad8 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fe fb51 	bl	8002ad8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e037      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x46a>
 8004450:	e02f      	b.n	80044b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <HAL_RCC_OscConfig+0x4fc>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fb3e 	bl	8002ad8 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe fb3a 	bl	8002ad8 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e020      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x498>
 800447e:	e018      	b.n	80044b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e013      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_OscConfig+0x4f4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	429a      	cmp	r2, r3
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
 80044c4:	42420060 	.word	0x42420060

080044c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0d0      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d910      	bls.n	800450c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b67      	ldr	r3, [pc, #412]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 0207 	bic.w	r2, r3, #7
 80044f2:	4965      	ldr	r1, [pc, #404]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b63      	ldr	r3, [pc, #396]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0b8      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a58      	ldr	r2, [pc, #352]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800452e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800453c:	4b53      	ldr	r3, [pc, #332]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a52      	ldr	r2, [pc, #328]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4b50      	ldr	r3, [pc, #320]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	494d      	ldr	r1, [pc, #308]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d040      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b47      	ldr	r3, [pc, #284]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d115      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e07f      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004586:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e073      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	4b3d      	ldr	r3, [pc, #244]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e06b      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4936      	ldr	r1, [pc, #216]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b8:	f7fe fa8e 	bl	8002ad8 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c0:	f7fe fa8a 	bl	8002ad8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e053      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	4b2d      	ldr	r3, [pc, #180]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 020c 	and.w	r2, r3, #12
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d1eb      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d210      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 0207 	bic.w	r2, r3, #7
 80045fe:	4922      	ldr	r1, [pc, #136]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e032      	b.n	800467e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4916      	ldr	r1, [pc, #88]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	490e      	ldr	r1, [pc, #56]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004656:	f000 f821 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800465a:	4601      	mov	r1, r0
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	5cd3      	ldrb	r3, [r2, r3]
 800466a:	fa21 f303 	lsr.w	r3, r1, r3
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <HAL_RCC_ClockConfig+0x1cc>)
 8004670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCC_ClockConfig+0x1d0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f9ec 	bl	8002a54 <HAL_InitTick>

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40022000 	.word	0x40022000
 800468c:	40021000 	.word	0x40021000
 8004690:	08005734 	.word	0x08005734
 8004694:	200000b0 	.word	0x200000b0
 8004698:	200000b4 	.word	0x200000b4

0800469c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b490      	push	{r4, r7}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046a2:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_RCC_GetSysClockFreq+0xb0>)
 80046a4:	1d3c      	adds	r4, r7, #4
 80046a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x40>
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x46>
 80046da:	e02d      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046de:	623b      	str	r3, [r7, #32]
      break;
 80046e0:	e02d      	b.n	800473e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	0c9b      	lsrs	r3, r3, #18
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046ee:	4413      	add	r3, r2
 80046f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	0c5b      	lsrs	r3, r3, #17
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800470e:	4413      	add	r3, r2
 8004710:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004714:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800471a:	fb02 f203 	mul.w	r2, r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	e004      	b.n	8004732 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4a0c      	ldr	r2, [pc, #48]	; (800475c <HAL_RCC_GetSysClockFreq+0xc0>)
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	623b      	str	r3, [r7, #32]
      break;
 8004736:	e002      	b.n	800473e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800473a:	623b      	str	r3, [r7, #32]
      break;
 800473c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800473e:	6a3b      	ldr	r3, [r7, #32]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3728      	adds	r7, #40	; 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bc90      	pop	{r4, r7}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	08005720 	.word	0x08005720
 8004750:	08005730 	.word	0x08005730
 8004754:	40021000 	.word	0x40021000
 8004758:	007a1200 	.word	0x007a1200
 800475c:	003d0900 	.word	0x003d0900

08004760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004764:	4b02      	ldr	r3, [pc, #8]	; (8004770 <HAL_RCC_GetHCLKFreq+0x10>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	200000b0 	.word	0x200000b0

08004774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004778:	f7ff fff2 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 800477c:	4601      	mov	r1, r0
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	08005744 	.word	0x08005744

0800479c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <RCC_Delay+0x34>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <RCC_Delay+0x38>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047b8:	bf00      	nop
  }
  while (Delay --);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f9      	bne.n	80047b8 <RCC_Delay+0x1c>
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	200000b0 	.word	0x200000b0
 80047d4:	10624dd3 	.word	0x10624dd3

080047d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e041      	b.n	800486e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd ffe0 	bl	80027c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fa6c 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d001      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e03a      	b.n	8004906 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_TIM_Base_Start_IT+0x98>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x58>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d009      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x58>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_TIM_Base_Start_IT+0x9c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x58>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a13      	ldr	r2, [pc, #76]	; (8004918 <HAL_TIM_Base_Start_IT+0xa0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d111      	bne.n	80048f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d010      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	e007      	b.n	8004904 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800

0800491c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0202 	mvn.w	r2, #2
 8004948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9ad 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9a0 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9af 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0204 	mvn.w	r2, #4
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f983 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f976 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f985 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f959 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f94c 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f95b 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0210 	mvn.w	r2, #16
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f92f 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f922 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f931 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
  {

	  if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0201 	mvn.w	r2, #1
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8fd 	bl	8004c9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa73 	bl	8004fb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8f5 	bl	8004ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d10e      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0220 	mvn.w	r2, #32
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa3e 	bl	8004fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0a6      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x166>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d067      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0x120>
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d80b      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x6c>
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d073      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0x140>
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d802      	bhi.n	8004b8e <HAL_TIM_ConfigClockSource+0x62>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d06f      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b8c:	e078      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d06c      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0x140>
 8004b92:	2b30      	cmp	r3, #48	; 0x30
 8004b94:	d06a      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004b96:	e073      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b98:	2b70      	cmp	r3, #112	; 0x70
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0x8c>
 8004b9c:	2b70      	cmp	r3, #112	; 0x70
 8004b9e:	d804      	bhi.n	8004baa <HAL_TIM_ConfigClockSource+0x7e>
 8004ba0:	2b50      	cmp	r3, #80	; 0x50
 8004ba2:	d033      	beq.n	8004c0c <HAL_TIM_ConfigClockSource+0xe0>
 8004ba4:	2b60      	cmp	r3, #96	; 0x60
 8004ba6:	d041      	beq.n	8004c2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ba8:	e06a      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bae:	d066      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x152>
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d017      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004bb6:	e063      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f000 f96d 	bl	8004ea6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	609a      	str	r2, [r3, #8]
      break;
 8004be4:	e04c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f000 f956 	bl	8004ea6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c08:	609a      	str	r2, [r3, #8]
      break;
 8004c0a:	e039      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f000 f8cd 	bl	8004db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2150      	movs	r1, #80	; 0x50
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f924 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004c2a:	e029      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f000 f8eb 	bl	8004e14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2160      	movs	r1, #96	; 0x60
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f914 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004c4a:	e019      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f000 f8ad 	bl	8004db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2140      	movs	r1, #64	; 0x40
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f904 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004c6a:	e009      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 f8fb 	bl	8004e72 <TIM_ITRx_SetConfig>
        break;
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a29      	ldr	r2, [pc, #164]	; (8004dac <TIM_Base_SetConfig+0xb8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_Base_SetConfig+0x30>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d007      	beq.n	8004d24 <TIM_Base_SetConfig+0x30>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a26      	ldr	r2, [pc, #152]	; (8004db0 <TIM_Base_SetConfig+0xbc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0x30>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <TIM_Base_SetConfig+0xc0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <TIM_Base_SetConfig+0xb8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0x62>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <TIM_Base_SetConfig+0xbc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0x62>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <TIM_Base_SetConfig+0xc0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a07      	ldr	r2, [pc, #28]	; (8004dac <TIM_Base_SetConfig+0xb8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800

08004db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 030a 	bic.w	r3, r3, #10
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f023 0210 	bic.w	r2, r3, #16
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	031b      	lsls	r3, r3, #12
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f043 0307 	orr.w	r3, r3, #7
 8004e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	021a      	lsls	r2, r3, #8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	609a      	str	r2, [r3, #8]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e046      	b.n	8004f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a16      	ldr	r2, [pc, #88]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d009      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10c      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800

08004fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <__errno>:
 8004fc4:	4b01      	ldr	r3, [pc, #4]	; (8004fcc <__errno+0x8>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200000bc 	.word	0x200000bc

08004fd0 <__libc_init_array>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	4e0c      	ldr	r6, [pc, #48]	; (8005008 <__libc_init_array+0x38>)
 8004fd6:	4c0d      	ldr	r4, [pc, #52]	; (800500c <__libc_init_array+0x3c>)
 8004fd8:	1ba4      	subs	r4, r4, r6
 8004fda:	10a4      	asrs	r4, r4, #2
 8004fdc:	42a5      	cmp	r5, r4
 8004fde:	d109      	bne.n	8004ff4 <__libc_init_array+0x24>
 8004fe0:	f000 fb92 	bl	8005708 <_init>
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	4e0a      	ldr	r6, [pc, #40]	; (8005010 <__libc_init_array+0x40>)
 8004fe8:	4c0a      	ldr	r4, [pc, #40]	; (8005014 <__libc_init_array+0x44>)
 8004fea:	1ba4      	subs	r4, r4, r6
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	42a5      	cmp	r5, r4
 8004ff0:	d105      	bne.n	8004ffe <__libc_init_array+0x2e>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff8:	4798      	blx	r3
 8004ffa:	3501      	adds	r5, #1
 8004ffc:	e7ee      	b.n	8004fdc <__libc_init_array+0xc>
 8004ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005002:	4798      	blx	r3
 8005004:	3501      	adds	r5, #1
 8005006:	e7f2      	b.n	8004fee <__libc_init_array+0x1e>
 8005008:	08005798 	.word	0x08005798
 800500c:	08005798 	.word	0x08005798
 8005010:	08005798 	.word	0x08005798
 8005014:	0800579c 	.word	0x0800579c

08005018 <memset>:
 8005018:	4603      	mov	r3, r0
 800501a:	4402      	add	r2, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	f803 1b01 	strb.w	r1, [r3], #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <atan>:
 8005028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	4bb6      	ldr	r3, [pc, #728]	; (8005308 <atan+0x2e0>)
 800502e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005032:	429e      	cmp	r6, r3
 8005034:	4604      	mov	r4, r0
 8005036:	460d      	mov	r5, r1
 8005038:	468b      	mov	fp, r1
 800503a:	dd17      	ble.n	800506c <atan+0x44>
 800503c:	4bb3      	ldr	r3, [pc, #716]	; (800530c <atan+0x2e4>)
 800503e:	429e      	cmp	r6, r3
 8005040:	dc01      	bgt.n	8005046 <atan+0x1e>
 8005042:	d109      	bne.n	8005058 <atan+0x30>
 8005044:	b140      	cbz	r0, 8005058 <atan+0x30>
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	f7fb f885 	bl	800015c <__adddf3>
 8005052:	4604      	mov	r4, r0
 8005054:	460d      	mov	r5, r1
 8005056:	e005      	b.n	8005064 <atan+0x3c>
 8005058:	f1bb 0f00 	cmp.w	fp, #0
 800505c:	4cac      	ldr	r4, [pc, #688]	; (8005310 <atan+0x2e8>)
 800505e:	f340 8121 	ble.w	80052a4 <atan+0x27c>
 8005062:	4dac      	ldr	r5, [pc, #688]	; (8005314 <atan+0x2ec>)
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506c:	4baa      	ldr	r3, [pc, #680]	; (8005318 <atan+0x2f0>)
 800506e:	429e      	cmp	r6, r3
 8005070:	dc11      	bgt.n	8005096 <atan+0x6e>
 8005072:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005076:	429e      	cmp	r6, r3
 8005078:	dc0a      	bgt.n	8005090 <atan+0x68>
 800507a:	a38b      	add	r3, pc, #556	; (adr r3, 80052a8 <atan+0x280>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb f86c 	bl	800015c <__adddf3>
 8005084:	2200      	movs	r2, #0
 8005086:	4ba5      	ldr	r3, [pc, #660]	; (800531c <atan+0x2f4>)
 8005088:	f7fb fcae 	bl	80009e8 <__aeabi_dcmpgt>
 800508c:	2800      	cmp	r0, #0
 800508e:	d1e9      	bne.n	8005064 <atan+0x3c>
 8005090:	f04f 3aff 	mov.w	sl, #4294967295
 8005094:	e027      	b.n	80050e6 <atan+0xbe>
 8005096:	f000 f951 	bl	800533c <fabs>
 800509a:	4ba1      	ldr	r3, [pc, #644]	; (8005320 <atan+0x2f8>)
 800509c:	4604      	mov	r4, r0
 800509e:	429e      	cmp	r6, r3
 80050a0:	460d      	mov	r5, r1
 80050a2:	f300 80b8 	bgt.w	8005216 <atan+0x1ee>
 80050a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80050aa:	429e      	cmp	r6, r3
 80050ac:	f300 809c 	bgt.w	80051e8 <atan+0x1c0>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	f7fb f852 	bl	800015c <__adddf3>
 80050b8:	2200      	movs	r2, #0
 80050ba:	4b98      	ldr	r3, [pc, #608]	; (800531c <atan+0x2f4>)
 80050bc:	f7fb f84c 	bl	8000158 <__aeabi_dsub>
 80050c0:	2200      	movs	r2, #0
 80050c2:	4606      	mov	r6, r0
 80050c4:	460f      	mov	r7, r1
 80050c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb f845 	bl	800015c <__adddf3>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4630      	mov	r0, r6
 80050d8:	4639      	mov	r1, r7
 80050da:	f7fb fb1f 	bl	800071c <__aeabi_ddiv>
 80050de:	f04f 0a00 	mov.w	sl, #0
 80050e2:	4604      	mov	r4, r0
 80050e4:	460d      	mov	r5, r1
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f7fb f9eb 	bl	80004c8 <__aeabi_dmul>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4680      	mov	r8, r0
 80050f8:	4689      	mov	r9, r1
 80050fa:	f7fb f9e5 	bl	80004c8 <__aeabi_dmul>
 80050fe:	a36c      	add	r3, pc, #432	; (adr r3, 80052b0 <atan+0x288>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	f7fb f9de 	bl	80004c8 <__aeabi_dmul>
 800510c:	a36a      	add	r3, pc, #424	; (adr r3, 80052b8 <atan+0x290>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f823 	bl	800015c <__adddf3>
 8005116:	4632      	mov	r2, r6
 8005118:	463b      	mov	r3, r7
 800511a:	f7fb f9d5 	bl	80004c8 <__aeabi_dmul>
 800511e:	a368      	add	r3, pc, #416	; (adr r3, 80052c0 <atan+0x298>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb f81a 	bl	800015c <__adddf3>
 8005128:	4632      	mov	r2, r6
 800512a:	463b      	mov	r3, r7
 800512c:	f7fb f9cc 	bl	80004c8 <__aeabi_dmul>
 8005130:	a365      	add	r3, pc, #404	; (adr r3, 80052c8 <atan+0x2a0>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f811 	bl	800015c <__adddf3>
 800513a:	4632      	mov	r2, r6
 800513c:	463b      	mov	r3, r7
 800513e:	f7fb f9c3 	bl	80004c8 <__aeabi_dmul>
 8005142:	a363      	add	r3, pc, #396	; (adr r3, 80052d0 <atan+0x2a8>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f808 	bl	800015c <__adddf3>
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	f7fb f9ba 	bl	80004c8 <__aeabi_dmul>
 8005154:	a360      	add	r3, pc, #384	; (adr r3, 80052d8 <atan+0x2b0>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fa ffff 	bl	800015c <__adddf3>
 800515e:	4642      	mov	r2, r8
 8005160:	464b      	mov	r3, r9
 8005162:	f7fb f9b1 	bl	80004c8 <__aeabi_dmul>
 8005166:	a35e      	add	r3, pc, #376	; (adr r3, 80052e0 <atan+0x2b8>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	4680      	mov	r8, r0
 800516e:	4689      	mov	r9, r1
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb f9a8 	bl	80004c8 <__aeabi_dmul>
 8005178:	a35b      	add	r3, pc, #364	; (adr r3, 80052e8 <atan+0x2c0>)
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fa ffeb 	bl	8000158 <__aeabi_dsub>
 8005182:	4632      	mov	r2, r6
 8005184:	463b      	mov	r3, r7
 8005186:	f7fb f99f 	bl	80004c8 <__aeabi_dmul>
 800518a:	a359      	add	r3, pc, #356	; (adr r3, 80052f0 <atan+0x2c8>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fa ffe2 	bl	8000158 <__aeabi_dsub>
 8005194:	4632      	mov	r2, r6
 8005196:	463b      	mov	r3, r7
 8005198:	f7fb f996 	bl	80004c8 <__aeabi_dmul>
 800519c:	a356      	add	r3, pc, #344	; (adr r3, 80052f8 <atan+0x2d0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fa ffd9 	bl	8000158 <__aeabi_dsub>
 80051a6:	4632      	mov	r2, r6
 80051a8:	463b      	mov	r3, r7
 80051aa:	f7fb f98d 	bl	80004c8 <__aeabi_dmul>
 80051ae:	a354      	add	r3, pc, #336	; (adr r3, 8005300 <atan+0x2d8>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fa ffd0 	bl	8000158 <__aeabi_dsub>
 80051b8:	4632      	mov	r2, r6
 80051ba:	463b      	mov	r3, r7
 80051bc:	f7fb f984 	bl	80004c8 <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4640      	mov	r0, r8
 80051c6:	4649      	mov	r1, r9
 80051c8:	f7fa ffc8 	bl	800015c <__adddf3>
 80051cc:	4622      	mov	r2, r4
 80051ce:	462b      	mov	r3, r5
 80051d0:	f7fb f97a 	bl	80004c8 <__aeabi_dmul>
 80051d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	d144      	bne.n	8005268 <atan+0x240>
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	f7fa ffb9 	bl	8000158 <__aeabi_dsub>
 80051e6:	e734      	b.n	8005052 <atan+0x2a>
 80051e8:	2200      	movs	r2, #0
 80051ea:	4b4c      	ldr	r3, [pc, #304]	; (800531c <atan+0x2f4>)
 80051ec:	f7fa ffb4 	bl	8000158 <__aeabi_dsub>
 80051f0:	2200      	movs	r2, #0
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	4b49      	ldr	r3, [pc, #292]	; (800531c <atan+0x2f4>)
 80051f8:	4620      	mov	r0, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fa ffae 	bl	800015c <__adddf3>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4630      	mov	r0, r6
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb fa88 	bl	800071c <__aeabi_ddiv>
 800520c:	f04f 0a01 	mov.w	sl, #1
 8005210:	4604      	mov	r4, r0
 8005212:	460d      	mov	r5, r1
 8005214:	e767      	b.n	80050e6 <atan+0xbe>
 8005216:	4b43      	ldr	r3, [pc, #268]	; (8005324 <atan+0x2fc>)
 8005218:	429e      	cmp	r6, r3
 800521a:	dc1a      	bgt.n	8005252 <atan+0x22a>
 800521c:	2200      	movs	r2, #0
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <atan+0x300>)
 8005220:	f7fa ff9a 	bl	8000158 <__aeabi_dsub>
 8005224:	2200      	movs	r2, #0
 8005226:	4606      	mov	r6, r0
 8005228:	460f      	mov	r7, r1
 800522a:	4b3f      	ldr	r3, [pc, #252]	; (8005328 <atan+0x300>)
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb f94a 	bl	80004c8 <__aeabi_dmul>
 8005234:	2200      	movs	r2, #0
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <atan+0x2f4>)
 8005238:	f7fa ff90 	bl	800015c <__adddf3>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb fa6a 	bl	800071c <__aeabi_ddiv>
 8005248:	f04f 0a02 	mov.w	sl, #2
 800524c:	4604      	mov	r4, r0
 800524e:	460d      	mov	r5, r1
 8005250:	e749      	b.n	80050e6 <atan+0xbe>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	2000      	movs	r0, #0
 8005258:	4934      	ldr	r1, [pc, #208]	; (800532c <atan+0x304>)
 800525a:	f7fb fa5f 	bl	800071c <__aeabi_ddiv>
 800525e:	f04f 0a03 	mov.w	sl, #3
 8005262:	4604      	mov	r4, r0
 8005264:	460d      	mov	r5, r1
 8005266:	e73e      	b.n	80050e6 <atan+0xbe>
 8005268:	4b31      	ldr	r3, [pc, #196]	; (8005330 <atan+0x308>)
 800526a:	4e32      	ldr	r6, [pc, #200]	; (8005334 <atan+0x30c>)
 800526c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005270:	4456      	add	r6, sl
 8005272:	449a      	add	sl, r3
 8005274:	e9da 2300 	ldrd	r2, r3, [sl]
 8005278:	f7fa ff6e 	bl	8000158 <__aeabi_dsub>
 800527c:	4622      	mov	r2, r4
 800527e:	462b      	mov	r3, r5
 8005280:	f7fa ff6a 	bl	8000158 <__aeabi_dsub>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	e9d6 0100 	ldrd	r0, r1, [r6]
 800528c:	f7fa ff64 	bl	8000158 <__aeabi_dsub>
 8005290:	f1bb 0f00 	cmp.w	fp, #0
 8005294:	4604      	mov	r4, r0
 8005296:	460d      	mov	r5, r1
 8005298:	f6bf aee4 	bge.w	8005064 <atan+0x3c>
 800529c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052a0:	461d      	mov	r5, r3
 80052a2:	e6df      	b.n	8005064 <atan+0x3c>
 80052a4:	4d24      	ldr	r5, [pc, #144]	; (8005338 <atan+0x310>)
 80052a6:	e6dd      	b.n	8005064 <atan+0x3c>
 80052a8:	8800759c 	.word	0x8800759c
 80052ac:	7e37e43c 	.word	0x7e37e43c
 80052b0:	e322da11 	.word	0xe322da11
 80052b4:	3f90ad3a 	.word	0x3f90ad3a
 80052b8:	24760deb 	.word	0x24760deb
 80052bc:	3fa97b4b 	.word	0x3fa97b4b
 80052c0:	a0d03d51 	.word	0xa0d03d51
 80052c4:	3fb10d66 	.word	0x3fb10d66
 80052c8:	c54c206e 	.word	0xc54c206e
 80052cc:	3fb745cd 	.word	0x3fb745cd
 80052d0:	920083ff 	.word	0x920083ff
 80052d4:	3fc24924 	.word	0x3fc24924
 80052d8:	5555550d 	.word	0x5555550d
 80052dc:	3fd55555 	.word	0x3fd55555
 80052e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80052e4:	bfa2b444 	.word	0xbfa2b444
 80052e8:	52defd9a 	.word	0x52defd9a
 80052ec:	3fadde2d 	.word	0x3fadde2d
 80052f0:	af749a6d 	.word	0xaf749a6d
 80052f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80052f8:	fe231671 	.word	0xfe231671
 80052fc:	3fbc71c6 	.word	0x3fbc71c6
 8005300:	9998ebc4 	.word	0x9998ebc4
 8005304:	3fc99999 	.word	0x3fc99999
 8005308:	440fffff 	.word	0x440fffff
 800530c:	7ff00000 	.word	0x7ff00000
 8005310:	54442d18 	.word	0x54442d18
 8005314:	3ff921fb 	.word	0x3ff921fb
 8005318:	3fdbffff 	.word	0x3fdbffff
 800531c:	3ff00000 	.word	0x3ff00000
 8005320:	3ff2ffff 	.word	0x3ff2ffff
 8005324:	40037fff 	.word	0x40037fff
 8005328:	3ff80000 	.word	0x3ff80000
 800532c:	bff00000 	.word	0xbff00000
 8005330:	08005770 	.word	0x08005770
 8005334:	08005750 	.word	0x08005750
 8005338:	bff921fb 	.word	0xbff921fb

0800533c <fabs>:
 800533c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005340:	4619      	mov	r1, r3
 8005342:	4770      	bx	lr

08005344 <atan2>:
 8005344:	f000 b854 	b.w	80053f0 <__ieee754_atan2>

08005348 <sqrt>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	b08b      	sub	sp, #44	; 0x2c
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1
 8005352:	f000 f92b 	bl	80055ac <__ieee754_sqrt>
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <sqrt+0xa0>)
 8005358:	4680      	mov	r8, r0
 800535a:	f993 a000 	ldrsb.w	sl, [r3]
 800535e:	4689      	mov	r9, r1
 8005360:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005364:	d02b      	beq.n	80053be <sqrt+0x76>
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	4620      	mov	r0, r4
 800536c:	4629      	mov	r1, r5
 800536e:	f7fb fb45 	bl	80009fc <__aeabi_dcmpun>
 8005372:	4683      	mov	fp, r0
 8005374:	bb18      	cbnz	r0, 80053be <sqrt+0x76>
 8005376:	2600      	movs	r6, #0
 8005378:	2700      	movs	r7, #0
 800537a:	4632      	mov	r2, r6
 800537c:	463b      	mov	r3, r7
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fb fb13 	bl	80009ac <__aeabi_dcmplt>
 8005386:	b1d0      	cbz	r0, 80053be <sqrt+0x76>
 8005388:	2301      	movs	r3, #1
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4b17      	ldr	r3, [pc, #92]	; (80053ec <sqrt+0xa4>)
 800538e:	f8cd b020 	str.w	fp, [sp, #32]
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005398:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800539c:	f1ba 0f00 	cmp.w	sl, #0
 80053a0:	d112      	bne.n	80053c8 <sqrt+0x80>
 80053a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80053a6:	4668      	mov	r0, sp
 80053a8:	f000 f9ac 	bl	8005704 <matherr>
 80053ac:	b1b8      	cbz	r0, 80053de <sqrt+0x96>
 80053ae:	9b08      	ldr	r3, [sp, #32]
 80053b0:	b11b      	cbz	r3, 80053ba <sqrt+0x72>
 80053b2:	f7ff fe07 	bl	8004fc4 <__errno>
 80053b6:	9b08      	ldr	r3, [sp, #32]
 80053b8:	6003      	str	r3, [r0, #0]
 80053ba:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80053be:	4640      	mov	r0, r8
 80053c0:	4649      	mov	r1, r9
 80053c2:	b00b      	add	sp, #44	; 0x2c
 80053c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c8:	4632      	mov	r2, r6
 80053ca:	463b      	mov	r3, r7
 80053cc:	4630      	mov	r0, r6
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fb f9a4 	bl	800071c <__aeabi_ddiv>
 80053d4:	f1ba 0f02 	cmp.w	sl, #2
 80053d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053dc:	d1e3      	bne.n	80053a6 <sqrt+0x5e>
 80053de:	f7ff fdf1 	bl	8004fc4 <__errno>
 80053e2:	2321      	movs	r3, #33	; 0x21
 80053e4:	6003      	str	r3, [r0, #0]
 80053e6:	e7e2      	b.n	80053ae <sqrt+0x66>
 80053e8:	20000120 	.word	0x20000120
 80053ec:	08005790 	.word	0x08005790

080053f0 <__ieee754_atan2>:
 80053f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	4256      	negs	r6, r2
 80053f6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80053fa:	4316      	orrs	r6, r2
 80053fc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80055a8 <__ieee754_atan2+0x1b8>
 8005400:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8005404:	454e      	cmp	r6, r9
 8005406:	4604      	mov	r4, r0
 8005408:	460d      	mov	r5, r1
 800540a:	469e      	mov	lr, r3
 800540c:	d808      	bhi.n	8005420 <__ieee754_atan2+0x30>
 800540e:	4246      	negs	r6, r0
 8005410:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005414:	4306      	orrs	r6, r0
 8005416:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800541a:	454e      	cmp	r6, r9
 800541c:	4688      	mov	r8, r1
 800541e:	d906      	bls.n	800542e <__ieee754_atan2+0x3e>
 8005420:	4620      	mov	r0, r4
 8005422:	4629      	mov	r1, r5
 8005424:	f7fa fe9a 	bl	800015c <__adddf3>
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	e030      	b.n	8005490 <__ieee754_atan2+0xa0>
 800542e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8005432:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005436:	4316      	orrs	r6, r2
 8005438:	d103      	bne.n	8005442 <__ieee754_atan2+0x52>
 800543a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543e:	f7ff bdf3 	b.w	8005028 <atan>
 8005442:	179e      	asrs	r6, r3, #30
 8005444:	f006 0602 	and.w	r6, r6, #2
 8005448:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800544c:	ea57 0100 	orrs.w	r1, r7, r0
 8005450:	d107      	bne.n	8005462 <__ieee754_atan2+0x72>
 8005452:	2e02      	cmp	r6, #2
 8005454:	d079      	beq.n	800554a <__ieee754_atan2+0x15a>
 8005456:	2e03      	cmp	r6, #3
 8005458:	d11a      	bne.n	8005490 <__ieee754_atan2+0xa0>
 800545a:	a541      	add	r5, pc, #260	; (adr r5, 8005560 <__ieee754_atan2+0x170>)
 800545c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005460:	e016      	b.n	8005490 <__ieee754_atan2+0xa0>
 8005462:	ea5c 0102 	orrs.w	r1, ip, r2
 8005466:	d106      	bne.n	8005476 <__ieee754_atan2+0x86>
 8005468:	f1b8 0f00 	cmp.w	r8, #0
 800546c:	da71      	bge.n	8005552 <__ieee754_atan2+0x162>
 800546e:	a53e      	add	r5, pc, #248	; (adr r5, 8005568 <__ieee754_atan2+0x178>)
 8005470:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005474:	e00c      	b.n	8005490 <__ieee754_atan2+0xa0>
 8005476:	45cc      	cmp	ip, r9
 8005478:	d123      	bne.n	80054c2 <__ieee754_atan2+0xd2>
 800547a:	4567      	cmp	r7, ip
 800547c:	d114      	bne.n	80054a8 <__ieee754_atan2+0xb8>
 800547e:	2e02      	cmp	r6, #2
 8005480:	d00a      	beq.n	8005498 <__ieee754_atan2+0xa8>
 8005482:	2e03      	cmp	r6, #3
 8005484:	d00c      	beq.n	80054a0 <__ieee754_atan2+0xb0>
 8005486:	2e01      	cmp	r6, #1
 8005488:	d15b      	bne.n	8005542 <__ieee754_atan2+0x152>
 800548a:	a539      	add	r5, pc, #228	; (adr r5, 8005570 <__ieee754_atan2+0x180>)
 800548c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005498:	a537      	add	r5, pc, #220	; (adr r5, 8005578 <__ieee754_atan2+0x188>)
 800549a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800549e:	e7f7      	b.n	8005490 <__ieee754_atan2+0xa0>
 80054a0:	a537      	add	r5, pc, #220	; (adr r5, 8005580 <__ieee754_atan2+0x190>)
 80054a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054a6:	e7f3      	b.n	8005490 <__ieee754_atan2+0xa0>
 80054a8:	2e02      	cmp	r6, #2
 80054aa:	d04e      	beq.n	800554a <__ieee754_atan2+0x15a>
 80054ac:	2e03      	cmp	r6, #3
 80054ae:	d0d4      	beq.n	800545a <__ieee754_atan2+0x6a>
 80054b0:	2e01      	cmp	r6, #1
 80054b2:	f04f 0400 	mov.w	r4, #0
 80054b6:	d102      	bne.n	80054be <__ieee754_atan2+0xce>
 80054b8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80054bc:	e7e8      	b.n	8005490 <__ieee754_atan2+0xa0>
 80054be:	2500      	movs	r5, #0
 80054c0:	e7e6      	b.n	8005490 <__ieee754_atan2+0xa0>
 80054c2:	454f      	cmp	r7, r9
 80054c4:	d0d0      	beq.n	8005468 <__ieee754_atan2+0x78>
 80054c6:	eba7 070c 	sub.w	r7, r7, ip
 80054ca:	153f      	asrs	r7, r7, #20
 80054cc:	2f3c      	cmp	r7, #60	; 0x3c
 80054ce:	dc1e      	bgt.n	800550e <__ieee754_atan2+0x11e>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da01      	bge.n	80054d8 <__ieee754_atan2+0xe8>
 80054d4:	373c      	adds	r7, #60	; 0x3c
 80054d6:	db1e      	blt.n	8005516 <__ieee754_atan2+0x126>
 80054d8:	4620      	mov	r0, r4
 80054da:	4629      	mov	r1, r5
 80054dc:	f7fb f91e 	bl	800071c <__aeabi_ddiv>
 80054e0:	f7ff ff2c 	bl	800533c <fabs>
 80054e4:	f7ff fda0 	bl	8005028 <atan>
 80054e8:	4604      	mov	r4, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	2e01      	cmp	r6, #1
 80054ee:	d015      	beq.n	800551c <__ieee754_atan2+0x12c>
 80054f0:	2e02      	cmp	r6, #2
 80054f2:	d017      	beq.n	8005524 <__ieee754_atan2+0x134>
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	d0cb      	beq.n	8005490 <__ieee754_atan2+0xa0>
 80054f8:	a323      	add	r3, pc, #140	; (adr r3, 8005588 <__ieee754_atan2+0x198>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fa fe29 	bl	8000158 <__aeabi_dsub>
 8005506:	a322      	add	r3, pc, #136	; (adr r3, 8005590 <__ieee754_atan2+0x1a0>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	e016      	b.n	800553c <__ieee754_atan2+0x14c>
 800550e:	a522      	add	r5, pc, #136	; (adr r5, 8005598 <__ieee754_atan2+0x1a8>)
 8005510:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005514:	e7ea      	b.n	80054ec <__ieee754_atan2+0xfc>
 8005516:	2400      	movs	r4, #0
 8005518:	2500      	movs	r5, #0
 800551a:	e7e7      	b.n	80054ec <__ieee754_atan2+0xfc>
 800551c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005520:	461d      	mov	r5, r3
 8005522:	e7b5      	b.n	8005490 <__ieee754_atan2+0xa0>
 8005524:	a318      	add	r3, pc, #96	; (adr r3, 8005588 <__ieee754_atan2+0x198>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4620      	mov	r0, r4
 800552c:	4629      	mov	r1, r5
 800552e:	f7fa fe13 	bl	8000158 <__aeabi_dsub>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	a116      	add	r1, pc, #88	; (adr r1, 8005590 <__ieee754_atan2+0x1a0>)
 8005538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800553c:	f7fa fe0c 	bl	8000158 <__aeabi_dsub>
 8005540:	e772      	b.n	8005428 <__ieee754_atan2+0x38>
 8005542:	a517      	add	r5, pc, #92	; (adr r5, 80055a0 <__ieee754_atan2+0x1b0>)
 8005544:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005548:	e7a2      	b.n	8005490 <__ieee754_atan2+0xa0>
 800554a:	a511      	add	r5, pc, #68	; (adr r5, 8005590 <__ieee754_atan2+0x1a0>)
 800554c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005550:	e79e      	b.n	8005490 <__ieee754_atan2+0xa0>
 8005552:	a511      	add	r5, pc, #68	; (adr r5, 8005598 <__ieee754_atan2+0x1a8>)
 8005554:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005558:	e79a      	b.n	8005490 <__ieee754_atan2+0xa0>
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w
 8005560:	54442d18 	.word	0x54442d18
 8005564:	c00921fb 	.word	0xc00921fb
 8005568:	54442d18 	.word	0x54442d18
 800556c:	bff921fb 	.word	0xbff921fb
 8005570:	54442d18 	.word	0x54442d18
 8005574:	bfe921fb 	.word	0xbfe921fb
 8005578:	7f3321d2 	.word	0x7f3321d2
 800557c:	4002d97c 	.word	0x4002d97c
 8005580:	7f3321d2 	.word	0x7f3321d2
 8005584:	c002d97c 	.word	0xc002d97c
 8005588:	33145c07 	.word	0x33145c07
 800558c:	3ca1a626 	.word	0x3ca1a626
 8005590:	54442d18 	.word	0x54442d18
 8005594:	400921fb 	.word	0x400921fb
 8005598:	54442d18 	.word	0x54442d18
 800559c:	3ff921fb 	.word	0x3ff921fb
 80055a0:	54442d18 	.word	0x54442d18
 80055a4:	3fe921fb 	.word	0x3fe921fb
 80055a8:	7ff00000 	.word	0x7ff00000

080055ac <__ieee754_sqrt>:
 80055ac:	4b54      	ldr	r3, [pc, #336]	; (8005700 <__ieee754_sqrt+0x154>)
 80055ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b2:	438b      	bics	r3, r1
 80055b4:	4606      	mov	r6, r0
 80055b6:	460d      	mov	r5, r1
 80055b8:	460a      	mov	r2, r1
 80055ba:	460c      	mov	r4, r1
 80055bc:	d10f      	bne.n	80055de <__ieee754_sqrt+0x32>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	f7fa ff81 	bl	80004c8 <__aeabi_dmul>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4630      	mov	r0, r6
 80055cc:	4629      	mov	r1, r5
 80055ce:	f7fa fdc5 	bl	800015c <__adddf3>
 80055d2:	4606      	mov	r6, r0
 80055d4:	460d      	mov	r5, r1
 80055d6:	4630      	mov	r0, r6
 80055d8:	4629      	mov	r1, r5
 80055da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055de:	2900      	cmp	r1, #0
 80055e0:	4607      	mov	r7, r0
 80055e2:	4603      	mov	r3, r0
 80055e4:	dc0e      	bgt.n	8005604 <__ieee754_sqrt+0x58>
 80055e6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80055ea:	ea5c 0707 	orrs.w	r7, ip, r7
 80055ee:	d0f2      	beq.n	80055d6 <__ieee754_sqrt+0x2a>
 80055f0:	b141      	cbz	r1, 8005604 <__ieee754_sqrt+0x58>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	f7fa fdaf 	bl	8000158 <__aeabi_dsub>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	f7fb f88d 	bl	800071c <__aeabi_ddiv>
 8005602:	e7e6      	b.n	80055d2 <__ieee754_sqrt+0x26>
 8005604:	1512      	asrs	r2, r2, #20
 8005606:	d074      	beq.n	80056f2 <__ieee754_sqrt+0x146>
 8005608:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800560c:	07d5      	lsls	r5, r2, #31
 800560e:	f04f 0500 	mov.w	r5, #0
 8005612:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005616:	bf48      	it	mi
 8005618:	0fd9      	lsrmi	r1, r3, #31
 800561a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800561e:	bf44      	itt	mi
 8005620:	005b      	lslmi	r3, r3, #1
 8005622:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005626:	1051      	asrs	r1, r2, #1
 8005628:	0fda      	lsrs	r2, r3, #31
 800562a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800562e:	4628      	mov	r0, r5
 8005630:	2216      	movs	r2, #22
 8005632:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	1987      	adds	r7, r0, r6
 800563a:	42a7      	cmp	r7, r4
 800563c:	bfde      	ittt	le
 800563e:	19b8      	addle	r0, r7, r6
 8005640:	1be4      	suble	r4, r4, r7
 8005642:	19ad      	addle	r5, r5, r6
 8005644:	0fdf      	lsrs	r7, r3, #31
 8005646:	3a01      	subs	r2, #1
 8005648:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800564c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005650:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005654:	d1f0      	bne.n	8005638 <__ieee754_sqrt+0x8c>
 8005656:	f04f 0c20 	mov.w	ip, #32
 800565a:	4696      	mov	lr, r2
 800565c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005660:	4284      	cmp	r4, r0
 8005662:	eb06 070e 	add.w	r7, r6, lr
 8005666:	dc02      	bgt.n	800566e <__ieee754_sqrt+0xc2>
 8005668:	d112      	bne.n	8005690 <__ieee754_sqrt+0xe4>
 800566a:	429f      	cmp	r7, r3
 800566c:	d810      	bhi.n	8005690 <__ieee754_sqrt+0xe4>
 800566e:	2f00      	cmp	r7, #0
 8005670:	eb07 0e06 	add.w	lr, r7, r6
 8005674:	da42      	bge.n	80056fc <__ieee754_sqrt+0x150>
 8005676:	f1be 0f00 	cmp.w	lr, #0
 800567a:	db3f      	blt.n	80056fc <__ieee754_sqrt+0x150>
 800567c:	f100 0801 	add.w	r8, r0, #1
 8005680:	1a24      	subs	r4, r4, r0
 8005682:	4640      	mov	r0, r8
 8005684:	429f      	cmp	r7, r3
 8005686:	bf88      	it	hi
 8005688:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800568c:	1bdb      	subs	r3, r3, r7
 800568e:	4432      	add	r2, r6
 8005690:	0064      	lsls	r4, r4, #1
 8005692:	f1bc 0c01 	subs.w	ip, ip, #1
 8005696:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800569a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800569e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056a2:	d1dd      	bne.n	8005660 <__ieee754_sqrt+0xb4>
 80056a4:	4323      	orrs	r3, r4
 80056a6:	d006      	beq.n	80056b6 <__ieee754_sqrt+0x10a>
 80056a8:	1c54      	adds	r4, r2, #1
 80056aa:	bf0b      	itete	eq
 80056ac:	4662      	moveq	r2, ip
 80056ae:	3201      	addne	r2, #1
 80056b0:	3501      	addeq	r5, #1
 80056b2:	f022 0201 	bicne.w	r2, r2, #1
 80056b6:	106b      	asrs	r3, r5, #1
 80056b8:	0852      	lsrs	r2, r2, #1
 80056ba:	07e8      	lsls	r0, r5, #31
 80056bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80056c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80056c4:	bf48      	it	mi
 80056c6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80056ca:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80056ce:	4616      	mov	r6, r2
 80056d0:	e781      	b.n	80055d6 <__ieee754_sqrt+0x2a>
 80056d2:	0adc      	lsrs	r4, r3, #11
 80056d4:	3915      	subs	r1, #21
 80056d6:	055b      	lsls	r3, r3, #21
 80056d8:	2c00      	cmp	r4, #0
 80056da:	d0fa      	beq.n	80056d2 <__ieee754_sqrt+0x126>
 80056dc:	02e6      	lsls	r6, r4, #11
 80056de:	d50a      	bpl.n	80056f6 <__ieee754_sqrt+0x14a>
 80056e0:	f1c2 0020 	rsb	r0, r2, #32
 80056e4:	fa23 f000 	lsr.w	r0, r3, r0
 80056e8:	1e55      	subs	r5, r2, #1
 80056ea:	4093      	lsls	r3, r2
 80056ec:	4304      	orrs	r4, r0
 80056ee:	1b4a      	subs	r2, r1, r5
 80056f0:	e78a      	b.n	8005608 <__ieee754_sqrt+0x5c>
 80056f2:	4611      	mov	r1, r2
 80056f4:	e7f0      	b.n	80056d8 <__ieee754_sqrt+0x12c>
 80056f6:	0064      	lsls	r4, r4, #1
 80056f8:	3201      	adds	r2, #1
 80056fa:	e7ef      	b.n	80056dc <__ieee754_sqrt+0x130>
 80056fc:	4680      	mov	r8, r0
 80056fe:	e7bf      	b.n	8005680 <__ieee754_sqrt+0xd4>
 8005700:	7ff00000 	.word	0x7ff00000

08005704 <matherr>:
 8005704:	2000      	movs	r0, #0
 8005706:	4770      	bx	lr

08005708 <_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr

08005714 <_fini>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	bf00      	nop
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr
