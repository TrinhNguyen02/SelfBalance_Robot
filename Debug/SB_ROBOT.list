
SB_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080069c8  080069c8  000169c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08006a40  08006a40  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a40  08006a40  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08006a48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000128  08006b70  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08006b70  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001001a  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f91  00000000  00000000  0003016b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00033070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017da4  00000000  00000000  00033f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbcf  00000000  00000000  0004bce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c85c  00000000  00000000  000578b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e410f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ac  00000000  00000000  000e418c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000128 	.word	0x20000128
 800012c:	00000000 	.word	0x00000000
 8000130:	080069b0 	.word	0x080069b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000012c 	.word	0x2000012c
 800014c:	080069b0 	.word	0x080069b0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 030f 	add.w	r3, r7, #15
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2275      	movs	r2, #117	; 0x75
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f002 fe71 	bl	8003e10 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b68      	cmp	r3, #104	; 0x68
 8001132:	d13d      	bne.n	80011b0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 030e 	add.w	r3, r7, #14
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	226b      	movs	r2, #107	; 0x6b
 800114a:	21d0      	movs	r1, #208	; 0xd0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f002 fd65 	bl	8003c1c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001152:	2307      	movs	r3, #7
 8001154:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030e 	add.w	r3, r7, #14
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2219      	movs	r2, #25
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f002 fd56 	bl	8003c1c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 030e 	add.w	r3, r7, #14
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	221c      	movs	r2, #28
 8001186:	21d0      	movs	r1, #208	; 0xd0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f002 fd47 	bl	8003c1c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	f107 030e 	add.w	r3, r7, #14
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	221b      	movs	r2, #27
 80011a4:	21d0      	movs	r1, #208	; 0xd0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f002 fd38 	bl	8003c1c <HAL_I2C_Mem_Write>
        return 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <MPU6050_Init+0xa6>
    }
    return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	0000      	movs	r0, r0
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80011c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c4:	b094      	sub	sp, #80	; 0x50
 80011c6:	af04      	add	r7, sp, #16
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	230e      	movs	r3, #14
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	223b      	movs	r2, #59	; 0x3b
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f002 fe15 	bl	8003e10 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011e6:	7a3b      	ldrb	r3, [r7, #8]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7a7b      	ldrb	r3, [r7, #9]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800122a:	7c3b      	ldrb	r3, [r7, #16]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7c7b      	ldrb	r3, [r7, #17]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21a      	sxth	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800123c:	7cbb      	ldrb	r3, [r7, #18]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	7cfb      	ldrb	r3, [r7, #19]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21a      	sxth	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800124e:	7d3b      	ldrb	r3, [r7, #20]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	7d7b      	ldrb	r3, [r7, #21]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21a      	sxth	r2, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8c4 	bl	80003f4 <__aeabi_i2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4bb7      	ldr	r3, [pc, #732]	; (8001550 <MPU6050_Read_All+0x390>)
 8001272:	f7ff fa53 	bl	800071c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8b4 	bl	80003f4 <__aeabi_i2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4baf      	ldr	r3, [pc, #700]	; (8001550 <MPU6050_Read_All+0x390>)
 8001292:	f7ff fa43 	bl	800071c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8a4 	bl	80003f4 <__aeabi_i2d>
 80012ac:	a3a2      	add	r3, pc, #648	; (adr r3, 8001538 <MPU6050_Read_All+0x378>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff fa33 	bl	800071c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80012c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fce1 	bl	8000c8c <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	49a1      	ldr	r1, [pc, #644]	; (8001554 <MPU6050_Read_All+0x394>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fde4 	bl	8000e9c <__aeabi_fdiv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	49a0      	ldr	r1, [pc, #640]	; (8001558 <MPU6050_Read_All+0x398>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fc23 	bl	8000b24 <__addsf3>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f881 	bl	80003f4 <__aeabi_i2d>
 80012f2:	a393      	add	r3, pc, #588	; (adr r3, 8001540 <MPU6050_Read_All+0x380>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff fa10 	bl	800071c <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f871 	bl	80003f4 <__aeabi_i2d>
 8001312:	a38b      	add	r3, pc, #556	; (adr r3, 8001540 <MPU6050_Read_All+0x380>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff fa00 	bl	800071c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f861 	bl	80003f4 <__aeabi_i2d>
 8001332:	a383      	add	r3, pc, #524	; (adr r3, 8001540 <MPU6050_Read_All+0x380>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f9f0 	bl	800071c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001346:	f001 fe7d 	bl	8003044 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	4b83      	ldr	r3, [pc, #524]	; (800155c <MPU6050_Read_All+0x39c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f83e 	bl	80003d4 <__aeabi_ui2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b80      	ldr	r3, [pc, #512]	; (8001560 <MPU6050_Read_All+0x3a0>)
 800135e:	f7ff f9dd 	bl	800071c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800136a:	f001 fe6b 	bl	8003044 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <MPU6050_Read_All+0x39c>)
 8001372:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	fb03 f202 	mul.w	r2, r3, r2
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138c:	4619      	mov	r1, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001394:	fb03 f301 	mul.w	r3, r3, r1
 8001398:	4413      	add	r3, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f82a 	bl	80003f4 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f005 f922 	bl	80065f0 <sqrt>
 80013ac:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013bc:	f7ff faec 	bl	8000998 <__aeabi_dcmpeq>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d119      	bne.n	80013fa <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f811 	bl	80003f4 <__aeabi_i2d>
 80013d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d6:	f7ff f9a1 	bl	800071c <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f004 ff75 	bl	80062d0 <atan>
 80013e6:	a358      	add	r3, pc, #352	; (adr r3, 8001548 <MPU6050_Read_All+0x388>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f86c 	bl	80004c8 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013f8:	e005      	b.n	8001406 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	425b      	negs	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fff0 	bl	80003f4 <__aeabi_i2d>
 8001414:	4682      	mov	sl, r0
 8001416:	468b      	mov	fp, r1
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ffe8 	bl	80003f4 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4650      	mov	r0, sl
 800142a:	4659      	mov	r1, fp
 800142c:	f005 f8de 	bl	80065ec <atan2>
 8001430:	a345      	add	r3, pc, #276	; (adr r3, 8001548 <MPU6050_Read_All+0x388>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f847 	bl	80004c8 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <MPU6050_Read_All+0x3a4>)
 8001448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144c:	f7ff faae 	bl	80009ac <__aeabi_dcmplt>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <MPU6050_Read_All+0x2ac>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <MPU6050_Read_All+0x3a8>)
 8001462:	f7ff fac1 	bl	80009e8 <__aeabi_dcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d114      	bne.n	8001496 <MPU6050_Read_All+0x2d6>
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <MPU6050_Read_All+0x3a8>)
 8001472:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001476:	f7ff fab7 	bl	80009e8 <__aeabi_dcmpgt>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d015      	beq.n	80014ac <MPU6050_Read_All+0x2ec>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <MPU6050_Read_All+0x3a4>)
 800148c:	f7ff fa8e 	bl	80009ac <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00a      	beq.n	80014ac <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 8001496:	4935      	ldr	r1, [pc, #212]	; (800156c <MPU6050_Read_All+0x3ac>)
 8001498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800149c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014aa:	e012      	b.n	80014d2 <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014ba:	e9cd 2300 	strd	r2, r3, [sp]
 80014be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014c2:	482a      	ldr	r0, [pc, #168]	; (800156c <MPU6050_Read_All+0x3ac>)
 80014c4:	f000 f856 	bl	8001574 <Kalman_getAngle>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014d8:	4690      	mov	r8, r2
 80014da:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MPU6050_Read_All+0x3a8>)
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff fa7e 	bl	80009e8 <__aeabi_dcmpgt>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014f8:	4614      	mov	r4, r2
 80014fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800150a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800150e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001512:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001516:	e9cd 3400 	strd	r3, r4, [sp]
 800151a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MPU6050_Read_All+0x3b0>)
 8001520:	f000 f828 	bl	8001574 <Kalman_getAngle>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 800152e:	bf00      	nop
 8001530:	3740      	adds	r7, #64	; 0x40
 8001532:	46bd      	mov	sp, r7
 8001534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001538:	00000000 	.word	0x00000000
 800153c:	40cc2900 	.word	0x40cc2900
 8001540:	00000000 	.word	0x00000000
 8001544:	40606000 	.word	0x40606000
 8001548:	1a63c1f8 	.word	0x1a63c1f8
 800154c:	404ca5dc 	.word	0x404ca5dc
 8001550:	40d00000 	.word	0x40d00000
 8001554:	43aa0000 	.word	0x43aa0000
 8001558:	42121eb8 	.word	0x42121eb8
 800155c:	2000016c 	.word	0x2000016c
 8001560:	408f4000 	.word	0x408f4000
 8001564:	c0568000 	.word	0xc0568000
 8001568:	40568000 	.word	0x40568000
 800156c:	20000048 	.word	0x20000048
 8001570:	20000000 	.word	0x20000000

08001574 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b092      	sub	sp, #72	; 0x48
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f103 0420 	add.w	r4, r3, #32
 8001586:	e9d4 3400 	ldrd	r3, r4, [r4]
 800158a:	461a      	mov	r2, r3
 800158c:	4623      	mov	r3, r4
 800158e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001592:	f7fe fde1 	bl	8000158 <__aeabi_dsub>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015ac:	f7fe ff8c 	bl	80004c8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fdd0 	bl	800015c <__adddf3>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015d6:	f7fe ff77 	bl	80004c8 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015e8:	f7fe fdb6 	bl	8000158 <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015fa:	f7fe fdad 	bl	8000158 <__aeabi_dsub>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fda6 	bl	800015c <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800161c:	f7fe ff54 	bl	80004c8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fd98 	bl	800015c <__adddf3>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001642:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001646:	f7fe ff3f 	bl	80004c8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fd81 	bl	8000158 <__aeabi_dsub>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800166c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001670:	f7fe ff2a 	bl	80004c8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fd6c 	bl	8000158 <__aeabi_dsub>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001696:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800169a:	f7fe ff15 	bl	80004c8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe fd59 	bl	800015c <__adddf3>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f103 0410 	add.w	r4, r3, #16
 80016c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	f7fe fd48 	bl	800015c <__adddf3>
 80016cc:	4603      	mov	r3, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016de:	f7ff f81d 	bl	800071c <__aeabi_ddiv>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016f4:	f7ff f812 	bl	800071c <__aeabi_ddiv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f103 0418 	add.w	r4, r3, #24
 8001706:	e9d4 3400 	ldrd	r3, r4, [r4]
 800170a:	461a      	mov	r2, r3
 800170c:	4623      	mov	r3, r4
 800170e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001712:	f7fe fd21 	bl	8000158 <__aeabi_dsub>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001728:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800172c:	f7fe fecc 	bl	80004c8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fd10 	bl	800015c <__adddf3>
 800173c:	4603      	mov	r3, r0
 800173e:	460c      	mov	r4, r1
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800174c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001750:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001754:	f7fe feb8 	bl	80004c8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fcfc 	bl	800015c <__adddf3>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001774:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001778:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001782:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001786:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001790:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001798:	f7fe fe96 	bl	80004c8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fcd8 	bl	8000158 <__aeabi_dsub>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80017b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c0:	f7fe fe82 	bl	80004c8 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fcc4 	bl	8000158 <__aeabi_dsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e8:	f7fe fe6e 	bl	80004c8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fcb0 	bl	8000158 <__aeabi_dsub>
 80017f8:	4603      	mov	r3, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001808:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800180c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001810:	f7fe fe5a 	bl	80004c8 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fc9c 	bl	8000158 <__aeabi_dsub>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f103 0418 	add.w	r4, r3, #24
 8001830:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 8001834:	4618      	mov	r0, r3
 8001836:	4621      	mov	r1, r4
 8001838:	3748      	adds	r7, #72	; 0x48
 800183a:	46bd      	mov	sp, r7
 800183c:	bdb0      	pop	{r4, r5, r7, pc}

0800183e <constrain>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;


int32_t constrain(int32_t value, int32_t min, int32_t max) {
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	429a      	cmp	r2, r3
 8001850:	da01      	bge.n	8001856 <constrain+0x18>
        return min;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	e006      	b.n	8001864 <constrain+0x26>
    } else if (value > max) {
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	dd01      	ble.n	8001862 <constrain+0x24>
        return max;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e000      	b.n	8001864 <constrain+0x26>
    } else {
        return value;
 8001862:	68fb      	ldr	r3, [r7, #12]
    }
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <adjustPreiodTM1>:

// adjust preiod for timer
void adjustPreiodTM1(int preiod)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM1_Init 1 */
	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <adjustPreiodTM1+0x9c>)
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <adjustPreiodTM1+0xa0>)
 8001894:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 35;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <adjustPreiodTM1+0x9c>)
 8001898:	2223      	movs	r2, #35	; 0x23
 800189a:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <adjustPreiodTM1+0x9c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = preiod;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <adjustPreiodTM1+0x9c>)
 80018a6:	60d3      	str	r3, [r2, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <adjustPreiodTM1+0x9c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <adjustPreiodTM1+0x9c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <adjustPreiodTM1+0x9c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <adjustPreiodTM1+0x9c>)
 80018bc:	f003 fc80 	bl	80051c0 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <adjustPreiodTM1+0x5a>
	  {
	    Error_Handler();
 80018c6:	f001 f8ad 	bl	8002a24 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <adjustPreiodTM1+0x9c>)
 80018d8:	f003 fe1c 	bl	8005514 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <adjustPreiodTM1+0x76>
	  {
	    Error_Handler();
 80018e2:	f001 f89f 	bl	8002a24 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <adjustPreiodTM1+0x9c>)
 80018f6:	f003 ffe9 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <adjustPreiodTM1+0x94>
	  {
	    Error_Handler();
 8001900:	f001 f890 	bl	8002a24 <Error_Handler>
	  }

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200003bc 	.word	0x200003bc
 8001910:	40012c00 	.word	0x40012c00

08001914 <adjustPreiodTM2>:
void adjustPreiodTM2(int preiod)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
//  TIM_MasterConfigTypeDef sMasterConfig = {0};
//  htim2.Init.Period = preiod;
//  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <adjustPreiodTM2+0x98>)
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <adjustPreiodTM2+0x98>)
 800193e:	2223      	movs	r2, #35	; 0x23
 8001940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <adjustPreiodTM2+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = preiod;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <adjustPreiodTM2+0x98>)
 800194c:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <adjustPreiodTM2+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <adjustPreiodTM2+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <adjustPreiodTM2+0x98>)
 800195c:	f003 fc30 	bl	80051c0 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <adjustPreiodTM2+0x56>
  {
    Error_Handler();
 8001966:	f001 f85d 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <adjustPreiodTM2+0x98>)
 8001978:	f003 fdcc 	bl	8005514 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <adjustPreiodTM2+0x72>
  {
    Error_Handler();
 8001982:	f001 f84f 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <adjustPreiodTM2+0x98>)
 8001996:	f003 ff99 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <adjustPreiodTM2+0x90>
  {
    Error_Handler();
 80019a0:	f001 f840 	bl	8002a24 <Error_Handler>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000448 	.word	0x20000448

080019b0 <stabilityPDControl>:

// Control functions (PID controls, Steppers control...)

// PD controller implementation(Proportional, derivative). DT in seconds
float stabilityPDControl(float DT, float input, float setPoint,  float Kp, float Kd)
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  float error;
  float output;

  error = setPoint - input;
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff f8ad 	bl	8000b20 <__aeabi_fsub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	61fb      	str	r3, [r7, #28]

  // Kd is implemented in two parts
  //    The biggest one using only the input (sensor) part not the SetPoint input-input(t-1).
  //    And the second using the setpoint to make it a bit more agressive   setPoint-setPoint(t-1)
  float Kd_setPoint = constrain((setPoint - setPointOld), -12, 12); // We limit the input part...
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <stabilityPDControl+0xb0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff f8a5 	bl	8000b20 <__aeabi_fsub>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb71 	bl	80010c0 <__aeabi_f2iz>
 80019de:	4603      	mov	r3, r0
 80019e0:	220c      	movs	r2, #12
 80019e2:	f06f 010b 	mvn.w	r1, #11
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff29 	bl	800183e <constrain>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f94c 	bl	8000c8c <__aeabi_i2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]
  output = Kp * error + (Kd * Kd_setPoint - Kd * (input - PID_errorOld)) / DT;
 80019f8:	69f9      	ldr	r1, [r7, #28]
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f7ff f99a 	bl	8000d34 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461c      	mov	r4, r3
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a08:	f7ff f994 	bl	8000d34 <__aeabi_fmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461d      	mov	r5, r3
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <stabilityPDControl+0xb4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	68b8      	ldr	r0, [r7, #8]
 8001a18:	f7ff f882 	bl	8000b20 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f987 	bl	8000d34 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7ff f878 	bl	8000b20 <__aeabi_fsub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa31 	bl	8000e9c <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff f870 	bl	8000b24 <__addsf3>
 8001a44:	4603      	mov	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]
  //Serial.print(Kd*(error-PID_errorOld));Serial.print("\t");
  //PID_errorOld2 = PID_errorOld;
  PID_errorOld = input;  // error for Kd is only the input component
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <stabilityPDControl+0xb4>)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	6013      	str	r3, [r2, #0]
  setPointOld = setPoint;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <stabilityPDControl+0xb0>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
  return (output);
 8001a54:	697b      	ldr	r3, [r7, #20]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000184 	.word	0x20000184
 8001a64:	200001cc 	.word	0x200001cc

08001a68 <speedPIControl>:


// PI controller implementation (Proportional, integral). DT in seconds
float speedPIControl(float DT, int16_t input, int16_t setPoint,  float Kp, float Ki)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	4613      	mov	r3, r2
 8001a78:	813b      	strh	r3, [r7, #8]
  int16_t error;
  float output;

  error = setPoint - input;
 8001a7a:	893a      	ldrh	r2, [r7, #8]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	82fb      	strh	r3, [r7, #22]
  PID_errorSum += constrain(error, -ITERM_MAX_ERROR, ITERM_MAX_ERROR);
 8001a84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a88:	221e      	movs	r2, #30
 8001a8a:	f06f 011d 	mvn.w	r1, #29
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fed5 	bl	800183e <constrain>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f8f8 	bl	8000c8c <__aeabi_i2f>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <speedPIControl+0xb8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f7ff f83d 	bl	8000b24 <__addsf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <speedPIControl+0xb8>)
 8001ab0:	601a      	str	r2, [r3, #0]
  PID_errorSum = constrain(PID_errorSum, -ITERM_MAX, ITERM_MAX);
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <speedPIControl+0xb8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb02 	bl	80010c0 <__aeabi_f2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ac2:	4918      	ldr	r1, [pc, #96]	; (8001b24 <speedPIControl+0xbc>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff feba 	bl	800183e <constrain>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f8dd 	bl	8000c8c <__aeabi_i2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <speedPIControl+0xb8>)
 8001ad6:	601a      	str	r2, [r3, #0]

  //Serial.println(PID_errorSum);

  output = Kp * error + Ki * PID_errorSum * DT; // DT is in miliseconds...
 8001ad8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f8d5 	bl	8000c8c <__aeabi_i2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f924 	bl	8000d34 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461c      	mov	r4, r3
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <speedPIControl+0xb8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f91c 	bl	8000d34 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f917 	bl	8000d34 <__aeabi_fmul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff f80a 	bl	8000b24 <__addsf3>
 8001b10:	4603      	mov	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]
  return (output);
 8001b14:	693b      	ldr	r3, [r7, #16]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001d8 	.word	0x200001d8
 8001b24:	ffffd8f0 	.word	0xffffd8f0

08001b28 <positionPDControl>:


float positionPDControl(long actualPos, long setPointPos, float Kpp, float Kdp, int16_t speedM)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  float output;
  float P;

  P = constrain(Kpp*(float)(setPointPos - actualPos), -80, 80); // Limit command
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f8a5 	bl	8000c8c <__aeabi_i2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f8f4 	bl	8000d34 <__aeabi_fmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fab6 	bl	80010c0 <__aeabi_f2iz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2250      	movs	r2, #80	; 0x50
 8001b58:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe6e 	bl	800183e <constrain>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f891 	bl	8000c8c <__aeabi_i2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]
  output = P + Kdp * (float)(speedM);
 8001b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f88a 	bl	8000c8c <__aeabi_i2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f8d9 	bl	8000d34 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7fe ffcc 	bl	8000b24 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]
  return (output);
 8001b90:	693b      	ldr	r3, [r7, #16]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <setMotorSpeedM1>:


// Set speed of Stepper Motor1
// tspeed could be positive or negative (reverse)
void setMotorSpeedM1(int16_t tspeed)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  int16_t speed;

  // Limit max speed?

  // WE LIMIT MAX ACCELERATION of the motors
  if ((speed_M1 - tspeed) > MAX_ACCEL)
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	dd09      	ble.n	8001bcc <setMotorSpeedM1+0x30>
    speed_M1 -= MAX_ACCEL;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b02      	subs	r3, #2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e016      	b.n	8001bfa <setMotorSpeedM1+0x5e>
  else if ((speed_M1 - tspeed) < -MAX_ACCEL)
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f113 0f02 	cmn.w	r3, #2
 8001bde:	da09      	bge.n	8001bf4 <setMotorSpeedM1+0x58>
    speed_M1 += MAX_ACCEL;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3302      	adds	r3, #2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e002      	b.n	8001bfa <setMotorSpeedM1+0x5e>
  else
    speed_M1 = tspeed;
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	8013      	strh	r3, [r2, #0]

  speed = speed_M1 * 40; // 1/16 Microstepping
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <setMotorSpeedM1+0x100>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	817b      	strh	r3, [r7, #10]

  if (speed == 0)
 8001c0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <setMotorSpeedM1+0x88>
  {
    timer_period1 = ZERO_SPEED;
 8001c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1a:	60fb      	str	r3, [r7, #12]
    dir_M1 = 0;
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <setMotorSpeedM1+0x104>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e021      	b.n	8001c68 <setMotorSpeedM1+0xcc>
  }
  else if (speed > 0)
 8001c24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	dd0e      	ble.n	8001c4a <setMotorSpeedM1+0xae>
  {
    timer_period1 = 2000000 / speed; // 2Mhz timer
 8001c2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <setMotorSpeedM1+0x108>)
 8001c32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c36:	60fb      	str	r3, [r7, #12]
    dir_M1 = 1;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <setMotorSpeedM1+0x104>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // DIR Motor 1 (Forward)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2102      	movs	r1, #2
 8001c42:	4819      	ldr	r0, [pc, #100]	; (8001ca8 <setMotorSpeedM1+0x10c>)
 8001c44:	f001 fe80 	bl	8003948 <HAL_GPIO_WritePin>
 8001c48:	e00e      	b.n	8001c68 <setMotorSpeedM1+0xcc>
  }
  else
  {
    timer_period1 = 2000000 / -speed;
 8001c4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c4e:	425b      	negs	r3, r3
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <setMotorSpeedM1+0x108>)
 8001c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c56:	60fb      	str	r3, [r7, #12]
    dir_M1 = -1;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <setMotorSpeedM1+0x104>)
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Dir Motor 1
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2102      	movs	r1, #2
 8001c62:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <setMotorSpeedM1+0x10c>)
 8001c64:	f001 fe70 	bl	8003948 <HAL_GPIO_WritePin>
  }
  if (timer_period1 > 65535)   // Check for minimun speed (maximun period without overflow)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	db02      	blt.n	8001c76 <setMotorSpeedM1+0xda>
    timer_period1 = ZERO_SPEED;
 8001c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c74:	60fb      	str	r3, [r7, #12]

  adjustPreiodTM1(timer_period1);
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fdfa 	bl	8001870 <adjustPreiodTM1>
  if (__HAL_TIM_GET_COUNTER(&htim1) > htim1.Init.Period) {
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <setMotorSpeedM1+0x110>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <setMotorSpeedM1+0x110>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d903      	bls.n	8001c92 <setMotorSpeedM1+0xf6>
    __HAL_TIM_SET_COUNTER(&htim1, 0);  // Reset the timer counter to 0
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <setMotorSpeedM1+0x110>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001ec 	.word	0x200001ec
 8001ca0:	200001b2 	.word	0x200001b2
 8001ca4:	001e8480 	.word	0x001e8480
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	200003bc 	.word	0x200003bc

08001cb0 <setMotorSpeedM2>:

// Set speed of Stepper Motor2
// tspeed could be positive or negative (reverse)
void setMotorSpeedM2(int16_t tspeed)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  int16_t speed;

  // Limit max speed?

//   WE LIMIT MAX ACCELERATION of the motors
  if ((speed_M2 - tspeed) > MAX_ACCEL)
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	dd09      	ble.n	8001ce0 <setMotorSpeedM2+0x30>
    speed_M2 -= MAX_ACCEL;
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b02      	subs	r3, #2
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	e016      	b.n	8001d0e <setMotorSpeedM2+0x5e>
  else if ((speed_M2 - tspeed) < -MAX_ACCEL)
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f113 0f02 	cmn.w	r3, #2
 8001cf2:	da09      	bge.n	8001d08 <setMotorSpeedM2+0x58>
    speed_M2 += MAX_ACCEL;
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	e002      	b.n	8001d0e <setMotorSpeedM2+0x5e>
  else
    speed_M2 = tspeed;
 8001d08:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	8013      	strh	r3, [r2, #0]
  speed = speed_M2 * 40; // 1/16 Microstepping
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <setMotorSpeedM2+0x100>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	817b      	strh	r3, [r7, #10]

  if (speed == 0)
 8001d22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <setMotorSpeedM2+0x88>
  {
    timer_period2 = ZERO_SPEED;
 8001d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2e:	60fb      	str	r3, [r7, #12]
    dir_M2 = 0;
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <setMotorSpeedM2+0x104>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e021      	b.n	8001d7c <setMotorSpeedM2+0xcc>
  }
  else if (speed > 0)
 8001d38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd0e      	ble.n	8001d5e <setMotorSpeedM2+0xae>
  {
    timer_period2 = 2000000 / speed; // 2Mhz timer
 8001d40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <setMotorSpeedM2+0x108>)
 8001d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
    dir_M2 = 1;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <setMotorSpeedM2+0x104>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);  // Dir Motor2 (Forward)
 8001d52:	2200      	movs	r2, #0
 8001d54:	2108      	movs	r1, #8
 8001d56:	4819      	ldr	r0, [pc, #100]	; (8001dbc <setMotorSpeedM2+0x10c>)
 8001d58:	f001 fdf6 	bl	8003948 <HAL_GPIO_WritePin>
 8001d5c:	e00e      	b.n	8001d7c <setMotorSpeedM2+0xcc>
  }
  else
  {
    timer_period2 = 2000000 / -speed;
 8001d5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d62:	425b      	negs	r3, r3
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <setMotorSpeedM2+0x108>)
 8001d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
    dir_M2 = -1;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <setMotorSpeedM2+0x104>)
 8001d6e:	22ff      	movs	r2, #255	; 0xff
 8001d70:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // DIR Motor 2
 8001d72:	2201      	movs	r2, #1
 8001d74:	2108      	movs	r1, #8
 8001d76:	4811      	ldr	r0, [pc, #68]	; (8001dbc <setMotorSpeedM2+0x10c>)
 8001d78:	f001 fde6 	bl	8003948 <HAL_GPIO_WritePin>
  }
  if (timer_period2 > 65535)   // Check for minimun speed (maximun period without overflow)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	db02      	blt.n	8001d8a <setMotorSpeedM2+0xda>
    timer_period2 = ZERO_SPEED;
 8001d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d88:	60fb      	str	r3, [r7, #12]

  adjustPreiodTM2(timer_period2);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fdc2 	bl	8001914 <adjustPreiodTM2>
  // Check  if we need to reset the timer...
  if (__HAL_TIM_GET_COUNTER(&htim2) > htim2.Init.Period) {
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <setMotorSpeedM2+0x110>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <setMotorSpeedM2+0x110>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d903      	bls.n	8001da6 <setMotorSpeedM2+0xf6>
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the timer counter to 0
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <setMotorSpeedM2+0x110>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001ee 	.word	0x200001ee
 8001db4:	200001e4 	.word	0x200001e4
 8001db8:	001e8480 	.word	0x001e8480
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	20000448 	.word	0x20000448

08001dc4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 if(huart->Instance == huart1.Instance)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_UART_RxCpltCallback+0x1b0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 80c9 	bne.w	8001f6c <HAL_UART_RxCpltCallback+0x1a8>
 {
   HAL_UART_Receive_IT(&huart1, bufUart, 3);
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4966      	ldr	r1, [pc, #408]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001dde:	4865      	ldr	r0, [pc, #404]	; (8001f74 <HAL_UART_RxCpltCallback+0x1b0>)
 8001de0:	f003 fe31 	bl	8005a46 <HAL_UART_Receive_IT>
   if(bufUart[0]=='P'){
 8001de4:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b50      	cmp	r3, #80	; 0x50
 8001dea:	d112      	bne.n	8001e12 <HAL_UART_RxCpltCallback+0x4e>
	   Kp = (float)(bufUart[1] << 8 | bufUart[2])/100;
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001df4:	7892      	ldrb	r2, [r2, #2]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe ff47 	bl	8000c8c <__aeabi_i2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	495e      	ldr	r1, [pc, #376]	; (8001f7c <HAL_UART_RxCpltCallback+0x1b8>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f84a 	bl	8000e9c <__aeabi_fdiv>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <HAL_UART_RxCpltCallback+0x1bc>)
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e0a7      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='D'){
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b44      	cmp	r3, #68	; 0x44
 8001e18:	d112      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x7c>
	   Kd = (float)(bufUart[1] << 8 | bufUart[2])/100;
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4a55      	ldr	r2, [pc, #340]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e22:	7892      	ldrb	r2, [r2, #2]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe ff30 	bl	8000c8c <__aeabi_i2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4953      	ldr	r1, [pc, #332]	; (8001f7c <HAL_UART_RxCpltCallback+0x1b8>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f833 	bl	8000e9c <__aeabi_fdiv>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <HAL_UART_RxCpltCallback+0x1c0>)
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e090      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='p'){
 8001e40:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b70      	cmp	r3, #112	; 0x70
 8001e46:	d112      	bne.n	8001e6e <HAL_UART_RxCpltCallback+0xaa>
	   Kp_position = (float)(bufUart[1] << 8 | bufUart[2])/100;
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e50:	7892      	ldrb	r2, [r2, #2]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe ff19 	bl	8000c8c <__aeabi_i2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4947      	ldr	r1, [pc, #284]	; (8001f7c <HAL_UART_RxCpltCallback+0x1b8>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f81c 	bl	8000e9c <__aeabi_fdiv>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_UART_RxCpltCallback+0x1c4>)
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e079      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='d'){
 8001e6e:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d112      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0xd8>
	   Kd_position = (float)(bufUart[1] << 8 | bufUart[2])/100;
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e7e:	7892      	ldrb	r2, [r2, #2]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ff02 	bl	8000c8c <__aeabi_i2f>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	493c      	ldr	r1, [pc, #240]	; (8001f7c <HAL_UART_RxCpltCallback+0x1b8>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f805 	bl	8000e9c <__aeabi_fdiv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e062      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='t'){
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b74      	cmp	r3, #116	; 0x74
 8001ea2:	d112      	bne.n	8001eca <HAL_UART_RxCpltCallback+0x106>
	   Kp_thr = (float)(bufUart[1] << 8 | bufUart[2])/100;
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001eac:	7892      	ldrb	r2, [r2, #2]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe feeb 	bl	8000c8c <__aeabi_i2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4930      	ldr	r1, [pc, #192]	; (8001f7c <HAL_UART_RxCpltCallback+0x1b8>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ffee 	bl	8000e9c <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e04b      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='T'){
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b54      	cmp	r3, #84	; 0x54
 8001ed0:	d112      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x134>
	   Ki_thr = (float)(bufUart[1] << 8 | bufUart[2])/100;
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001eda:	7892      	ldrb	r2, [r2, #2]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fed4 	bl	8000c8c <__aeabi_i2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4925      	ldr	r1, [pc, #148]	; (8001f7c <HAL_UART_RxCpltCallback+0x1b8>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ffd7 	bl	8000e9c <__aeabi_fdiv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_UART_RxCpltCallback+0x1d0>)
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e034      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='X'){
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b58      	cmp	r3, #88	; 0x58
 8001efe:	d108      	bne.n	8001f12 <HAL_UART_RxCpltCallback+0x14e>
	   X_axis = (int)(bufUart[1] << 8 | bufUart[2]);
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f08:	7892      	ldrb	r2, [r2, #2]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e027      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='Y'){
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b59      	cmp	r3, #89	; 0x59
 8001f18:	d108      	bne.n	8001f2c <HAL_UART_RxCpltCallback+0x168>
	   Y_axis = (int)(bufUart[1] << 8 | bufUart[2]);
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f22:	7892      	ldrb	r2, [r2, #2]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_UART_RxCpltCallback+0x1d8>)
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01a      	b.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
   }
   else if(bufUart[0]=='A'){
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b41      	cmp	r3, #65	; 0x41
 8001f32:	d116      	bne.n	8001f62 <HAL_UART_RxCpltCallback+0x19e>
	   int16_t trim = (bufUart[1] << 8 | bufUart[2]);
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f3e:	789b      	ldrb	r3, [r3, #2]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	81fb      	strh	r3, [r7, #14]
	   trimAngle = (float)trim/10;
 8001f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fe9e 	bl	8000c8c <__aeabi_i2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4913      	ldr	r1, [pc, #76]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ffa1 	bl	8000e9c <__aeabi_fdiv>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_UART_RxCpltCallback+0x1e0>)
 8001f60:	601a      	str	r2, [r3, #0]
   }
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f66:	4810      	ldr	r0, [pc, #64]	; (8001fa8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001f68:	f001 fd06 	bl	8003978 <HAL_GPIO_TogglePin>
 }
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000374 	.word	0x20000374
 8001f78:	20000490 	.word	0x20000490
 8001f7c:	42c80000 	.word	0x42c80000
 8001f80:	20000090 	.word	0x20000090
 8001f84:	20000094 	.word	0x20000094
 8001f88:	2000009c 	.word	0x2000009c
 8001f8c:	200000a0 	.word	0x200000a0
 8001f90:	20000098 	.word	0x20000098
 8001f94:	20000144 	.word	0x20000144
 8001f98:	200000ac 	.word	0x200000ac
 8001f9c:	200000b0 	.word	0x200000b0
 8001fa0:	41200000 	.word	0x41200000
 8001fa4:	20000148 	.word	0x20000148
 8001fa8:	40011000 	.word	0x40011000

08001fac <move>:

void move(int X_axis, int Y_axis){
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	if ((X_axis -1 ) == 0 && (Y_axis -1 ) == 1) {			// forward
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d106      	bne.n	8001fca <move+0x1e>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d103      	bne.n	8001fca <move+0x1e>
		fbMove = 8;
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <move+0x108>)
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e06e      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == 0 && (Y_axis -1 ) == -1) {		// backward
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <move+0x34>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <move+0x34>
		fbMove = -8;
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <move+0x108>)
 8001fd8:	f06f 0207 	mvn.w	r2, #7
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e063      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == -1 && (Y_axis -1 ) == 0) {		// left
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <move+0x50>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <move+0x50>
		steeringLeft = -50; steeringRight = 50;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <move+0x10c>)
 8001fee:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <move+0x110>)
 8001ff6:	2232      	movs	r2, #50	; 0x32
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e055      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == 1 && (Y_axis -1 ) == 0) {		// right
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d10a      	bne.n	8002018 <move+0x6c>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <move+0x6c>
		steeringLeft = 50; steeringRight = -50;
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <move+0x10c>)
 800200a:	2232      	movs	r2, #50	; 0x32
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <move+0x110>)
 8002010:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e047      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == -1 && (Y_axis -1 ) == 1) {		// left forward
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <move+0x86>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d106      	bne.n	8002032 <move+0x86>
		steeringLeft = 25; steeringRight = 50;
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <move+0x10c>)
 8002026:	2219      	movs	r2, #25
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <move+0x110>)
 800202c:	2232      	movs	r2, #50	; 0x32
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e03a      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == 1 && (Y_axis -1 ) == 1) {		// right forward
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d109      	bne.n	800204c <move+0xa0>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d106      	bne.n	800204c <move+0xa0>
		steeringLeft = 50; steeringRight = 25;
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <move+0x10c>)
 8002040:	2232      	movs	r2, #50	; 0x32
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <move+0x110>)
 8002046:	2219      	movs	r2, #25
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e02d      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == -1 && (Y_axis -1 ) == -1) {		// left backward
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10b      	bne.n	800206a <move+0xbe>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d108      	bne.n	800206a <move+0xbe>
		steeringLeft = -25; steeringRight = -50;
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <move+0x10c>)
 800205a:	f06f 0218 	mvn.w	r2, #24
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <move+0x110>)
 8002062:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e01e      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == 1 && (Y_axis -1 ) == -1) {		// right backward
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d10b      	bne.n	8002088 <move+0xdc>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <move+0xdc>
		steeringLeft = -50; steeringRight = -25;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <move+0x10c>)
 8002078:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <move+0x110>)
 8002080:	f06f 0218 	mvn.w	r2, #24
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e00f      	b.n	80020a8 <move+0xfc>
	}
	else if ((X_axis -1 ) == 0 && (Y_axis -1 ) == 0) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10c      	bne.n	80020a8 <move+0xfc>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d109      	bne.n	80020a8 <move+0xfc>
		steeringLeft = 0; steeringRight = 0;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <move+0x10c>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <move+0x110>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
		fbMove = 0;
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <move+0x108>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
	}
}
 80020a6:	e7ff      	b.n	80020a8 <move+0xfc>
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000154 	.word	0x20000154
 80020b8:	20000150 	.word	0x20000150
 80020bc:	2000014c 	.word	0x2000014c

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80020c6:	f000 ff65 	bl	8002f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ca:	f000 fa89 	bl	80025e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ce:	f000 fc3d 	bl	800294c <MX_GPIO_Init>
  MX_DMA_Init();
 80020d2:	f000 fc0d 	bl	80028f0 <MX_DMA_Init>
  MX_TIM1_Init();
 80020d6:	f000 faf7 	bl	80026c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020da:	f000 fb45 	bl	8002768 <MX_TIM2_Init>
  MX_I2C1_Init();
 80020de:	f000 fac5 	bl	800266c <MX_I2C1_Init>
  MX_TIM3_Init();
 80020e2:	f000 fb8d 	bl	8002800 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80020e6:	f000 fbd9 	bl	800289c <MX_USART1_UART_Init>
//  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80020ea:	48ad      	ldr	r0, [pc, #692]	; (80023a0 <main+0x2e0>)
 80020ec:	f003 f8b8 	bl	8005260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80020f0:	48ac      	ldr	r0, [pc, #688]	; (80023a4 <main+0x2e4>)
 80020f2:	f003 f8b5 	bl	8005260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80020f6:	48ac      	ldr	r0, [pc, #688]	; (80023a8 <main+0x2e8>)
 80020f8:	f003 f8b2 	bl	8005260 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, bufUart, 3);
 80020fc:	2203      	movs	r2, #3
 80020fe:	49ab      	ldr	r1, [pc, #684]	; (80023ac <main+0x2ec>)
 8002100:	48ab      	ldr	r0, [pc, #684]	; (80023b0 <main+0x2f0>)
 8002102:	f003 fca0 	bl	8005a46 <HAL_UART_Receive_IT>


  MPU6050_Init(&hi2c1);
 8002106:	48ab      	ldr	r0, [pc, #684]	; (80023b4 <main+0x2f4>)
 8002108:	f7ff f800 	bl	800110c <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    move(X_axis, Y_axis);
 800210c:	4baa      	ldr	r3, [pc, #680]	; (80023b8 <main+0x2f8>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4baa      	ldr	r3, [pc, #680]	; (80023bc <main+0x2fc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f7ff ff48 	bl	8001fac <move>

	    dt = (timer_value - timer_old) * 0.000001; // dt in seconds
 800211c:	4ba8      	ldr	r3, [pc, #672]	; (80023c0 <main+0x300>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4ba8      	ldr	r3, [pc, #672]	; (80023c4 <main+0x304>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f964 	bl	80003f4 <__aeabi_i2d>
 800212c:	a396      	add	r3, pc, #600	; (adr r3, 8002388 <main+0x2c8>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe f9c9 	bl	80004c8 <__aeabi_dmul>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	4618      	mov	r0, r3
 800213c:	4621      	mov	r1, r4
 800213e:	f7fe fc9b 	bl	8000a78 <__aeabi_d2f>
 8002142:	4602      	mov	r2, r0
 8002144:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <main+0x308>)
 8002146:	601a      	str	r2, [r3, #0]
	    timer_old = timer_value;
 8002148:	4b9d      	ldr	r3, [pc, #628]	; (80023c0 <main+0x300>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a9d      	ldr	r2, [pc, #628]	; (80023c4 <main+0x304>)
 800214e:	6013      	str	r3, [r2, #0]
	    timer_value = __HAL_TIM_GET_COUNTER(&htim3);
 8002150:	4b95      	ldr	r3, [pc, #596]	; (80023a8 <main+0x2e8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	461a      	mov	r2, r3
 8002158:	4b99      	ldr	r3, [pc, #612]	; (80023c0 <main+0x300>)
 800215a:	601a      	str	r2, [r3, #0]
	    angle_adjusted_Old = angle_adjusted;
 800215c:	4b9b      	ldr	r3, [pc, #620]	; (80023cc <main+0x30c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a9b      	ldr	r2, [pc, #620]	; (80023d0 <main+0x310>)
 8002162:	6013      	str	r3, [r2, #0]

//	     Get new orientation angle from IMU (MPU6050)
	    MPU6050_Read_All(&hi2c1, &MPU6050);
 8002164:	499b      	ldr	r1, [pc, #620]	; (80023d4 <main+0x314>)
 8002166:	4893      	ldr	r0, [pc, #588]	; (80023b4 <main+0x2f4>)
 8002168:	f7ff f82a 	bl	80011c0 <MPU6050_Read_All>
	    MPU_sensor_angle = (float)MPU6050.KalmanAngleY + trimAngle + fbMove;
 800216c:	4b99      	ldr	r3, [pc, #612]	; (80023d4 <main+0x314>)
 800216e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8002172:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002176:	4618      	mov	r0, r3
 8002178:	4621      	mov	r1, r4
 800217a:	f7fe fc7d 	bl	8000a78 <__aeabi_d2f>
 800217e:	4602      	mov	r2, r0
 8002180:	4b95      	ldr	r3, [pc, #596]	; (80023d8 <main+0x318>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f7fe fccc 	bl	8000b24 <__addsf3>
 800218c:	4603      	mov	r3, r0
 800218e:	461c      	mov	r4, r3
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <main+0x31c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fd79 	bl	8000c8c <__aeabi_i2f>
 800219a:	4603      	mov	r3, r0
 800219c:	4619      	mov	r1, r3
 800219e:	4620      	mov	r0, r4
 80021a0:	f7fe fcc0 	bl	8000b24 <__addsf3>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <main+0x320>)
 80021aa:	601a      	str	r2, [r3, #0]

	    angle_adjusted = MPU_sensor_angle + angle_offset;
 80021ac:	4b8c      	ldr	r3, [pc, #560]	; (80023e0 <main+0x320>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <main+0x324>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7fe fcb4 	bl	8000b24 <__addsf3>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <main+0x30c>)
 80021c2:	601a      	str	r2, [r3, #0]

	    // We calculate the estimated robot speed:
	    // Estimated_Speed = angular_velocity_of_stepper_motors(combined) - angular_velocity_of_robot(angle measured by IMU)
	    actual_robot_speed = (speed_M1 + speed_M2) / 2; // Positive: forward
 80021c4:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <main+0x328>)
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b87      	ldr	r3, [pc, #540]	; (80023ec <main+0x32c>)
 80021ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d2:	4413      	add	r3, r2
 80021d4:	0fda      	lsrs	r2, r3, #31
 80021d6:	4413      	add	r3, r2
 80021d8:	105b      	asrs	r3, r3, #1
 80021da:	b21a      	sxth	r2, r3
 80021dc:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <main+0x330>)
 80021de:	801a      	strh	r2, [r3, #0]

	    int16_t angular_velocity = (angle_adjusted - angle_adjusted_Old) * 25.0; // 25 is an empirical extracted factor to adjust for real units
 80021e0:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <main+0x30c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b7a      	ldr	r3, [pc, #488]	; (80023d0 <main+0x310>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7fe fc98 	bl	8000b20 <__aeabi_fsub>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f910 	bl	8000418 <__aeabi_f2d>
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <main+0x334>)
 80021fe:	f7fe f963 	bl	80004c8 <__aeabi_dmul>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	4618      	mov	r0, r3
 8002208:	4621      	mov	r1, r4
 800220a:	f7fe fc0d 	bl	8000a28 <__aeabi_d2iz>
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
	    int16_t estimated_speed = -actual_robot_speed + angular_velocity;
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <main+0x330>)
 8002216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221a:	b29b      	uxth	r3, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	80bb      	strh	r3, [r7, #4]
	    estimated_speed_filtered = estimated_speed_filtered * 0.9 + (float)estimated_speed * 0.1; // low pass filter on estimated speed
 8002222:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <main+0x338>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f8f6 	bl	8000418 <__aeabi_f2d>
 800222c:	a358      	add	r3, pc, #352	; (adr r3, 8002390 <main+0x2d0>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe f949 	bl	80004c8 <__aeabi_dmul>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	4625      	mov	r5, r4
 800223c:	461c      	mov	r4, r3
 800223e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fd22 	bl	8000c8c <__aeabi_i2f>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f8e4 	bl	8000418 <__aeabi_f2d>
 8002250:	a351      	add	r3, pc, #324	; (adr r3, 8002398 <main+0x2d8>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f937 	bl	80004c8 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4620      	mov	r0, r4
 8002260:	4629      	mov	r1, r5
 8002262:	f7fd ff7b 	bl	800015c <__adddf3>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	4618      	mov	r0, r3
 800226c:	4621      	mov	r1, r4
 800226e:	f7fe fc03 	bl	8000a78 <__aeabi_d2f>
 8002272:	4602      	mov	r2, r0
 8002274:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <main+0x338>)
 8002276:	601a      	str	r2, [r3, #0]

	      // POSITION CONTROL. INPUT: Target steps for each motor. Output: motors speed
	    motor1_control = positionPDControl(steps1, target_steps1, Kp_position, Kd_position, speed_M1);
 8002278:	4b60      	ldr	r3, [pc, #384]	; (80023fc <main+0x33c>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4b60      	ldr	r3, [pc, #384]	; (8002400 <main+0x340>)
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	4b60      	ldr	r3, [pc, #384]	; (8002404 <main+0x344>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b60      	ldr	r3, [pc, #384]	; (8002408 <main+0x348>)
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <main+0x328>)
 800228a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4623      	mov	r3, r4
 8002292:	f7ff fc49 	bl	8001b28 <positionPDControl>
 8002296:	4603      	mov	r3, r0
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe ff11 	bl	80010c0 <__aeabi_f2iz>
 800229e:	4603      	mov	r3, r0
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	4b5a      	ldr	r3, [pc, #360]	; (800240c <main+0x34c>)
 80022a4:	801a      	strh	r2, [r3, #0]
	    motor2_control = positionPDControl(steps2, target_steps2, Kp_position, Kd_position, speed_M2);
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <main+0x350>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <main+0x354>)
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	4b55      	ldr	r3, [pc, #340]	; (8002404 <main+0x344>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b55      	ldr	r3, [pc, #340]	; (8002408 <main+0x348>)
 80022b4:	681c      	ldr	r4, [r3, #0]
 80022b6:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <main+0x32c>)
 80022b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4623      	mov	r3, r4
 80022c0:	f7ff fc32 	bl	8001b28 <positionPDControl>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fefa 	bl	80010c0 <__aeabi_f2iz>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	4b51      	ldr	r3, [pc, #324]	; (8002418 <main+0x358>)
 80022d2:	801a      	strh	r2, [r3, #0]

//	       Convert from motor position control to throttle / steering commands
	    throttle = (motor1_control + motor2_control) / 2;
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <main+0x34c>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b4e      	ldr	r3, [pc, #312]	; (8002418 <main+0x358>)
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	4413      	add	r3, r2
 80022e4:	0fda      	lsrs	r2, r3, #31
 80022e6:	4413      	add	r3, r2
 80022e8:	105b      	asrs	r3, r3, #1
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <main+0x35c>)
 80022ee:	801a      	strh	r2, [r3, #0]
	    throttle = constrain(throttle, -100, 100);
 80022f0:	4b4a      	ldr	r3, [pc, #296]	; (800241c <main+0x35c>)
 80022f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f6:	2264      	movs	r2, #100	; 0x64
 80022f8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fa9e 	bl	800183e <constrain>
 8002302:	4603      	mov	r3, r0
 8002304:	b21a      	sxth	r2, r3
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <main+0x35c>)
 8002308:	801a      	strh	r2, [r3, #0]


	    // ROBOT SPEED CONTROL: This is a PI controller.
	    //    input:user throttle(robot speed), variable: estimated robot speed, output: target robot angle to get the desired speed
	    target_angle = 0;
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <main+0x360>)
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
	    target_angle = speedPIControl(dt, estimated_speed_filtered, throttle, Kp_thr, Ki_thr);
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <main+0x308>)
 8002314:	681c      	ldr	r4, [r3, #0]
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <main+0x338>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fed0 	bl	80010c0 <__aeabi_f2iz>
 8002320:	4603      	mov	r3, r0
 8002322:	b219      	sxth	r1, r3
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <main+0x35c>)
 8002326:	f9b3 2000 	ldrsh.w	r2, [r3]
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <main+0x364>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <main+0x368>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4603      	mov	r3, r0
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff fb96 	bl	8001a68 <speedPIControl>
 800233c:	4602      	mov	r2, r0
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <main+0x360>)
 8002340:	601a      	str	r2, [r3, #0]
	    target_angle = constrain(target_angle, -max_target_angle, max_target_angle); // limited output
 8002342:	4b37      	ldr	r3, [pc, #220]	; (8002420 <main+0x360>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe feba 	bl	80010c0 <__aeabi_f2iz>
 800234c:	4604      	mov	r4, r0
 800234e:	4b37      	ldr	r3, [pc, #220]	; (800242c <main+0x36c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe feb2 	bl	80010c0 <__aeabi_f2iz>
 800235c:	4605      	mov	r5, r0
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <main+0x36c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe feac 	bl	80010c0 <__aeabi_f2iz>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4629      	mov	r1, r5
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fa65 	bl	800183e <constrain>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fc88 	bl	8000c8c <__aeabi_i2f>
 800237c:	4602      	mov	r2, r0
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <main+0x360>)
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e055      	b.n	8002430 <main+0x370>
 8002384:	f3af 8000 	nop.w
 8002388:	a0b5ed8d 	.word	0xa0b5ed8d
 800238c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002390:	cccccccd 	.word	0xcccccccd
 8002394:	3feccccc 	.word	0x3feccccc
 8002398:	9999999a 	.word	0x9999999a
 800239c:	3fb99999 	.word	0x3fb99999
 80023a0:	200003bc 	.word	0x200003bc
 80023a4:	20000448 	.word	0x20000448
 80023a8:	200002e8 	.word	0x200002e8
 80023ac:	20000490 	.word	0x20000490
 80023b0:	20000374 	.word	0x20000374
 80023b4:	2000023c 	.word	0x2000023c
 80023b8:	200000ac 	.word	0x200000ac
 80023bc:	200000b0 	.word	0x200000b0
 80023c0:	20000194 	.word	0x20000194
 80023c4:	20000190 	.word	0x20000190
 80023c8:	200001dc 	.word	0x200001dc
 80023cc:	200001ac 	.word	0x200001ac
 80023d0:	200001d0 	.word	0x200001d0
 80023d4:	20000290 	.word	0x20000290
 80023d8:	20000148 	.word	0x20000148
 80023dc:	20000154 	.word	0x20000154
 80023e0:	200003b8 	.word	0x200003b8
 80023e4:	200000a8 	.word	0x200000a8
 80023e8:	200001ec 	.word	0x200001ec
 80023ec:	200001ee 	.word	0x200001ee
 80023f0:	200001c8 	.word	0x200001c8
 80023f4:	40390000 	.word	0x40390000
 80023f8:	200001d4 	.word	0x200001d4
 80023fc:	2000019c 	.word	0x2000019c
 8002400:	20000160 	.word	0x20000160
 8002404:	2000009c 	.word	0x2000009c
 8002408:	200000a0 	.word	0x200000a0
 800240c:	200001ba 	.word	0x200001ba
 8002410:	20000164 	.word	0x20000164
 8002414:	200001c4 	.word	0x200001c4
 8002418:	200001b4 	.word	0x200001b4
 800241c:	20000180 	.word	0x20000180
 8002420:	2000015c 	.word	0x2000015c
 8002424:	20000098 	.word	0x20000098
 8002428:	20000144 	.word	0x20000144
 800242c:	200000a4 	.word	0x200000a4


//	     Stability control (100Hz loop): This is a PD controller.
//	        input: robot target angle(from SPEED CONTROL), variable: robot angle, output: Motor speed
//	        We integrate the output (sumatory), so the output is really the motor acceleration, not motor speed.
	    control_output += stabilityPDControl(dt, angle_adjusted, target_angle, Kp, Kd);
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <main+0x4e0>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <main+0x4e4>)
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <main+0x4e8>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <main+0x4ec>)
 800243e:	681c      	ldr	r4, [r3, #0]
 8002440:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <main+0x4f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	4623      	mov	r3, r4
 8002448:	f7ff fab2 	bl	80019b0 <stabilityPDControl>
 800244c:	4602      	mov	r2, r0
 800244e:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <main+0x4f4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f7fe fb65 	bl	8000b24 <__addsf3>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <main+0x4f4>)
 8002460:	601a      	str	r2, [r3, #0]
	    control_output = constrain(control_output, -MAX_CONTROL_OUTPUT, MAX_CONTROL_OUTPUT); // Limit max output from control
 8002462:	4b54      	ldr	r3, [pc, #336]	; (80025b4 <main+0x4f4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fe2a 	bl	80010c0 <__aeabi_f2iz>
 800246c:	4603      	mov	r3, r0
 800246e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002472:	4951      	ldr	r1, [pc, #324]	; (80025b8 <main+0x4f8>)
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f9e2 	bl	800183e <constrain>
 800247a:	4603      	mov	r3, r0
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fc05 	bl	8000c8c <__aeabi_i2f>
 8002482:	4602      	mov	r2, r0
 8002484:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <main+0x4f4>)
 8002486:	601a      	str	r2, [r3, #0]

	    // The steering part from the user is injected directly to the output
	    motor1 = control_output + steeringRight;
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <main+0x4fc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fbfd 	bl	8000c8c <__aeabi_i2f>
 8002492:	4602      	mov	r2, r0
 8002494:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <main+0x4f4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7fe fb42 	bl	8000b24 <__addsf3>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fe0c 	bl	80010c0 <__aeabi_f2iz>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <main+0x500>)
 80024ae:	801a      	strh	r2, [r3, #0]
	    motor2 = control_output + steeringLeft ;
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <main+0x504>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fbe9 	bl	8000c8c <__aeabi_i2f>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <main+0x4f4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7fe fb2e 	bl	8000b24 <__addsf3>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fdf8 	bl	80010c0 <__aeabi_f2iz>
 80024d0:	4603      	mov	r3, r0
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <main+0x508>)
 80024d6:	801a      	strh	r2, [r3, #0]

	    // Limit max speed (control output)
	    motor1 = constrain(motor1, -MAX_CONTROL_OUTPUT, MAX_CONTROL_OUTPUT);
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <main+0x500>)
 80024da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024e2:	4935      	ldr	r1, [pc, #212]	; (80025b8 <main+0x4f8>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f9aa 	bl	800183e <constrain>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <main+0x500>)
 80024f0:	801a      	strh	r2, [r3, #0]
	    motor2 = constrain(motor2, -MAX_CONTROL_OUTPUT, MAX_CONTROL_OUTPUT);
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <main+0x508>)
 80024f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024fc:	492e      	ldr	r1, [pc, #184]	; (80025b8 <main+0x4f8>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f99d 	bl	800183e <constrain>
 8002504:	4603      	mov	r3, r0
 8002506:	b21a      	sxth	r2, r3
 8002508:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <main+0x508>)
 800250a:	801a      	strh	r2, [r3, #0]

	    int angle_ready = 70;  // Default angle
 800250c:	2346      	movs	r3, #70	; 0x46
 800250e:	603b      	str	r3, [r7, #0]
	    if ((angle_adjusted < angle_ready) && (angle_adjusted > -angle_ready)) // Is robot ready (upright?)
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f7fe fbbb 	bl	8000c8c <__aeabi_i2f>
 8002516:	4602      	mov	r2, r0
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <main+0x4e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f7fe fdc4 	bl	80010ac <__aeabi_fcmpgt>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <main+0x4ac>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	425b      	negs	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fbac 	bl	8000c8c <__aeabi_i2f>
 8002534:	4602      	mov	r2, r0
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <main+0x4e4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7fe fd97 	bl	8001070 <__aeabi_fcmplt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d011      	beq.n	800256c <main+0x4ac>
	    {
	      // NORMAL MODE
	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);  // Motors enable
 8002548:	2200      	movs	r2, #0
 800254a:	2120      	movs	r1, #32
 800254c:	481f      	ldr	r0, [pc, #124]	; (80025cc <main+0x50c>)
 800254e:	f001 f9fb 	bl	8003948 <HAL_GPIO_WritePin>
	      // NOW we send the commands to the motors
	    	setMotorSpeedM1(motor1);
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <main+0x500>)
 8002554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fb1f 	bl	8001b9c <setMotorSpeedM1>
	    	setMotorSpeedM2(motor2);
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <main+0x508>)
 8002560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fba3 	bl	8001cb0 <setMotorSpeedM2>
 800256a:	e017      	b.n	800259c <main+0x4dc>
	    }
	    else   // Robot not ready (flat), angle > angle_ready => ROBOT OFF
	    {
	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // Disable motors
 800256c:	2201      	movs	r2, #1
 800256e:	2120      	movs	r1, #32
 8002570:	4816      	ldr	r0, [pc, #88]	; (80025cc <main+0x50c>)
 8002572:	f001 f9e9 	bl	8003948 <HAL_GPIO_WritePin>
	    	setMotorSpeedM1(0);
 8002576:	2000      	movs	r0, #0
 8002578:	f7ff fb10 	bl	8001b9c <setMotorSpeedM1>
	    	setMotorSpeedM2(0);
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff fb97 	bl	8001cb0 <setMotorSpeedM2>
	    	steps1 = 0;
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <main+0x510>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
	    	steps2 = 0;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <main+0x514>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
	    	throttle = 0;
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <main+0x518>)
 8002590:	2200      	movs	r2, #0
 8002592:	801a      	strh	r2, [r3, #0]
	    	steering = 0;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <main+0x51c>)
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
  {
 800259c:	e5b6      	b.n	800210c <main+0x4c>
 800259e:	bf00      	nop
 80025a0:	200001dc 	.word	0x200001dc
 80025a4:	200001ac 	.word	0x200001ac
 80025a8:	2000015c 	.word	0x2000015c
 80025ac:	20000090 	.word	0x20000090
 80025b0:	20000094 	.word	0x20000094
 80025b4:	20000170 	.word	0x20000170
 80025b8:	fffffec0 	.word	0xfffffec0
 80025bc:	2000014c 	.word	0x2000014c
 80025c0:	200001b0 	.word	0x200001b0
 80025c4:	20000150 	.word	0x20000150
 80025c8:	20000158 	.word	0x20000158
 80025cc:	40010800 	.word	0x40010800
 80025d0:	2000019c 	.word	0x2000019c
 80025d4:	20000164 	.word	0x20000164
 80025d8:	20000180 	.word	0x20000180
 80025dc:	200001e8 	.word	0x200001e8

080025e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b090      	sub	sp, #64	; 0x40
 80025e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e6:	f107 0318 	add.w	r3, r7, #24
 80025ea:	2228      	movs	r2, #40	; 0x28
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 fe64 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002610:	2301      	movs	r3, #1
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002614:	2302      	movs	r3, #2
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800261e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	4618      	mov	r0, r3
 800262a:	f002 f9ad 	bl	8004988 <HAL_RCC_OscConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002634:	f000 f9f6 	bl	8002a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002638:	230f      	movs	r3, #15
 800263a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263c:	2302      	movs	r3, #2
 800263e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800264a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fc17 	bl	8004e88 <HAL_RCC_ClockConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002660:	f000 f9e0 	bl	8002a24 <Error_Handler>
  }
}
 8002664:	bf00      	nop
 8002666:	3740      	adds	r7, #64	; 0x40
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <MX_I2C1_Init+0x50>)
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <MX_I2C1_Init+0x54>)
 8002674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_I2C1_Init+0x50>)
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <MX_I2C1_Init+0x58>)
 800267a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <MX_I2C1_Init+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_I2C1_Init+0x50>)
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_I2C1_Init+0x50>)
 800268a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800268e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <MX_I2C1_Init+0x50>)
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_I2C1_Init+0x50>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <MX_I2C1_Init+0x50>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_I2C1_Init+0x50>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <MX_I2C1_Init+0x50>)
 80026aa:	f001 f97f 	bl	80039ac <HAL_I2C_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026b4:	f000 f9b6 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000023c 	.word	0x2000023c
 80026c0:	40005400 	.word	0x40005400
 80026c4:	000186a0 	.word	0x000186a0

080026c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <MX_TIM1_Init+0x98>)
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <MX_TIM1_Init+0x9c>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <MX_TIM1_Init+0x98>)
 80026ec:	2223      	movs	r2, #35	; 0x23
 80026ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_TIM1_Init+0x98>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_TIM1_Init+0x98>)
 80026f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_TIM1_Init+0x98>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MX_TIM1_Init+0x98>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_TIM1_Init+0x98>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002710:	4813      	ldr	r0, [pc, #76]	; (8002760 <MX_TIM1_Init+0x98>)
 8002712:	f002 fd55 	bl	80051c0 <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800271c:	f000 f982 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	4619      	mov	r1, r3
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <MX_TIM1_Init+0x98>)
 800272e:	f002 fef1 	bl	8005514 <HAL_TIM_ConfigClockSource>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002738:	f000 f974 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002744:	463b      	mov	r3, r7
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_TIM1_Init+0x98>)
 800274a:	f003 f8bf 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002754:	f000 f966 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200003bc 	.word	0x200003bc
 8002764:	40012c00 	.word	0x40012c00

08002768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277c:	463b      	mov	r3, r7
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <MX_TIM2_Init+0x94>)
 8002786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800278a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <MX_TIM2_Init+0x94>)
 800278e:	2223      	movs	r2, #35	; 0x23
 8002790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_TIM2_Init+0x94>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_TIM2_Init+0x94>)
 800279a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_TIM2_Init+0x94>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <MX_TIM2_Init+0x94>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027ac:	4813      	ldr	r0, [pc, #76]	; (80027fc <MX_TIM2_Init+0x94>)
 80027ae:	f002 fd07 	bl	80051c0 <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027b8:	f000 f934 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <MX_TIM2_Init+0x94>)
 80027ca:	f002 fea3 	bl	8005514 <HAL_TIM_ConfigClockSource>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027d4:	f000 f926 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_TIM2_Init+0x94>)
 80027e6:	f003 f871 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027f0:	f000 f918 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000448 	.word	0x20000448

08002800 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002814:	463b      	mov	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <MX_TIM3_Init+0x94>)
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <MX_TIM3_Init+0x98>)
 8002820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002822:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <MX_TIM3_Init+0x94>)
 8002824:	2247      	movs	r2, #71	; 0x47
 8002826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MX_TIM3_Init+0x94>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <MX_TIM3_Init+0x94>)
 8002830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <MX_TIM3_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <MX_TIM3_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002842:	4814      	ldr	r0, [pc, #80]	; (8002894 <MX_TIM3_Init+0x94>)
 8002844:	f002 fcbc 	bl	80051c0 <HAL_TIM_Base_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800284e:	f000 f8e9 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	4619      	mov	r1, r3
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <MX_TIM3_Init+0x94>)
 8002860:	f002 fe58 	bl	8005514 <HAL_TIM_ConfigClockSource>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800286a:	f000 f8db 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002876:	463b      	mov	r3, r7
 8002878:	4619      	mov	r1, r3
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <MX_TIM3_Init+0x94>)
 800287c:	f003 f826 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002886:	f000 f8cd 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200002e8 	.word	0x200002e8
 8002898:	40000400 	.word	0x40000400

0800289c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <MX_USART1_UART_Init+0x50>)
 80028a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028c2:	220c      	movs	r2, #12
 80028c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_USART1_UART_Init+0x4c>)
 80028d4:	f003 f86a 	bl	80059ac <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028de:	f000 f8a1 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000374 	.word	0x20000374
 80028ec:	40013800 	.word	0x40013800

080028f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <MX_DMA_Init+0x58>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <MX_DMA_Init+0x58>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6153      	str	r3, [r2, #20]
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_DMA_Init+0x58>)
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	200f      	movs	r0, #15
 8002914:	f000 fc77 	bl	8003206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002918:	200f      	movs	r0, #15
 800291a:	f000 fc90 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2010      	movs	r0, #16
 8002924:	f000 fc6f 	bl	8003206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002928:	2010      	movs	r0, #16
 800292a:	f000 fc88 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	2011      	movs	r0, #17
 8002934:	f000 fc67 	bl	8003206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002938:	2011      	movs	r0, #17
 800293a:	f000 fc80 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <MX_GPIO_Init+0xcc>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <MX_GPIO_Init+0xcc>)
 8002966:	f043 0310 	orr.w	r3, r3, #16
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <MX_GPIO_Init+0xcc>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <MX_GPIO_Init+0xcc>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <MX_GPIO_Init+0xcc>)
 800297e:	f043 0320 	orr.w	r3, r3, #32
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <MX_GPIO_Init+0xcc>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <MX_GPIO_Init+0xcc>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <MX_GPIO_Init+0xcc>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <MX_GPIO_Init+0xcc>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <MX_GPIO_Init+0xcc>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <MX_GPIO_Init+0xcc>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_GPIO_Init+0xcc>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029c6:	4815      	ldr	r0, [pc, #84]	; (8002a1c <MX_GPIO_Init+0xd0>)
 80029c8:	f000 ffbe 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80029cc:	2200      	movs	r2, #0
 80029ce:	213e      	movs	r1, #62	; 0x3e
 80029d0:	4813      	ldr	r0, [pc, #76]	; (8002a20 <MX_GPIO_Init+0xd4>)
 80029d2:	f000 ffb9 	bl	8003948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029dc:	2301      	movs	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2302      	movs	r3, #2
 80029e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4619      	mov	r1, r3
 80029ee:	480b      	ldr	r0, [pc, #44]	; (8002a1c <MX_GPIO_Init+0xd0>)
 80029f0:	f000 fe50 	bl	8003694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80029f4:	233e      	movs	r3, #62	; 0x3e
 80029f6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_GPIO_Init+0xd4>)
 8002a0c:	f000 fe42 	bl	8003694 <HAL_GPIO_Init>

}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40010800 	.word	0x40010800

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <Error_Handler+0x6>

08002a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_MspInit+0x60>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_MspInit+0x60>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6193      	str	r3, [r2, #24]
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_MspInit+0x60>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_MspInit+0x60>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_MspInit+0x60>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	61d3      	str	r3, [r2, #28]
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_MspInit+0x60>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002a62:	2006      	movs	r0, #6
 8002a64:	f000 fbc4 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_MspInit+0x64>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_MspInit+0x64>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	f040 8081 	bne.w	8002bb8 <HAL_I2C_MspInit+0x124>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002abc:	f043 0308 	orr.w	r3, r3, #8
 8002ac0:	6193      	str	r3, [r2, #24]
 8002ac2:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4839      	ldr	r0, [pc, #228]	; (8002bc8 <HAL_I2C_MspInit+0x134>)
 8002ae4:	f000 fdd6 	bl	8003694 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002ae8:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <HAL_I2C_MspInit+0x138>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
 8002afe:	4a33      	ldr	r2, [pc, #204]	; (8002bcc <HAL_I2C_MspInit+0x138>)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a2e      	ldr	r2, [pc, #184]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <HAL_I2C_MspInit+0x140>)
 8002b20:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b4e:	4820      	ldr	r0, [pc, #128]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b50:	f000 fb90 	bl	8003274 <HAL_DMA_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002b5a:	f7ff ff63 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
 8002b64:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_I2C_MspInit+0x148>)
 8002b6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b72:	2210      	movs	r2, #16
 8002b74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b9c:	480e      	ldr	r0, [pc, #56]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002b9e:	f000 fb69 	bl	8003274 <HAL_DMA_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_I2C_MspInit+0x118>
    {
      Error_Handler();
 8002ba8:	f7ff ff3c 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_I2C_MspInit+0x144>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb8:	bf00      	nop
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40005400 	.word	0x40005400
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	20000404 	.word	0x20000404
 8002bd4:	40020080 	.word	0x40020080
 8002bd8:	200001f8 	.word	0x200001f8
 8002bdc:	4002006c 	.word	0x4002006c

08002be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_TIM_Base_MspInit+0xac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d114      	bne.n	8002c1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf2:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bfc:	6193      	str	r3, [r2, #24]
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 1);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2019      	movs	r0, #25
 8002c10:	f000 faf9 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c14:	2019      	movs	r0, #25
 8002c16:	f000 fb12 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c1a:	e032      	b.n	8002c82 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d114      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	61d3      	str	r3, [r2, #28]
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8002c3e:	2201      	movs	r2, #1
 8002c40:	2100      	movs	r1, #0
 8002c42:	201c      	movs	r0, #28
 8002c44:	f000 fadf 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c48:	201c      	movs	r0, #28
 8002c4a:	f000 faf8 	bl	800323e <HAL_NVIC_EnableIRQ>
}
 8002c4e:	e018      	b.n	8002c82 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_TIM_Base_MspInit+0xb4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d113      	bne.n	8002c82 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	61d3      	str	r3, [r2, #28]
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	201d      	movs	r0, #29
 8002c78:	f000 fac5 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c7c:	201d      	movs	r0, #29
 8002c7e:	f000 fade 	bl	800323e <HAL_NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40000400 	.word	0x40000400

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a34      	ldr	r2, [pc, #208]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d160      	bne.n	8002d7a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb8:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4a32      	ldr	r2, [pc, #200]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc2:	6193      	str	r3, [r2, #24]
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6193      	str	r3, [r2, #24]
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	f107 0310 	add.w	r3, r7, #16
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4823      	ldr	r0, [pc, #140]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002cfe:	f000 fcc9 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	481d      	ldr	r0, [pc, #116]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002d18:	f000 fcbc 	bl	8003694 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_UART_MspInit+0xfc>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d4e:	4810      	ldr	r0, [pc, #64]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d50:	f000 fa90 	bl	8003274 <HAL_DMA_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002d5a:	f7ff fe63 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	2025      	movs	r0, #37	; 0x25
 8002d70:	f000 fa49 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d74:	2025      	movs	r0, #37	; 0x25
 8002d76:	f000 fa62 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40010800 	.word	0x40010800
 8002d90:	20000330 	.word	0x20000330
 8002d94:	40020058 	.word	0x40020058

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <NMI_Handler+0x4>

08002d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <HardFault_Handler+0x4>

08002da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <MemManage_Handler+0x4>

08002daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <BusFault_Handler+0x4>

08002db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <UsageFault_Handler+0x4>

08002db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dde:	f000 f91f 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA1_Channel5_IRQHandler+0x10>)
 8002dee:	f000 fb4b 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000330 	.word	0x20000330

08002dfc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <DMA1_Channel6_IRQHandler+0x10>)
 8002e02:	f000 fb41 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200001f8 	.word	0x200001f8

08002e10 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <DMA1_Channel7_IRQHandler+0x10>)
 8002e16:	f000 fb37 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000404 	.word	0x20000404

08002e24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e2a:	4818      	ldr	r0, [pc, #96]	; (8002e8c <TIM1_UP_IRQHandler+0x68>)
 8002e2c:	f002 fa6a 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  if (dir_M1 == 0) // If we are not moving we dont generate a pulse
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <TIM1_UP_IRQHandler+0x6c>)
 8002e32:	f993 3000 	ldrsb.w	r3, [r3]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d024      	beq.n	8002e84 <TIM1_UP_IRQHandler+0x60>
    return;
  // We generate 1us STEP pulse
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	4815      	ldr	r0, [pc, #84]	; (8002e94 <TIM1_UP_IRQHandler+0x70>)
 8002e40:	f000 fd82 	bl	8003948 <HAL_GPIO_WritePin>
//  delay_us(100);
//  for (int i=0; i<500; i++){
//	  __NOP();
//  }
   for (int i=0; i<50; i++){
 8002e44:	2300      	movs	r3, #0
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	e003      	b.n	8002e52 <TIM1_UP_IRQHandler+0x2e>
	  __NOP();
 8002e4a:	bf00      	nop
   for (int i=0; i<50; i++){
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b31      	cmp	r3, #49	; 0x31
 8002e56:	ddf8      	ble.n	8002e4a <TIM1_UP_IRQHandler+0x26>
  }
  if (dir_M1 > 0)
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <TIM1_UP_IRQHandler+0x6c>)
 8002e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dd05      	ble.n	8002e6e <TIM1_UP_IRQHandler+0x4a>
    steps1--;
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <TIM1_UP_IRQHandler+0x74>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <TIM1_UP_IRQHandler+0x74>)
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e004      	b.n	8002e78 <TIM1_UP_IRQHandler+0x54>
  else
    steps1++;
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <TIM1_UP_IRQHandler+0x74>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <TIM1_UP_IRQHandler+0x74>)
 8002e76:	6013      	str	r3, [r2, #0]
//  delay_us(300);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	4805      	ldr	r0, [pc, #20]	; (8002e94 <TIM1_UP_IRQHandler+0x70>)
 8002e7e:	f000 fd63 	bl	8003948 <HAL_GPIO_WritePin>
 8002e82:	e000      	b.n	8002e86 <TIM1_UP_IRQHandler+0x62>
    return;
 8002e84:	bf00      	nop

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200003bc 	.word	0x200003bc
 8002e90:	200001b2 	.word	0x200001b2
 8002e94:	40010800 	.word	0x40010800
 8002e98:	2000019c 	.word	0x2000019c

08002e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ea2:	4818      	ldr	r0, [pc, #96]	; (8002f04 <TIM2_IRQHandler+0x68>)
 8002ea4:	f002 fa2e 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (dir_M2 == 0) // If we are not moving we dont generate a pulse
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <TIM2_IRQHandler+0x6c>)
 8002eaa:	f993 3000 	ldrsb.w	r3, [r3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d024      	beq.n	8002efc <TIM2_IRQHandler+0x60>
    return;
  // We generate 1us STEP pulse
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2110      	movs	r1, #16
 8002eb6:	4815      	ldr	r0, [pc, #84]	; (8002f0c <TIM2_IRQHandler+0x70>)
 8002eb8:	f000 fd46 	bl	8003948 <HAL_GPIO_WritePin>
//  delay_us(100);
  for (int i=0; i<50; i++){
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e003      	b.n	8002eca <TIM2_IRQHandler+0x2e>
	  __NOP();
 8002ec2:	bf00      	nop
  for (int i=0; i<50; i++){
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b31      	cmp	r3, #49	; 0x31
 8002ece:	ddf8      	ble.n	8002ec2 <TIM2_IRQHandler+0x26>
  }

//  delay_us(1);
  if (dir_M2 > 0){
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <TIM2_IRQHandler+0x6c>)
 8002ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	dd05      	ble.n	8002ee6 <TIM2_IRQHandler+0x4a>
	  steps2--;
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <TIM2_IRQHandler+0x74>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <TIM2_IRQHandler+0x74>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e004      	b.n	8002ef0 <TIM2_IRQHandler+0x54>
  }
  else{
	  steps2++;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <TIM2_IRQHandler+0x74>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <TIM2_IRQHandler+0x74>)
 8002eee:	6013      	str	r3, [r2, #0]
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	4805      	ldr	r0, [pc, #20]	; (8002f0c <TIM2_IRQHandler+0x70>)
 8002ef6:	f000 fd27 	bl	8003948 <HAL_GPIO_WritePin>
 8002efa:	e000      	b.n	8002efe <TIM2_IRQHandler+0x62>
    return;
 8002efc:	bf00      	nop

//  delay_us(300);

  /* USER CODE END TIM2_IRQn 1 */
}
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000448 	.word	0x20000448
 8002f08:	200001e4 	.word	0x200001e4
 8002f0c:	40010800 	.word	0x40010800
 8002f10:	20000164 	.word	0x20000164

08002f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <TIM3_IRQHandler+0x10>)
 8002f1a:	f002 f9f3 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200002e8 	.word	0x200002e8

08002f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <USART1_IRQHandler+0x10>)
 8002f2e:	f002 fdbb 	bl	8005aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000374 	.word	0x20000374

08002f3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f48:	480c      	ldr	r0, [pc, #48]	; (8002f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f4a:	490d      	ldr	r1, [pc, #52]	; (8002f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f60:	4c0a      	ldr	r4, [pc, #40]	; (8002f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f6e:	f7ff ffe5 	bl	8002f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f72:	f003 f97f 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f76:	f7ff f8a3 	bl	80020c0 <main>
  bx lr
 8002f7a:	4770      	bx	lr
  ldr r0, =_sdata
 8002f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f80:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8002f84:	08006a48 	.word	0x08006a48
  ldr r2, =_sbss
 8002f88:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8002f8c:	20000498 	.word	0x20000498

08002f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <ADC1_2_IRQHandler>
	...

08002f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_Init+0x28>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_Init+0x28>)
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 f923 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 f808 	bl	8002fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7ff fd3c 	bl	8002a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_InitTick+0x54>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x58>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f93b 	bl	800325a <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f000 f903 	bl	8003206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_InitTick+0x5c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200000b4 	.word	0x200000b4
 8003018:	200000bc 	.word	0x200000bc
 800301c:	200000b8 	.word	0x200000b8

08003020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_IncTick+0x1c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_IncTick+0x20>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <HAL_IncTick+0x20>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	200000bc 	.word	0x200000bc
 8003040:	20000494 	.word	0x20000494

08003044 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return uwTick;
 8003048:	4b02      	ldr	r3, [pc, #8]	; (8003054 <HAL_GetTick+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	20000494 	.word	0x20000494

08003058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003074:	4013      	ands	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	60d3      	str	r3, [r2, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <__NVIC_GetPriorityGrouping+0x18>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	f003 0307 	and.w	r3, r3, #7
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db0b      	blt.n	80030e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4906      	ldr	r1, [pc, #24]	; (80030f0 <__NVIC_EnableIRQ+0x34>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2001      	movs	r0, #1
 80030de:	fa00 f202 	lsl.w	r2, r0, r2
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031bc:	d301      	bcc.n	80031c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <SysTick_Config+0x40>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ca:	210f      	movs	r1, #15
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	f7ff ff90 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <SysTick_Config+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	; (80031ec <SysTick_Config+0x40>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff2d 	bl	8003058 <__NVIC_SetPriorityGrouping>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff42 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff90 	bl	8003148 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5f 	bl	80030f4 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff35 	bl	80030bc <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa2 	bl	80031ac <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e043      	b.n	8003312 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_DMA_Init+0xa8>)
 8003292:	4413      	add	r3, r2
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_DMA_Init+0xac>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	009a      	lsls	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_DMA_Init+0xb0>)
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	bffdfff8 	.word	0xbffdfff8
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	40020000 	.word	0x40020000

08003328 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800333a:	2b02      	cmp	r3, #2
 800333c:	d008      	beq.n	8003350 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2204      	movs	r2, #4
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e020      	b.n	8003392 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 020e 	bic.w	r2, r2, #14
 800335e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d005      	beq.n	80033be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2204      	movs	r2, #4
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e051      	b.n	8003462 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 020e 	bic.w	r2, r2, #14
 80033cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_DMA_Abort_IT+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d029      	beq.n	800343c <HAL_DMA_Abort_IT+0xa0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <HAL_DMA_Abort_IT+0xd4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <HAL_DMA_Abort_IT+0x9c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_DMA_Abort_IT+0xd8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01a      	beq.n	8003432 <HAL_DMA_Abort_IT+0x96>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <HAL_DMA_Abort_IT+0xdc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d012      	beq.n	800342c <HAL_DMA_Abort_IT+0x90>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1c      	ldr	r2, [pc, #112]	; (800347c <HAL_DMA_Abort_IT+0xe0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00a      	beq.n	8003426 <HAL_DMA_Abort_IT+0x8a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_DMA_Abort_IT+0xe4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d102      	bne.n	8003420 <HAL_DMA_Abort_IT+0x84>
 800341a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800341e:	e00e      	b.n	800343e <HAL_DMA_Abort_IT+0xa2>
 8003420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003424:	e00b      	b.n	800343e <HAL_DMA_Abort_IT+0xa2>
 8003426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800342a:	e008      	b.n	800343e <HAL_DMA_Abort_IT+0xa2>
 800342c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003430:	e005      	b.n	800343e <HAL_DMA_Abort_IT+0xa2>
 8003432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003436:	e002      	b.n	800343e <HAL_DMA_Abort_IT+0xa2>
 8003438:	2310      	movs	r3, #16
 800343a:	e000      	b.n	800343e <HAL_DMA_Abort_IT+0xa2>
 800343c:	2301      	movs	r3, #1
 800343e:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HAL_DMA_Abort_IT+0xe8>)
 8003440:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
    } 
  }
  return status;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40020008 	.word	0x40020008
 8003470:	4002001c 	.word	0x4002001c
 8003474:	40020030 	.word	0x40020030
 8003478:	40020044 	.word	0x40020044
 800347c:	40020058 	.word	0x40020058
 8003480:	4002006c 	.word	0x4002006c
 8003484:	40020000 	.word	0x40020000

08003488 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2204      	movs	r2, #4
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04f      	beq.n	8003550 <HAL_DMA_IRQHandler+0xc8>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d04a      	beq.n	8003550 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0204 	bic.w	r2, r2, #4
 80034d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a66      	ldr	r2, [pc, #408]	; (8003678 <HAL_DMA_IRQHandler+0x1f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d029      	beq.n	8003536 <HAL_DMA_IRQHandler+0xae>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_DMA_IRQHandler+0x1f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0xaa>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a63      	ldr	r2, [pc, #396]	; (8003680 <HAL_DMA_IRQHandler+0x1f8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01a      	beq.n	800352c <HAL_DMA_IRQHandler+0xa4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a62      	ldr	r2, [pc, #392]	; (8003684 <HAL_DMA_IRQHandler+0x1fc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d012      	beq.n	8003526 <HAL_DMA_IRQHandler+0x9e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a60      	ldr	r2, [pc, #384]	; (8003688 <HAL_DMA_IRQHandler+0x200>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00a      	beq.n	8003520 <HAL_DMA_IRQHandler+0x98>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5f      	ldr	r2, [pc, #380]	; (800368c <HAL_DMA_IRQHandler+0x204>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <HAL_DMA_IRQHandler+0x92>
 8003514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003518:	e00e      	b.n	8003538 <HAL_DMA_IRQHandler+0xb0>
 800351a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800351e:	e00b      	b.n	8003538 <HAL_DMA_IRQHandler+0xb0>
 8003520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003524:	e008      	b.n	8003538 <HAL_DMA_IRQHandler+0xb0>
 8003526:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800352a:	e005      	b.n	8003538 <HAL_DMA_IRQHandler+0xb0>
 800352c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003530:	e002      	b.n	8003538 <HAL_DMA_IRQHandler+0xb0>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	e000      	b.n	8003538 <HAL_DMA_IRQHandler+0xb0>
 8003536:	2304      	movs	r3, #4
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_DMA_IRQHandler+0x208>)
 800353a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8094 	beq.w	800366e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800354e:	e08e      	b.n	800366e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2202      	movs	r2, #2
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d056      	beq.n	800360e <HAL_DMA_IRQHandler+0x186>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d051      	beq.n	800360e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 020a 	bic.w	r2, r2, #10
 8003586:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_DMA_IRQHandler+0x1f0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d029      	beq.n	80035ee <HAL_DMA_IRQHandler+0x166>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a37      	ldr	r2, [pc, #220]	; (800367c <HAL_DMA_IRQHandler+0x1f4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_IRQHandler+0x162>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a35      	ldr	r2, [pc, #212]	; (8003680 <HAL_DMA_IRQHandler+0x1f8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01a      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x15c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_DMA_IRQHandler+0x1fc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d012      	beq.n	80035de <HAL_DMA_IRQHandler+0x156>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a32      	ldr	r2, [pc, #200]	; (8003688 <HAL_DMA_IRQHandler+0x200>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x150>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a31      	ldr	r2, [pc, #196]	; (800368c <HAL_DMA_IRQHandler+0x204>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x14a>
 80035cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035d0:	e00e      	b.n	80035f0 <HAL_DMA_IRQHandler+0x168>
 80035d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d6:	e00b      	b.n	80035f0 <HAL_DMA_IRQHandler+0x168>
 80035d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035dc:	e008      	b.n	80035f0 <HAL_DMA_IRQHandler+0x168>
 80035de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035e2:	e005      	b.n	80035f0 <HAL_DMA_IRQHandler+0x168>
 80035e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e8:	e002      	b.n	80035f0 <HAL_DMA_IRQHandler+0x168>
 80035ea:	2320      	movs	r3, #32
 80035ec:	e000      	b.n	80035f0 <HAL_DMA_IRQHandler+0x168>
 80035ee:	2302      	movs	r3, #2
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_DMA_IRQHandler+0x208>)
 80035f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d034      	beq.n	800366e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800360c:	e02f      	b.n	800366e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2208      	movs	r2, #8
 8003614:	409a      	lsls	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_DMA_IRQHandler+0x1e8>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d023      	beq.n	8003670 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 020e 	bic.w	r2, r2, #14
 8003636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f202 	lsl.w	r2, r1, r2
 8003646:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
    }
  }
  return;
 800366e:	bf00      	nop
 8003670:	bf00      	nop
}
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40020008 	.word	0x40020008
 800367c:	4002001c 	.word	0x4002001c
 8003680:	40020030 	.word	0x40020030
 8003684:	40020044 	.word	0x40020044
 8003688:	40020058 	.word	0x40020058
 800368c:	4002006c 	.word	0x4002006c
 8003690:	40020000 	.word	0x40020000

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b08b      	sub	sp, #44	; 0x2c
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a6:	e127      	b.n	80038f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036a8:	2201      	movs	r2, #1
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	f040 8116 	bne.w	80038f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d034      	beq.n	8003738 <HAL_GPIO_Init+0xa4>
 80036ce:	2b12      	cmp	r3, #18
 80036d0:	d80d      	bhi.n	80036ee <HAL_GPIO_Init+0x5a>
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d02b      	beq.n	800372e <HAL_GPIO_Init+0x9a>
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d804      	bhi.n	80036e4 <HAL_GPIO_Init+0x50>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d031      	beq.n	8003742 <HAL_GPIO_Init+0xae>
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d01c      	beq.n	800371c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036e2:	e048      	b.n	8003776 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d043      	beq.n	8003770 <HAL_GPIO_Init+0xdc>
 80036e8:	2b11      	cmp	r3, #17
 80036ea:	d01b      	beq.n	8003724 <HAL_GPIO_Init+0x90>
          break;
 80036ec:	e043      	b.n	8003776 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036ee:	4a89      	ldr	r2, [pc, #548]	; (8003914 <HAL_GPIO_Init+0x280>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d026      	beq.n	8003742 <HAL_GPIO_Init+0xae>
 80036f4:	4a87      	ldr	r2, [pc, #540]	; (8003914 <HAL_GPIO_Init+0x280>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d806      	bhi.n	8003708 <HAL_GPIO_Init+0x74>
 80036fa:	4a87      	ldr	r2, [pc, #540]	; (8003918 <HAL_GPIO_Init+0x284>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d020      	beq.n	8003742 <HAL_GPIO_Init+0xae>
 8003700:	4a86      	ldr	r2, [pc, #536]	; (800391c <HAL_GPIO_Init+0x288>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_GPIO_Init+0xae>
          break;
 8003706:	e036      	b.n	8003776 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003708:	4a85      	ldr	r2, [pc, #532]	; (8003920 <HAL_GPIO_Init+0x28c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_Init+0xae>
 800370e:	4a85      	ldr	r2, [pc, #532]	; (8003924 <HAL_GPIO_Init+0x290>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d016      	beq.n	8003742 <HAL_GPIO_Init+0xae>
 8003714:	4a84      	ldr	r2, [pc, #528]	; (8003928 <HAL_GPIO_Init+0x294>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0xae>
          break;
 800371a:	e02c      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	623b      	str	r3, [r7, #32]
          break;
 8003722:	e028      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	3304      	adds	r3, #4
 800372a:	623b      	str	r3, [r7, #32]
          break;
 800372c:	e023      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	3308      	adds	r3, #8
 8003734:	623b      	str	r3, [r7, #32]
          break;
 8003736:	e01e      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	330c      	adds	r3, #12
 800373e:	623b      	str	r3, [r7, #32]
          break;
 8003740:	e019      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800374a:	2304      	movs	r3, #4
 800374c:	623b      	str	r3, [r7, #32]
          break;
 800374e:	e012      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003758:	2308      	movs	r3, #8
 800375a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	611a      	str	r2, [r3, #16]
          break;
 8003762:	e008      	b.n	8003776 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003764:	2308      	movs	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	615a      	str	r2, [r3, #20]
          break;
 800376e:	e002      	b.n	8003776 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
          break;
 8003774:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2bff      	cmp	r3, #255	; 0xff
 800377a:	d801      	bhi.n	8003780 <HAL_GPIO_Init+0xec>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	e001      	b.n	8003784 <HAL_GPIO_Init+0xf0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2bff      	cmp	r3, #255	; 0xff
 800378a:	d802      	bhi.n	8003792 <HAL_GPIO_Init+0xfe>
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	e002      	b.n	8003798 <HAL_GPIO_Init+0x104>
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	3b08      	subs	r3, #8
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	210f      	movs	r1, #15
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	401a      	ands	r2, r3
 80037aa:	6a39      	ldr	r1, [r7, #32]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	431a      	orrs	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8096 	beq.w	80038f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037c6:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_GPIO_Init+0x298>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_GPIO_Init+0x298>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6193      	str	r3, [r2, #24]
 80037d2:	4b56      	ldr	r3, [pc, #344]	; (800392c <HAL_GPIO_Init+0x298>)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037de:	4a54      	ldr	r2, [pc, #336]	; (8003930 <HAL_GPIO_Init+0x29c>)
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <HAL_GPIO_Init+0x2a0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x19e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4a      	ldr	r2, [pc, #296]	; (8003938 <HAL_GPIO_Init+0x2a4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x19a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <HAL_GPIO_Init+0x2a8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x196>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a48      	ldr	r2, [pc, #288]	; (8003940 <HAL_GPIO_Init+0x2ac>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x192>
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x1a0>
 8003826:	2304      	movs	r3, #4
 8003828:	e004      	b.n	8003834 <HAL_GPIO_Init+0x1a0>
 800382a:	2302      	movs	r3, #2
 800382c:	e002      	b.n	8003834 <HAL_GPIO_Init+0x1a0>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x1a0>
 8003832:	2300      	movs	r3, #0
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	f002 0203 	and.w	r2, r2, #3
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	4093      	lsls	r3, r2
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003844:	493a      	ldr	r1, [pc, #232]	; (8003930 <HAL_GPIO_Init+0x29c>)
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800385e:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4938      	ldr	r1, [pc, #224]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
 800386a:	e006      	b.n	800387a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	43db      	mvns	r3, r3
 8003874:	4933      	ldr	r1, [pc, #204]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 8003876:	4013      	ands	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003886:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	492e      	ldr	r1, [pc, #184]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	43db      	mvns	r3, r3
 800389c:	4929      	ldr	r1, [pc, #164]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 800389e:	4013      	ands	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	4924      	ldr	r1, [pc, #144]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
 80038ba:	e006      	b.n	80038ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	491f      	ldr	r1, [pc, #124]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	491a      	ldr	r1, [pc, #104]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60cb      	str	r3, [r1, #12]
 80038e2:	e006      	b.n	80038f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4915      	ldr	r1, [pc, #84]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f aed0 	bne.w	80036a8 <HAL_GPIO_Init+0x14>
  }
}
 8003908:	bf00      	nop
 800390a:	372c      	adds	r7, #44	; 0x2c
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	10210000 	.word	0x10210000
 8003918:	10110000 	.word	0x10110000
 800391c:	10120000 	.word	0x10120000
 8003920:	10310000 	.word	0x10310000
 8003924:	10320000 	.word	0x10320000
 8003928:	10220000 	.word	0x10220000
 800392c:	40021000 	.word	0x40021000
 8003930:	40010000 	.word	0x40010000
 8003934:	40010800 	.word	0x40010800
 8003938:	40010c00 	.word	0x40010c00
 800393c:	40011000 	.word	0x40011000
 8003940:	40011400 	.word	0x40011400
 8003944:	40010400 	.word	0x40010400

08003948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
 8003954:	4613      	mov	r3, r2
 8003956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003958:	787b      	ldrb	r3, [r7, #1]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003964:	e003      	b.n	800396e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	041a      	lsls	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43d9      	mvns	r1, r3
 8003996:	887b      	ldrh	r3, [r7, #2]
 8003998:	400b      	ands	r3, r1
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	611a      	str	r2, [r3, #16]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e11f      	b.n	8003bfe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff f85e 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	; 0x24
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a10:	f001 fb90 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8003a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a7b      	ldr	r2, [pc, #492]	; (8003c08 <HAL_I2C_Init+0x25c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d807      	bhi.n	8003a30 <HAL_I2C_Init+0x84>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a7a      	ldr	r2, [pc, #488]	; (8003c0c <HAL_I2C_Init+0x260>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	bf94      	ite	ls
 8003a28:	2301      	movls	r3, #1
 8003a2a:	2300      	movhi	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e006      	b.n	8003a3e <HAL_I2C_Init+0x92>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a77      	ldr	r2, [pc, #476]	; (8003c10 <HAL_I2C_Init+0x264>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bf94      	ite	ls
 8003a38:	2301      	movls	r3, #1
 8003a3a:	2300      	movhi	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0db      	b.n	8003bfe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a72      	ldr	r2, [pc, #456]	; (8003c14 <HAL_I2C_Init+0x268>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0c9b      	lsrs	r3, r3, #18
 8003a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4a64      	ldr	r2, [pc, #400]	; (8003c08 <HAL_I2C_Init+0x25c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d802      	bhi.n	8003a80 <HAL_I2C_Init+0xd4>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	e009      	b.n	8003a94 <HAL_I2C_Init+0xe8>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_I2C_Init+0x26c>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	3301      	adds	r3, #1
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4956      	ldr	r1, [pc, #344]	; (8003c08 <HAL_I2C_Init+0x25c>)
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	d80d      	bhi.n	8003ad0 <HAL_I2C_Init+0x124>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e59      	subs	r1, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	bf38      	it	cc
 8003acc:	2304      	movcc	r3, #4
 8003ace:	e04f      	b.n	8003b70 <HAL_I2C_Init+0x1c4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d111      	bne.n	8003afc <HAL_I2C_Init+0x150>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e012      	b.n	8003b22 <HAL_I2C_Init+0x176>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	0099      	lsls	r1, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x17e>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e022      	b.n	8003b70 <HAL_I2C_Init+0x1c4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10e      	bne.n	8003b50 <HAL_I2C_Init+0x1a4>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e58      	subs	r0, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	e00f      	b.n	8003b70 <HAL_I2C_Init+0x1c4>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	0099      	lsls	r1, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	6809      	ldr	r1, [r1, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6911      	ldr	r1, [r2, #16]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	000186a0 	.word	0x000186a0
 8003c0c:	001e847f 	.word	0x001e847f
 8003c10:	003d08ff 	.word	0x003d08ff
 8003c14:	431bde83 	.word	0x431bde83
 8003c18:	10624dd3 	.word	0x10624dd3

08003c1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c36:	f7ff fa05 	bl	8003044 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	f040 80d9 	bne.w	8003dfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2319      	movs	r3, #25
 8003c50:	2201      	movs	r2, #1
 8003c52:	496d      	ldr	r1, [pc, #436]	; (8003e08 <HAL_I2C_Mem_Write+0x1ec>)
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fcbb 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
 8003c62:	e0cc      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Mem_Write+0x56>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0c5      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d007      	beq.n	8003c98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2221      	movs	r2, #33	; 0x21
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a4d      	ldr	r2, [pc, #308]	; (8003e0c <HAL_I2C_Mem_Write+0x1f0>)
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cda:	88f8      	ldrh	r0, [r7, #6]
 8003cdc:	893a      	ldrh	r2, [r7, #8]
 8003cde:	8979      	ldrh	r1, [r7, #10]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	4603      	mov	r3, r0
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 faf2 	bl	80042d4 <I2C_RequestMemoryWrite>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d052      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e081      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fd3c 	bl	800477c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d107      	bne.n	8003d22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06b      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d11b      	bne.n	8003d9c <HAL_I2C_Mem_Write+0x180>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1aa      	bne.n	8003cfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fd28 	bl	80047fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d107      	bne.n	8003dcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e016      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	00100002 	.word	0x00100002
 8003e0c:	ffff0000 	.word	0xffff0000

08003e10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08c      	sub	sp, #48	; 0x30
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7ff f909 	bl	8003044 <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 823d 	bne.w	80042bc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4981      	ldr	r1, [pc, #516]	; (8004050 <HAL_I2C_Mem_Read+0x240>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fbbf 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e230      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x5a>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e229      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2222      	movs	r2, #34	; 0x22
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a61      	ldr	r2, [pc, #388]	; (8004054 <HAL_I2C_Mem_Read+0x244>)
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed2:	88f8      	ldrh	r0, [r7, #6]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa8c 	bl	8004400 <I2C_RequestMemoryRead>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1e5      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e1b9      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d11d      	bne.n	8003f66 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f62:	b662      	cpsie	i
 8003f64:	e197      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d11d      	bne.n	8003faa <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fa6:	b662      	cpsie	i
 8003fa8:	e175      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fd0:	e161      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	f200 811a 	bhi.w	8004210 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d123      	bne.n	800402c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fc49 	bl	8004880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e162      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402a:	e134      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b02      	cmp	r3, #2
 8004032:	d150      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	2200      	movs	r2, #0
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <HAL_I2C_Mem_Read+0x248>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fac6 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e137      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000
 8004058:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800405c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040a0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d4:	e0df      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	2200      	movs	r2, #0
 80040de:	497a      	ldr	r1, [pc, #488]	; (80042c8 <HAL_I2C_Mem_Read+0x4b8>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fa75 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0e6      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004100:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004134:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_I2C_Mem_Read+0x4bc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_I2C_Mem_Read+0x4c0>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0a1a      	lsrs	r2, r3, #8
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00da      	lsls	r2, r3, #3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	3b01      	subs	r3, #1
 8004152:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d117      	bne.n	800418a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800417c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e099      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d1da      	bne.n	800414e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041da:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800420e:	e042      	b.n	8004296 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fb33 	bl	8004880 <I2C_WaitOnRXNEFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e04c      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b04      	cmp	r3, #4
 8004262:	d118      	bne.n	8004296 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	f47f ae99 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3728      	adds	r7, #40	; 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	00010004 	.word	0x00010004
 80042cc:	200000b4 	.word	0x200000b4
 80042d0:	14f8b589 	.word	0x14f8b589

080042d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	2200      	movs	r2, #0
 8004306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f960 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004324:	d103      	bne.n	800432e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e05f      	b.n	80043f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	6a3a      	ldr	r2, [r7, #32]
 8004346:	492d      	ldr	r1, [pc, #180]	; (80043fc <I2C_RequestMemoryWrite+0x128>)
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f998 	bl	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e04c      	b.n	80043f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	6a39      	ldr	r1, [r7, #32]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fa02 	bl	800477c <I2C_WaitOnTXEFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b04      	cmp	r3, #4
 8004384:	d107      	bne.n	8004396 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e02b      	b.n	80043f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a0:	893b      	ldrh	r3, [r7, #8]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	611a      	str	r2, [r3, #16]
 80043aa:	e021      	b.n	80043f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043ac:	893b      	ldrh	r3, [r7, #8]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	6a39      	ldr	r1, [r7, #32]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f9dc 	bl	800477c <I2C_WaitOnTXEFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d107      	bne.n	80043e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e005      	b.n	80043f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e6:	893b      	ldrh	r3, [r7, #8]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	00010002 	.word	0x00010002

08004400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4603      	mov	r3, r0
 8004410:	817b      	strh	r3, [r7, #10]
 8004412:	460b      	mov	r3, r1
 8004414:	813b      	strh	r3, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	2200      	movs	r2, #0
 8004442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8c2 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004460:	d103      	bne.n	800446a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e0aa      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800446e:	897b      	ldrh	r3, [r7, #10]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800447c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	4952      	ldr	r1, [pc, #328]	; (80045cc <I2C_RequestMemoryRead+0x1cc>)
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f8fa 	bl	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e097      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ac:	6a39      	ldr	r1, [r7, #32]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f964 	bl	800477c <I2C_WaitOnTXEFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00d      	beq.n	80044d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d107      	bne.n	80044d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e076      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d105      	bne.n	80044e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044dc:	893b      	ldrh	r3, [r7, #8]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]
 80044e6:	e021      	b.n	800452c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	6a39      	ldr	r1, [r7, #32]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f93e 	bl	800477c <I2C_WaitOnTXEFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b04      	cmp	r3, #4
 800450c:	d107      	bne.n	800451e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e050      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004522:	893b      	ldrh	r3, [r7, #8]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	6a39      	ldr	r1, [r7, #32]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f923 	bl	800477c <I2C_WaitOnTXEFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	2b04      	cmp	r3, #4
 8004542:	d107      	bne.n	8004554 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e035      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004566:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2200      	movs	r2, #0
 8004570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f82b 	bl	80045d0 <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d103      	bne.n	8004598 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e013      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800459c:	897b      	ldrh	r3, [r7, #10]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	4906      	ldr	r1, [pc, #24]	; (80045cc <I2C_RequestMemoryRead+0x1cc>)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f863 	bl	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	00010002 	.word	0x00010002

080045d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e0:	e025      	b.n	800462e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d021      	beq.n	800462e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fe fd2b 	bl	8003044 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d116      	bne.n	800462e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e023      	b.n	8004676 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d10d      	bne.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	43da      	mvns	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	e00c      	b.n	800466e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	43da      	mvns	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d0b6      	beq.n	80045e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800468c:	e051      	b.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469c:	d123      	bne.n	80046e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0204 	orr.w	r2, r3, #4
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e046      	b.n	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d021      	beq.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fe fca9 	bl	8003044 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d116      	bne.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e020      	b.n	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10c      	bne.n	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	e00b      	b.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d18d      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004788:	e02d      	b.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8ce 	bl	800492c <I2C_IsAcknowledgeFailed>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e02d      	b.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d021      	beq.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fe fc4f 	bl	8003044 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d116      	bne.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e007      	b.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d1ca      	bne.n	800478a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800480a:	e02d      	b.n	8004868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f88d 	bl	800492c <I2C_IsAcknowledgeFailed>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e02d      	b.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d021      	beq.n	8004868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004824:	f7fe fc0e 	bl	8003044 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	d302      	bcc.n	800483a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e007      	b.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d1ca      	bne.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800488c:	e042      	b.n	8004914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d119      	bne.n	80048d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0210 	mvn.w	r2, #16
 80048a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e029      	b.n	8004924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d0:	f7fe fbb8 	bl	8003044 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d116      	bne.n	8004914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e007      	b.n	8004924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d1b5      	bne.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004942:	d11b      	bne.n	800497c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800494c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0204 	orr.w	r2, r3, #4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e26c      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8087 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049a8:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d00c      	beq.n	80049ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049b4:	4b8f      	ldr	r3, [pc, #572]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 030c 	and.w	r3, r3, #12
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d112      	bne.n	80049e6 <HAL_RCC_OscConfig+0x5e>
 80049c0:	4b8c      	ldr	r3, [pc, #560]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d10b      	bne.n	80049e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ce:	4b89      	ldr	r3, [pc, #548]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d06c      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x12c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d168      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e246      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x76>
 80049f0:	4b80      	ldr	r3, [pc, #512]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7f      	ldr	r2, [pc, #508]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	e02e      	b.n	8004a5c <HAL_RCC_OscConfig+0xd4>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x98>
 8004a06:	4b7b      	ldr	r3, [pc, #492]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7a      	ldr	r2, [pc, #488]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b78      	ldr	r3, [pc, #480]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a77      	ldr	r2, [pc, #476]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e01d      	b.n	8004a5c <HAL_RCC_OscConfig+0xd4>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0xbc>
 8004a2a:	4b72      	ldr	r3, [pc, #456]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a71      	ldr	r2, [pc, #452]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b6f      	ldr	r3, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0xd4>
 8004a44:	4b6b      	ldr	r3, [pc, #428]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6a      	ldr	r2, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b68      	ldr	r3, [pc, #416]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a67      	ldr	r2, [pc, #412]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fe faee 	bl	8003044 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fe faea 	bl	8003044 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	; 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1fa      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b5d      	ldr	r3, [pc, #372]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0xe4>
 8004a8a:	e014      	b.n	8004ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fada 	bl	8003044 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fe fad6 	bl	8003044 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e1e6      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	4b53      	ldr	r3, [pc, #332]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x10c>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ac2:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ace:	4b49      	ldr	r3, [pc, #292]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d11c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x18c>
 8004ada:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d116      	bne.n	8004b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae6:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_RCC_OscConfig+0x176>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e1ba      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afe:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4939      	ldr	r1, [pc, #228]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b12:	e03a      	b.n	8004b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b22:	f7fe fa8f 	bl	8003044 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fa8b 	bl	8003044 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e19b      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b2a      	ldr	r3, [pc, #168]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4927      	ldr	r1, [pc, #156]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	e015      	b.n	8004b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <HAL_RCC_OscConfig+0x270>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe fa6e 	bl	8003044 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fe fa6a 	bl	8003044 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e17a      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d03a      	beq.n	8004c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d019      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <HAL_RCC_OscConfig+0x274>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba4:	f7fe fa4e 	bl	8003044 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bac:	f7fe fa4a 	bl	8003044 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e15a      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f000 fada 	bl	8005184 <RCC_Delay>
 8004bd0:	e01c      	b.n	8004c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_RCC_OscConfig+0x274>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd8:	f7fe fa34 	bl	8003044 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bde:	e00f      	b.n	8004c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fe fa30 	bl	8003044 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d908      	bls.n	8004c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e140      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	42420000 	.word	0x42420000
 8004bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	4b9e      	ldr	r3, [pc, #632]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e9      	bne.n	8004be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80a6 	beq.w	8004d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1e:	4b97      	ldr	r3, [pc, #604]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10d      	bne.n	8004c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2a:	4b94      	ldr	r3, [pc, #592]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4a93      	ldr	r2, [pc, #588]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	61d3      	str	r3, [r2, #28]
 8004c36:	4b91      	ldr	r3, [pc, #580]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c46:	4b8e      	ldr	r3, [pc, #568]	; (8004e80 <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d118      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c52:	4b8b      	ldr	r3, [pc, #556]	; (8004e80 <HAL_RCC_OscConfig+0x4f8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a8a      	ldr	r2, [pc, #552]	; (8004e80 <HAL_RCC_OscConfig+0x4f8>)
 8004c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5e:	f7fe f9f1 	bl	8003044 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c66:	f7fe f9ed 	bl	8003044 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b64      	cmp	r3, #100	; 0x64
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0fd      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c78:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <HAL_RCC_OscConfig+0x4f8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCC_OscConfig+0x312>
 8004c8c:	4b7b      	ldr	r3, [pc, #492]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	4a7a      	ldr	r2, [pc, #488]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6213      	str	r3, [r2, #32]
 8004c98:	e02d      	b.n	8004cf6 <HAL_RCC_OscConfig+0x36e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x334>
 8004ca2:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4a75      	ldr	r2, [pc, #468]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6213      	str	r3, [r2, #32]
 8004cae:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4a72      	ldr	r2, [pc, #456]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	6213      	str	r3, [r2, #32]
 8004cba:	e01c      	b.n	8004cf6 <HAL_RCC_OscConfig+0x36e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b05      	cmp	r3, #5
 8004cc2:	d10c      	bne.n	8004cde <HAL_RCC_OscConfig+0x356>
 8004cc4:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4a6c      	ldr	r2, [pc, #432]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	6213      	str	r3, [r2, #32]
 8004cd0:	4b6a      	ldr	r3, [pc, #424]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	4a69      	ldr	r2, [pc, #420]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	6213      	str	r3, [r2, #32]
 8004cdc:	e00b      	b.n	8004cf6 <HAL_RCC_OscConfig+0x36e>
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	4a66      	ldr	r2, [pc, #408]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	6213      	str	r3, [r2, #32]
 8004cea:	4b64      	ldr	r3, [pc, #400]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4a63      	ldr	r2, [pc, #396]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d015      	beq.n	8004d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfe:	f7fe f9a1 	bl	8003044 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d04:	e00a      	b.n	8004d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fe f99d 	bl	8003044 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0ab      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ee      	beq.n	8004d06 <HAL_RCC_OscConfig+0x37e>
 8004d28:	e014      	b.n	8004d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe f98b 	bl	8003044 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fe f987 	bl	8003044 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e095      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d48:	4b4c      	ldr	r3, [pc, #304]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1ee      	bne.n	8004d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5a:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	4a47      	ldr	r2, [pc, #284]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8081 	beq.w	8004e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d70:	4b42      	ldr	r3, [pc, #264]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d061      	beq.n	8004e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d146      	bne.n	8004e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d84:	4b3f      	ldr	r3, [pc, #252]	; (8004e84 <HAL_RCC_OscConfig+0x4fc>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8a:	f7fe f95b 	bl	8003044 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d92:	f7fe f957 	bl	8003044 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e067      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d108      	bne.n	8004dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dba:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	492d      	ldr	r1, [pc, #180]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a19      	ldr	r1, [r3, #32]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	4927      	ldr	r1, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <HAL_RCC_OscConfig+0x4fc>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fe f92b 	bl	8003044 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fe f927 	bl	8003044 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e037      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x46a>
 8004e10:	e02f      	b.n	8004e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <HAL_RCC_OscConfig+0x4fc>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fe f914 	bl	8003044 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe f910 	bl	8003044 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e020      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x498>
 8004e3e:	e018      	b.n	8004e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e013      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
 8004e84:	42420060 	.word	0x42420060

08004e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0d0      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d910      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b67      	ldr	r3, [pc, #412]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0207 	bic.w	r2, r3, #7
 8004eb2:	4965      	ldr	r1, [pc, #404]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b63      	ldr	r3, [pc, #396]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0b8      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ee4:	4b59      	ldr	r3, [pc, #356]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a58      	ldr	r2, [pc, #352]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004efc:	4b53      	ldr	r3, [pc, #332]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a52      	ldr	r2, [pc, #328]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f08:	4b50      	ldr	r3, [pc, #320]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	494d      	ldr	r1, [pc, #308]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d040      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d115      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e07f      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e073      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f56:	4b3d      	ldr	r3, [pc, #244]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06b      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4936      	ldr	r1, [pc, #216]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f78:	f7fe f864 	bl	8003044 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f7fe f860 	bl	8003044 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e053      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b2d      	ldr	r3, [pc, #180]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 020c 	and.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1eb      	bne.n	8004f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d210      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 0207 	bic.w	r2, r3, #7
 8004fbe:	4922      	ldr	r1, [pc, #136]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e032      	b.n	800503e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4916      	ldr	r1, [pc, #88]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	490e      	ldr	r1, [pc, #56]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005016:	f000 f821 	bl	800505c <HAL_RCC_GetSysClockFreq>
 800501a:	4601      	mov	r1, r0
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <HAL_RCC_ClockConfig+0x1c8>)
 8005028:	5cd3      	ldrb	r3, [r2, r3]
 800502a:	fa21 f303 	lsr.w	r3, r1, r3
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <HAL_RCC_ClockConfig+0x1cc>)
 8005030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCC_ClockConfig+0x1d0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd ffc2 	bl	8002fc0 <HAL_InitTick>

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40022000 	.word	0x40022000
 800504c:	40021000 	.word	0x40021000
 8005050:	080069dc 	.word	0x080069dc
 8005054:	200000b4 	.word	0x200000b4
 8005058:	200000b8 	.word	0x200000b8

0800505c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800505c:	b490      	push	{r4, r7}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005062:	4b2a      	ldr	r3, [pc, #168]	; (800510c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005064:	1d3c      	adds	r4, r7, #4
 8005066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800506c:	4b28      	ldr	r3, [pc, #160]	; (8005110 <HAL_RCC_GetSysClockFreq+0xb4>)
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005086:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	2b04      	cmp	r3, #4
 8005094:	d002      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x40>
 8005096:	2b08      	cmp	r3, #8
 8005098:	d003      	beq.n	80050a2 <HAL_RCC_GetSysClockFreq+0x46>
 800509a:	e02d      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCC_GetSysClockFreq+0xbc>)
 800509e:	623b      	str	r3, [r7, #32]
      break;
 80050a0:	e02d      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	0c9b      	lsrs	r3, r3, #18
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050ae:	4413      	add	r3, r2
 80050b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	0c5b      	lsrs	r3, r3, #17
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050ce:	4413      	add	r3, r2
 80050d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050da:	fb02 f203 	mul.w	r2, r2, r3
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	e004      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	623b      	str	r3, [r7, #32]
      break;
 80050f6:	e002      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050fa:	623b      	str	r3, [r7, #32]
      break;
 80050fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fe:	6a3b      	ldr	r3, [r7, #32]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3728      	adds	r7, #40	; 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bc90      	pop	{r4, r7}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	080069c8 	.word	0x080069c8
 8005110:	080069d8 	.word	0x080069d8
 8005114:	40021000 	.word	0x40021000
 8005118:	007a1200 	.word	0x007a1200
 800511c:	003d0900 	.word	0x003d0900

08005120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005124:	4b02      	ldr	r3, [pc, #8]	; (8005130 <HAL_RCC_GetHCLKFreq+0x10>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	200000b4 	.word	0x200000b4

08005134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005138:	f7ff fff2 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 800513c:	4601      	mov	r1, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021000 	.word	0x40021000
 8005158:	080069ec 	.word	0x080069ec

0800515c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005160:	f7ff ffde 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005164:	4601      	mov	r1, r0
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	0adb      	lsrs	r3, r3, #11
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4a03      	ldr	r2, [pc, #12]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	080069ec 	.word	0x080069ec

08005184 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <RCC_Delay+0x34>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <RCC_Delay+0x38>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0a5b      	lsrs	r3, r3, #9
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051a0:	bf00      	nop
  }
  while (Delay --);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	60fa      	str	r2, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f9      	bne.n	80051a0 <RCC_Delay+0x1c>
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	200000b4 	.word	0x200000b4
 80051bc:	10624dd3 	.word	0x10624dd3

080051c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e041      	b.n	8005256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fd fcfa 	bl	8002be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f000 fa6c 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e03a      	b.n	80052ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_TIM_Base_Start_IT+0x98>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00e      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x58>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d009      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x58>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a14      	ldr	r2, [pc, #80]	; (80052fc <HAL_TIM_Base_Start_IT+0x9c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x58>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a13      	ldr	r2, [pc, #76]	; (8005300 <HAL_TIM_Base_Start_IT+0xa0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d111      	bne.n	80052dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d010      	beq.n	80052ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	e007      	b.n	80052ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800

08005304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0202 	mvn.w	r2, #2
 8005330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9ad 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9a0 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f9af 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0204 	mvn.w	r2, #4
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f983 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f976 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f985 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0208 	mvn.w	r2, #8
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f959 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f94c 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f95b 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b10      	cmp	r3, #16
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0210 	mvn.w	r2, #16
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f92f 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f922 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f931 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10e      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f8fd 	bl	8005682 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d10e      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d107      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa73 	bl	800599a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d10e      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8f5 	bl	80056ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d10e      	bne.n	800550c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d107      	bne.n	800550c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0220 	mvn.w	r2, #32
 8005504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa3e 	bl	8005988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIM_ConfigClockSource+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e0a6      	b.n	800567a <HAL_TIM_ConfigClockSource+0x166>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800554a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005552:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d067      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0x120>
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d80b      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x6c>
 8005568:	2b10      	cmp	r3, #16
 800556a:	d073      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0x140>
 800556c:	2b10      	cmp	r3, #16
 800556e:	d802      	bhi.n	8005576 <HAL_TIM_ConfigClockSource+0x62>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d06f      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005574:	e078      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005576:	2b20      	cmp	r3, #32
 8005578:	d06c      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0x140>
 800557a:	2b30      	cmp	r3, #48	; 0x30
 800557c:	d06a      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800557e:	e073      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005580:	2b70      	cmp	r3, #112	; 0x70
 8005582:	d00d      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x8c>
 8005584:	2b70      	cmp	r3, #112	; 0x70
 8005586:	d804      	bhi.n	8005592 <HAL_TIM_ConfigClockSource+0x7e>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d033      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0xe0>
 800558c:	2b60      	cmp	r3, #96	; 0x60
 800558e:	d041      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005590:	e06a      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005596:	d066      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x152>
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559c:	d017      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800559e:	e063      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6899      	ldr	r1, [r3, #8]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f000 f96d 	bl	800588e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	609a      	str	r2, [r3, #8]
      break;
 80055cc:	e04c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6899      	ldr	r1, [r3, #8]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f000 f956 	bl	800588e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f0:	609a      	str	r2, [r3, #8]
      break;
 80055f2:	e039      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	461a      	mov	r2, r3
 8005602:	f000 f8cd 	bl	80057a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2150      	movs	r1, #80	; 0x50
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f924 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005612:	e029      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	461a      	mov	r2, r3
 8005622:	f000 f8eb 	bl	80057fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2160      	movs	r1, #96	; 0x60
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f914 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005632:	e019      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	461a      	mov	r2, r3
 8005642:	f000 f8ad 	bl	80057a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2140      	movs	r1, #64	; 0x40
 800564c:	4618      	mov	r0, r3
 800564e:	f000 f904 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005652:	e009      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f000 f8fb 	bl	800585a <TIM_ITRx_SetConfig>
        break;
 8005664:	e000      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a29      	ldr	r2, [pc, #164]	; (8005794 <TIM_Base_SetConfig+0xb8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x30>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x30>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a26      	ldr	r2, [pc, #152]	; (8005798 <TIM_Base_SetConfig+0xbc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x30>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a25      	ldr	r2, [pc, #148]	; (800579c <TIM_Base_SetConfig+0xc0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <TIM_Base_SetConfig+0xb8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0x62>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <TIM_Base_SetConfig+0xbc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0x62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a18      	ldr	r2, [pc, #96]	; (800579c <TIM_Base_SetConfig+0xc0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <TIM_Base_SetConfig+0xb8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d103      	bne.n	8005784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	615a      	str	r2, [r3, #20]
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800

080057a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f023 0210 	bic.w	r2, r3, #16
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005826:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	031b      	lsls	r3, r3, #12
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800588e:	b480      	push	{r7}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	021a      	lsls	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	609a      	str	r2, [r3, #8]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e046      	b.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d009      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a10      	ldr	r2, [pc, #64]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10c      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800

08005988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e03f      	b.n	8005a3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fd f960 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	; 0x24
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fbab 	bl	800614c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	4613      	mov	r3, r2
 8005a52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d11d      	bne.n	8005a9c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_UART_Receive_IT+0x26>
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e016      	b.n	8005a9e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Receive_IT+0x38>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e00f      	b.n	8005a9e <HAL_UART_Receive_IT+0x58>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f9d1 	bl	8005e3a <UART_Start_Receive_IT>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	e000      	b.n	8005a9e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_UART_IRQHandler+0x52>
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa81 	bl	8005ffa <UART_Receive_IT>
      return;
 8005af8:	e17c      	b.n	8005df4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80b1 	beq.w	8005c64 <HAL_UART_IRQHandler+0x1bc>
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_UART_IRQHandler+0x70>
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80a6 	beq.w	8005c64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_UART_IRQHandler+0x90>
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_UART_IRQHandler+0xb0>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f043 0202 	orr.w	r2, r3, #2
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <HAL_UART_IRQHandler+0xd0>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f043 0204 	orr.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xfa>
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_UART_IRQHandler+0xee>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0208 	orr.w	r2, r3, #8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 811f 	beq.w	8005dea <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x11e>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fa1a 	bl	8005ffa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <HAL_UART_IRQHandler+0x146>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d031      	beq.n	8005c52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f95c 	bl	8005eac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d023      	beq.n	8005c4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d013      	beq.n	8005c42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	4a77      	ldr	r2, [pc, #476]	; (8005dfc <HAL_UART_IRQHandler+0x354>)
 8005c20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fd fbb8 	bl	800339c <HAL_DMA_Abort_IT>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e00e      	b.n	8005c60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f8e5 	bl	8005e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	e00a      	b.n	8005c60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8e1 	bl	8005e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	e006      	b.n	8005c60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8dd 	bl	8005e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c5e:	e0c4      	b.n	8005dea <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	bf00      	nop
    return;
 8005c62:	e0c2      	b.n	8005dea <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	f040 80a1 	bne.w	8005db0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 809b 	beq.w	8005db0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	f003 0310 	and.w	r3, r3, #16
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8095 	beq.w	8005db0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04e      	beq.n	8005d48 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005cb4:	8a3b      	ldrh	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8099 	beq.w	8005dee <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cc0:	8a3a      	ldrh	r2, [r7, #16]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	f080 8093 	bcs.w	8005dee <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8a3a      	ldrh	r2, [r7, #16]
 8005ccc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d02b      	beq.n	8005d30 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695a      	ldr	r2, [r3, #20]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0210 	bic.w	r2, r2, #16
 8005d24:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd fafc 	bl	8003328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f86f 	bl	8005e24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d46:	e052      	b.n	8005dee <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d048      	beq.n	8005df2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005d60:	8a7b      	ldrh	r3, [r7, #18]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d045      	beq.n	8005df2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d74:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0210 	bic.w	r2, r2, #16
 8005da2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005da4:	8a7b      	ldrh	r3, [r7, #18]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f83b 	bl	8005e24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dae:	e020      	b.n	8005df2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_UART_IRQHandler+0x324>
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f8b1 	bl	8005f2c <UART_Transmit_IT>
    return;
 8005dca:	e013      	b.n	8005df4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00e      	beq.n	8005df4 <HAL_UART_IRQHandler+0x34c>
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8f2 	bl	8005fca <UART_EndTransmit_IT>
    return;
 8005de6:	bf00      	nop
 8005de8:	e004      	b.n	8005df4 <HAL_UART_IRQHandler+0x34c>
    return;
 8005dea:	bf00      	nop
 8005dec:	e002      	b.n	8005df4 <HAL_UART_IRQHandler+0x34c>
      return;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_UART_IRQHandler+0x34c>
      return;
 8005df2:	bf00      	nop
  }
}
 8005df4:	3728      	adds	r7, #40	; 0x28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08005f05 	.word	0x08005f05

08005e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	4613      	mov	r3, r2
 8005e46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2222      	movs	r2, #34	; 0x22
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695a      	ldr	r2, [r3, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0220 	orr.w	r2, r2, #32
 8005e9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ec2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0210 	bic.w	r2, r2, #16
 8005eea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff ff77 	bl	8005e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b21      	cmp	r3, #33	; 0x21
 8005f3e:	d13e      	bne.n	8005fbe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f48:	d114      	bne.n	8005f74 <UART_Transmit_IT+0x48>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d110      	bne.n	8005f74 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	1c9a      	adds	r2, r3, #2
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]
 8005f72:	e008      	b.n	8005f86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	1c59      	adds	r1, r3, #1
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6211      	str	r1, [r2, #32]
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4619      	mov	r1, r3
 8005f94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e000      	b.n	8005fc0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
  }
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr

08005fca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff ff08 	bl	8005e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b22      	cmp	r3, #34	; 0x22
 800600c:	f040 8099 	bne.w	8006142 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006018:	d117      	bne.n	800604a <UART_Receive_IT+0x50>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d113      	bne.n	800604a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006038:	b29a      	uxth	r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	1c9a      	adds	r2, r3, #2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
 8006048:	e026      	b.n	8006098 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605c:	d007      	beq.n	800606e <UART_Receive_IT+0x74>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <UART_Receive_IT+0x82>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e008      	b.n	800608e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006088:	b2da      	uxtb	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	4619      	mov	r1, r3
 80060a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d148      	bne.n	800613e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0220 	bic.w	r2, r2, #32
 80060ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d123      	bne.n	8006134 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0210 	bic.w	r2, r2, #16
 8006100:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d10a      	bne.n	8006126 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fe79 	bl	8005e24 <HAL_UARTEx_RxEventCallback>
 8006132:	e002      	b.n	800613a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7fb fe45 	bl	8001dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e002      	b.n	8006144 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006186:	f023 030c 	bic.w	r3, r3, #12
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	430b      	orrs	r3, r1
 8006192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <UART_SetConfig+0x114>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d103      	bne.n	80061bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7fe ffd2 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	e002      	b.n	80061c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061bc:	f7fe ffba 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 80061c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009a      	lsls	r2, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <UART_SetConfig+0x118>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	0119      	lsls	r1, r3, #4
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009a      	lsls	r2, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061f8:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <UART_SetConfig+0x118>)
 80061fa:	fba3 0302 	umull	r0, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	2064      	movs	r0, #100	; 0x64
 8006202:	fb00 f303 	mul.w	r3, r0, r3
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	3332      	adds	r3, #50	; 0x32
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <UART_SetConfig+0x118>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006218:	4419      	add	r1, r3
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009a      	lsls	r2, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <UART_SetConfig+0x118>)
 8006232:	fba3 0302 	umull	r0, r3, r3, r2
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2064      	movs	r0, #100	; 0x64
 800623a:	fb00 f303 	mul.w	r3, r0, r3
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	3332      	adds	r3, #50	; 0x32
 8006244:	4a07      	ldr	r2, [pc, #28]	; (8006264 <UART_SetConfig+0x118>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	440a      	add	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40013800 	.word	0x40013800
 8006264:	51eb851f 	.word	0x51eb851f

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	; (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	200000c0 	.word	0x200000c0

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	2500      	movs	r5, #0
 8006278:	4e0c      	ldr	r6, [pc, #48]	; (80062ac <__libc_init_array+0x38>)
 800627a:	4c0d      	ldr	r4, [pc, #52]	; (80062b0 <__libc_init_array+0x3c>)
 800627c:	1ba4      	subs	r4, r4, r6
 800627e:	10a4      	asrs	r4, r4, #2
 8006280:	42a5      	cmp	r5, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	f000 fb94 	bl	80069b0 <_init>
 8006288:	2500      	movs	r5, #0
 800628a:	4e0a      	ldr	r6, [pc, #40]	; (80062b4 <__libc_init_array+0x40>)
 800628c:	4c0a      	ldr	r4, [pc, #40]	; (80062b8 <__libc_init_array+0x44>)
 800628e:	1ba4      	subs	r4, r4, r6
 8006290:	10a4      	asrs	r4, r4, #2
 8006292:	42a5      	cmp	r5, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800629c:	4798      	blx	r3
 800629e:	3501      	adds	r5, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062a6:	4798      	blx	r3
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08006a40 	.word	0x08006a40
 80062b0:	08006a40 	.word	0x08006a40
 80062b4:	08006a40 	.word	0x08006a40
 80062b8:	08006a44 	.word	0x08006a44

080062bc <memset>:
 80062bc:	4603      	mov	r3, r0
 80062be:	4402      	add	r2, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>
 80062cc:	0000      	movs	r0, r0
	...

080062d0 <atan>:
 80062d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	4bb6      	ldr	r3, [pc, #728]	; (80065b0 <atan+0x2e0>)
 80062d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80062da:	429e      	cmp	r6, r3
 80062dc:	4604      	mov	r4, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	468b      	mov	fp, r1
 80062e2:	dd17      	ble.n	8006314 <atan+0x44>
 80062e4:	4bb3      	ldr	r3, [pc, #716]	; (80065b4 <atan+0x2e4>)
 80062e6:	429e      	cmp	r6, r3
 80062e8:	dc01      	bgt.n	80062ee <atan+0x1e>
 80062ea:	d109      	bne.n	8006300 <atan+0x30>
 80062ec:	b140      	cbz	r0, 8006300 <atan+0x30>
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7f9 ff31 	bl	800015c <__adddf3>
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	e005      	b.n	800630c <atan+0x3c>
 8006300:	f1bb 0f00 	cmp.w	fp, #0
 8006304:	4cac      	ldr	r4, [pc, #688]	; (80065b8 <atan+0x2e8>)
 8006306:	f340 8121 	ble.w	800654c <atan+0x27c>
 800630a:	4dac      	ldr	r5, [pc, #688]	; (80065bc <atan+0x2ec>)
 800630c:	4620      	mov	r0, r4
 800630e:	4629      	mov	r1, r5
 8006310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006314:	4baa      	ldr	r3, [pc, #680]	; (80065c0 <atan+0x2f0>)
 8006316:	429e      	cmp	r6, r3
 8006318:	dc11      	bgt.n	800633e <atan+0x6e>
 800631a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800631e:	429e      	cmp	r6, r3
 8006320:	dc0a      	bgt.n	8006338 <atan+0x68>
 8006322:	a38b      	add	r3, pc, #556	; (adr r3, 8006550 <atan+0x280>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7f9 ff18 	bl	800015c <__adddf3>
 800632c:	2200      	movs	r2, #0
 800632e:	4ba5      	ldr	r3, [pc, #660]	; (80065c4 <atan+0x2f4>)
 8006330:	f7fa fb5a 	bl	80009e8 <__aeabi_dcmpgt>
 8006334:	2800      	cmp	r0, #0
 8006336:	d1e9      	bne.n	800630c <atan+0x3c>
 8006338:	f04f 3aff 	mov.w	sl, #4294967295
 800633c:	e027      	b.n	800638e <atan+0xbe>
 800633e:	f000 f951 	bl	80065e4 <fabs>
 8006342:	4ba1      	ldr	r3, [pc, #644]	; (80065c8 <atan+0x2f8>)
 8006344:	4604      	mov	r4, r0
 8006346:	429e      	cmp	r6, r3
 8006348:	460d      	mov	r5, r1
 800634a:	f300 80b8 	bgt.w	80064be <atan+0x1ee>
 800634e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006352:	429e      	cmp	r6, r3
 8006354:	f300 809c 	bgt.w	8006490 <atan+0x1c0>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	f7f9 fefe 	bl	800015c <__adddf3>
 8006360:	2200      	movs	r2, #0
 8006362:	4b98      	ldr	r3, [pc, #608]	; (80065c4 <atan+0x2f4>)
 8006364:	f7f9 fef8 	bl	8000158 <__aeabi_dsub>
 8006368:	2200      	movs	r2, #0
 800636a:	4606      	mov	r6, r0
 800636c:	460f      	mov	r7, r1
 800636e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	f7f9 fef1 	bl	800015c <__adddf3>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7fa f9cb 	bl	800071c <__aeabi_ddiv>
 8006386:	f04f 0a00 	mov.w	sl, #0
 800638a:	4604      	mov	r4, r0
 800638c:	460d      	mov	r5, r1
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	4620      	mov	r0, r4
 8006394:	4629      	mov	r1, r5
 8006396:	f7fa f897 	bl	80004c8 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	f7fa f891 	bl	80004c8 <__aeabi_dmul>
 80063a6:	a36c      	add	r3, pc, #432	; (adr r3, 8006558 <atan+0x288>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	4606      	mov	r6, r0
 80063ae:	460f      	mov	r7, r1
 80063b0:	f7fa f88a 	bl	80004c8 <__aeabi_dmul>
 80063b4:	a36a      	add	r3, pc, #424	; (adr r3, 8006560 <atan+0x290>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7f9 fecf 	bl	800015c <__adddf3>
 80063be:	4632      	mov	r2, r6
 80063c0:	463b      	mov	r3, r7
 80063c2:	f7fa f881 	bl	80004c8 <__aeabi_dmul>
 80063c6:	a368      	add	r3, pc, #416	; (adr r3, 8006568 <atan+0x298>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7f9 fec6 	bl	800015c <__adddf3>
 80063d0:	4632      	mov	r2, r6
 80063d2:	463b      	mov	r3, r7
 80063d4:	f7fa f878 	bl	80004c8 <__aeabi_dmul>
 80063d8:	a365      	add	r3, pc, #404	; (adr r3, 8006570 <atan+0x2a0>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f7f9 febd 	bl	800015c <__adddf3>
 80063e2:	4632      	mov	r2, r6
 80063e4:	463b      	mov	r3, r7
 80063e6:	f7fa f86f 	bl	80004c8 <__aeabi_dmul>
 80063ea:	a363      	add	r3, pc, #396	; (adr r3, 8006578 <atan+0x2a8>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7f9 feb4 	bl	800015c <__adddf3>
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	f7fa f866 	bl	80004c8 <__aeabi_dmul>
 80063fc:	a360      	add	r3, pc, #384	; (adr r3, 8006580 <atan+0x2b0>)
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f7f9 feab 	bl	800015c <__adddf3>
 8006406:	4642      	mov	r2, r8
 8006408:	464b      	mov	r3, r9
 800640a:	f7fa f85d 	bl	80004c8 <__aeabi_dmul>
 800640e:	a35e      	add	r3, pc, #376	; (adr r3, 8006588 <atan+0x2b8>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	4680      	mov	r8, r0
 8006416:	4689      	mov	r9, r1
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	f7fa f854 	bl	80004c8 <__aeabi_dmul>
 8006420:	a35b      	add	r3, pc, #364	; (adr r3, 8006590 <atan+0x2c0>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7f9 fe97 	bl	8000158 <__aeabi_dsub>
 800642a:	4632      	mov	r2, r6
 800642c:	463b      	mov	r3, r7
 800642e:	f7fa f84b 	bl	80004c8 <__aeabi_dmul>
 8006432:	a359      	add	r3, pc, #356	; (adr r3, 8006598 <atan+0x2c8>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 fe8e 	bl	8000158 <__aeabi_dsub>
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	f7fa f842 	bl	80004c8 <__aeabi_dmul>
 8006444:	a356      	add	r3, pc, #344	; (adr r3, 80065a0 <atan+0x2d0>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 fe85 	bl	8000158 <__aeabi_dsub>
 800644e:	4632      	mov	r2, r6
 8006450:	463b      	mov	r3, r7
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	a354      	add	r3, pc, #336	; (adr r3, 80065a8 <atan+0x2d8>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f7f9 fe7c 	bl	8000158 <__aeabi_dsub>
 8006460:	4632      	mov	r2, r6
 8006462:	463b      	mov	r3, r7
 8006464:	f7fa f830 	bl	80004c8 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7f9 fe74 	bl	800015c <__adddf3>
 8006474:	4622      	mov	r2, r4
 8006476:	462b      	mov	r3, r5
 8006478:	f7fa f826 	bl	80004c8 <__aeabi_dmul>
 800647c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	d144      	bne.n	8006510 <atan+0x240>
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7f9 fe65 	bl	8000158 <__aeabi_dsub>
 800648e:	e734      	b.n	80062fa <atan+0x2a>
 8006490:	2200      	movs	r2, #0
 8006492:	4b4c      	ldr	r3, [pc, #304]	; (80065c4 <atan+0x2f4>)
 8006494:	f7f9 fe60 	bl	8000158 <__aeabi_dsub>
 8006498:	2200      	movs	r2, #0
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	4b49      	ldr	r3, [pc, #292]	; (80065c4 <atan+0x2f4>)
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 fe5a 	bl	800015c <__adddf3>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7fa f934 	bl	800071c <__aeabi_ddiv>
 80064b4:	f04f 0a01 	mov.w	sl, #1
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	e767      	b.n	800638e <atan+0xbe>
 80064be:	4b43      	ldr	r3, [pc, #268]	; (80065cc <atan+0x2fc>)
 80064c0:	429e      	cmp	r6, r3
 80064c2:	dc1a      	bgt.n	80064fa <atan+0x22a>
 80064c4:	2200      	movs	r2, #0
 80064c6:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <atan+0x300>)
 80064c8:	f7f9 fe46 	bl	8000158 <__aeabi_dsub>
 80064cc:	2200      	movs	r2, #0
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
 80064d2:	4b3f      	ldr	r3, [pc, #252]	; (80065d0 <atan+0x300>)
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7f9 fff6 	bl	80004c8 <__aeabi_dmul>
 80064dc:	2200      	movs	r2, #0
 80064de:	4b39      	ldr	r3, [pc, #228]	; (80065c4 <atan+0x2f4>)
 80064e0:	f7f9 fe3c 	bl	800015c <__adddf3>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4630      	mov	r0, r6
 80064ea:	4639      	mov	r1, r7
 80064ec:	f7fa f916 	bl	800071c <__aeabi_ddiv>
 80064f0:	f04f 0a02 	mov.w	sl, #2
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	e749      	b.n	800638e <atan+0xbe>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	2000      	movs	r0, #0
 8006500:	4934      	ldr	r1, [pc, #208]	; (80065d4 <atan+0x304>)
 8006502:	f7fa f90b 	bl	800071c <__aeabi_ddiv>
 8006506:	f04f 0a03 	mov.w	sl, #3
 800650a:	4604      	mov	r4, r0
 800650c:	460d      	mov	r5, r1
 800650e:	e73e      	b.n	800638e <atan+0xbe>
 8006510:	4b31      	ldr	r3, [pc, #196]	; (80065d8 <atan+0x308>)
 8006512:	4e32      	ldr	r6, [pc, #200]	; (80065dc <atan+0x30c>)
 8006514:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006518:	4456      	add	r6, sl
 800651a:	449a      	add	sl, r3
 800651c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006520:	f7f9 fe1a 	bl	8000158 <__aeabi_dsub>
 8006524:	4622      	mov	r2, r4
 8006526:	462b      	mov	r3, r5
 8006528:	f7f9 fe16 	bl	8000158 <__aeabi_dsub>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006534:	f7f9 fe10 	bl	8000158 <__aeabi_dsub>
 8006538:	f1bb 0f00 	cmp.w	fp, #0
 800653c:	4604      	mov	r4, r0
 800653e:	460d      	mov	r5, r1
 8006540:	f6bf aee4 	bge.w	800630c <atan+0x3c>
 8006544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006548:	461d      	mov	r5, r3
 800654a:	e6df      	b.n	800630c <atan+0x3c>
 800654c:	4d24      	ldr	r5, [pc, #144]	; (80065e0 <atan+0x310>)
 800654e:	e6dd      	b.n	800630c <atan+0x3c>
 8006550:	8800759c 	.word	0x8800759c
 8006554:	7e37e43c 	.word	0x7e37e43c
 8006558:	e322da11 	.word	0xe322da11
 800655c:	3f90ad3a 	.word	0x3f90ad3a
 8006560:	24760deb 	.word	0x24760deb
 8006564:	3fa97b4b 	.word	0x3fa97b4b
 8006568:	a0d03d51 	.word	0xa0d03d51
 800656c:	3fb10d66 	.word	0x3fb10d66
 8006570:	c54c206e 	.word	0xc54c206e
 8006574:	3fb745cd 	.word	0x3fb745cd
 8006578:	920083ff 	.word	0x920083ff
 800657c:	3fc24924 	.word	0x3fc24924
 8006580:	5555550d 	.word	0x5555550d
 8006584:	3fd55555 	.word	0x3fd55555
 8006588:	2c6a6c2f 	.word	0x2c6a6c2f
 800658c:	bfa2b444 	.word	0xbfa2b444
 8006590:	52defd9a 	.word	0x52defd9a
 8006594:	3fadde2d 	.word	0x3fadde2d
 8006598:	af749a6d 	.word	0xaf749a6d
 800659c:	3fb3b0f2 	.word	0x3fb3b0f2
 80065a0:	fe231671 	.word	0xfe231671
 80065a4:	3fbc71c6 	.word	0x3fbc71c6
 80065a8:	9998ebc4 	.word	0x9998ebc4
 80065ac:	3fc99999 	.word	0x3fc99999
 80065b0:	440fffff 	.word	0x440fffff
 80065b4:	7ff00000 	.word	0x7ff00000
 80065b8:	54442d18 	.word	0x54442d18
 80065bc:	3ff921fb 	.word	0x3ff921fb
 80065c0:	3fdbffff 	.word	0x3fdbffff
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	3ff2ffff 	.word	0x3ff2ffff
 80065cc:	40037fff 	.word	0x40037fff
 80065d0:	3ff80000 	.word	0x3ff80000
 80065d4:	bff00000 	.word	0xbff00000
 80065d8:	08006a18 	.word	0x08006a18
 80065dc:	080069f8 	.word	0x080069f8
 80065e0:	bff921fb 	.word	0xbff921fb

080065e4 <fabs>:
 80065e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065e8:	4619      	mov	r1, r3
 80065ea:	4770      	bx	lr

080065ec <atan2>:
 80065ec:	f000 b854 	b.w	8006698 <__ieee754_atan2>

080065f0 <sqrt>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	b08b      	sub	sp, #44	; 0x2c
 80065f6:	4604      	mov	r4, r0
 80065f8:	460d      	mov	r5, r1
 80065fa:	f000 f92b 	bl	8006854 <__ieee754_sqrt>
 80065fe:	4b24      	ldr	r3, [pc, #144]	; (8006690 <sqrt+0xa0>)
 8006600:	4680      	mov	r8, r0
 8006602:	f993 a000 	ldrsb.w	sl, [r3]
 8006606:	4689      	mov	r9, r1
 8006608:	f1ba 3fff 	cmp.w	sl, #4294967295
 800660c:	d02b      	beq.n	8006666 <sqrt+0x76>
 800660e:	4622      	mov	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	4620      	mov	r0, r4
 8006614:	4629      	mov	r1, r5
 8006616:	f7fa f9f1 	bl	80009fc <__aeabi_dcmpun>
 800661a:	4683      	mov	fp, r0
 800661c:	bb18      	cbnz	r0, 8006666 <sqrt+0x76>
 800661e:	2600      	movs	r6, #0
 8006620:	2700      	movs	r7, #0
 8006622:	4632      	mov	r2, r6
 8006624:	463b      	mov	r3, r7
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7fa f9bf 	bl	80009ac <__aeabi_dcmplt>
 800662e:	b1d0      	cbz	r0, 8006666 <sqrt+0x76>
 8006630:	2301      	movs	r3, #1
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4b17      	ldr	r3, [pc, #92]	; (8006694 <sqrt+0xa4>)
 8006636:	f8cd b020 	str.w	fp, [sp, #32]
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006640:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006644:	f1ba 0f00 	cmp.w	sl, #0
 8006648:	d112      	bne.n	8006670 <sqrt+0x80>
 800664a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800664e:	4668      	mov	r0, sp
 8006650:	f000 f9ac 	bl	80069ac <matherr>
 8006654:	b1b8      	cbz	r0, 8006686 <sqrt+0x96>
 8006656:	9b08      	ldr	r3, [sp, #32]
 8006658:	b11b      	cbz	r3, 8006662 <sqrt+0x72>
 800665a:	f7ff fe05 	bl	8006268 <__errno>
 800665e:	9b08      	ldr	r3, [sp, #32]
 8006660:	6003      	str	r3, [r0, #0]
 8006662:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	b00b      	add	sp, #44	; 0x2c
 800666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006670:	4632      	mov	r2, r6
 8006672:	463b      	mov	r3, r7
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7fa f850 	bl	800071c <__aeabi_ddiv>
 800667c:	f1ba 0f02 	cmp.w	sl, #2
 8006680:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006684:	d1e3      	bne.n	800664e <sqrt+0x5e>
 8006686:	f7ff fdef 	bl	8006268 <__errno>
 800668a:	2321      	movs	r3, #33	; 0x21
 800668c:	6003      	str	r3, [r0, #0]
 800668e:	e7e2      	b.n	8006656 <sqrt+0x66>
 8006690:	20000124 	.word	0x20000124
 8006694:	08006a38 	.word	0x08006a38

08006698 <__ieee754_atan2>:
 8006698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	4256      	negs	r6, r2
 800669e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80066a2:	4316      	orrs	r6, r2
 80066a4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006850 <__ieee754_atan2+0x1b8>
 80066a8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80066ac:	454e      	cmp	r6, r9
 80066ae:	4604      	mov	r4, r0
 80066b0:	460d      	mov	r5, r1
 80066b2:	469e      	mov	lr, r3
 80066b4:	d808      	bhi.n	80066c8 <__ieee754_atan2+0x30>
 80066b6:	4246      	negs	r6, r0
 80066b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80066bc:	4306      	orrs	r6, r0
 80066be:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80066c2:	454e      	cmp	r6, r9
 80066c4:	4688      	mov	r8, r1
 80066c6:	d906      	bls.n	80066d6 <__ieee754_atan2+0x3e>
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7f9 fd46 	bl	800015c <__adddf3>
 80066d0:	4604      	mov	r4, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	e030      	b.n	8006738 <__ieee754_atan2+0xa0>
 80066d6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80066da:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80066de:	4316      	orrs	r6, r2
 80066e0:	d103      	bne.n	80066ea <__ieee754_atan2+0x52>
 80066e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	f7ff bdf3 	b.w	80062d0 <atan>
 80066ea:	179e      	asrs	r6, r3, #30
 80066ec:	f006 0602 	and.w	r6, r6, #2
 80066f0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80066f4:	ea57 0100 	orrs.w	r1, r7, r0
 80066f8:	d107      	bne.n	800670a <__ieee754_atan2+0x72>
 80066fa:	2e02      	cmp	r6, #2
 80066fc:	d079      	beq.n	80067f2 <__ieee754_atan2+0x15a>
 80066fe:	2e03      	cmp	r6, #3
 8006700:	d11a      	bne.n	8006738 <__ieee754_atan2+0xa0>
 8006702:	a541      	add	r5, pc, #260	; (adr r5, 8006808 <__ieee754_atan2+0x170>)
 8006704:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006708:	e016      	b.n	8006738 <__ieee754_atan2+0xa0>
 800670a:	ea5c 0102 	orrs.w	r1, ip, r2
 800670e:	d106      	bne.n	800671e <__ieee754_atan2+0x86>
 8006710:	f1b8 0f00 	cmp.w	r8, #0
 8006714:	da71      	bge.n	80067fa <__ieee754_atan2+0x162>
 8006716:	a53e      	add	r5, pc, #248	; (adr r5, 8006810 <__ieee754_atan2+0x178>)
 8006718:	e9d5 4500 	ldrd	r4, r5, [r5]
 800671c:	e00c      	b.n	8006738 <__ieee754_atan2+0xa0>
 800671e:	45cc      	cmp	ip, r9
 8006720:	d123      	bne.n	800676a <__ieee754_atan2+0xd2>
 8006722:	4567      	cmp	r7, ip
 8006724:	d114      	bne.n	8006750 <__ieee754_atan2+0xb8>
 8006726:	2e02      	cmp	r6, #2
 8006728:	d00a      	beq.n	8006740 <__ieee754_atan2+0xa8>
 800672a:	2e03      	cmp	r6, #3
 800672c:	d00c      	beq.n	8006748 <__ieee754_atan2+0xb0>
 800672e:	2e01      	cmp	r6, #1
 8006730:	d15b      	bne.n	80067ea <__ieee754_atan2+0x152>
 8006732:	a539      	add	r5, pc, #228	; (adr r5, 8006818 <__ieee754_atan2+0x180>)
 8006734:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	a537      	add	r5, pc, #220	; (adr r5, 8006820 <__ieee754_atan2+0x188>)
 8006742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006746:	e7f7      	b.n	8006738 <__ieee754_atan2+0xa0>
 8006748:	a537      	add	r5, pc, #220	; (adr r5, 8006828 <__ieee754_atan2+0x190>)
 800674a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800674e:	e7f3      	b.n	8006738 <__ieee754_atan2+0xa0>
 8006750:	2e02      	cmp	r6, #2
 8006752:	d04e      	beq.n	80067f2 <__ieee754_atan2+0x15a>
 8006754:	2e03      	cmp	r6, #3
 8006756:	d0d4      	beq.n	8006702 <__ieee754_atan2+0x6a>
 8006758:	2e01      	cmp	r6, #1
 800675a:	f04f 0400 	mov.w	r4, #0
 800675e:	d102      	bne.n	8006766 <__ieee754_atan2+0xce>
 8006760:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006764:	e7e8      	b.n	8006738 <__ieee754_atan2+0xa0>
 8006766:	2500      	movs	r5, #0
 8006768:	e7e6      	b.n	8006738 <__ieee754_atan2+0xa0>
 800676a:	454f      	cmp	r7, r9
 800676c:	d0d0      	beq.n	8006710 <__ieee754_atan2+0x78>
 800676e:	eba7 070c 	sub.w	r7, r7, ip
 8006772:	153f      	asrs	r7, r7, #20
 8006774:	2f3c      	cmp	r7, #60	; 0x3c
 8006776:	dc1e      	bgt.n	80067b6 <__ieee754_atan2+0x11e>
 8006778:	2b00      	cmp	r3, #0
 800677a:	da01      	bge.n	8006780 <__ieee754_atan2+0xe8>
 800677c:	373c      	adds	r7, #60	; 0x3c
 800677e:	db1e      	blt.n	80067be <__ieee754_atan2+0x126>
 8006780:	4620      	mov	r0, r4
 8006782:	4629      	mov	r1, r5
 8006784:	f7f9 ffca 	bl	800071c <__aeabi_ddiv>
 8006788:	f7ff ff2c 	bl	80065e4 <fabs>
 800678c:	f7ff fda0 	bl	80062d0 <atan>
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	2e01      	cmp	r6, #1
 8006796:	d015      	beq.n	80067c4 <__ieee754_atan2+0x12c>
 8006798:	2e02      	cmp	r6, #2
 800679a:	d017      	beq.n	80067cc <__ieee754_atan2+0x134>
 800679c:	2e00      	cmp	r6, #0
 800679e:	d0cb      	beq.n	8006738 <__ieee754_atan2+0xa0>
 80067a0:	a323      	add	r3, pc, #140	; (adr r3, 8006830 <__ieee754_atan2+0x198>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	4620      	mov	r0, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7f9 fcd5 	bl	8000158 <__aeabi_dsub>
 80067ae:	a322      	add	r3, pc, #136	; (adr r3, 8006838 <__ieee754_atan2+0x1a0>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e016      	b.n	80067e4 <__ieee754_atan2+0x14c>
 80067b6:	a522      	add	r5, pc, #136	; (adr r5, 8006840 <__ieee754_atan2+0x1a8>)
 80067b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067bc:	e7ea      	b.n	8006794 <__ieee754_atan2+0xfc>
 80067be:	2400      	movs	r4, #0
 80067c0:	2500      	movs	r5, #0
 80067c2:	e7e7      	b.n	8006794 <__ieee754_atan2+0xfc>
 80067c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80067c8:	461d      	mov	r5, r3
 80067ca:	e7b5      	b.n	8006738 <__ieee754_atan2+0xa0>
 80067cc:	a318      	add	r3, pc, #96	; (adr r3, 8006830 <__ieee754_atan2+0x198>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 fcbf 	bl	8000158 <__aeabi_dsub>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	a116      	add	r1, pc, #88	; (adr r1, 8006838 <__ieee754_atan2+0x1a0>)
 80067e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e4:	f7f9 fcb8 	bl	8000158 <__aeabi_dsub>
 80067e8:	e772      	b.n	80066d0 <__ieee754_atan2+0x38>
 80067ea:	a517      	add	r5, pc, #92	; (adr r5, 8006848 <__ieee754_atan2+0x1b0>)
 80067ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067f0:	e7a2      	b.n	8006738 <__ieee754_atan2+0xa0>
 80067f2:	a511      	add	r5, pc, #68	; (adr r5, 8006838 <__ieee754_atan2+0x1a0>)
 80067f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067f8:	e79e      	b.n	8006738 <__ieee754_atan2+0xa0>
 80067fa:	a511      	add	r5, pc, #68	; (adr r5, 8006840 <__ieee754_atan2+0x1a8>)
 80067fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006800:	e79a      	b.n	8006738 <__ieee754_atan2+0xa0>
 8006802:	bf00      	nop
 8006804:	f3af 8000 	nop.w
 8006808:	54442d18 	.word	0x54442d18
 800680c:	c00921fb 	.word	0xc00921fb
 8006810:	54442d18 	.word	0x54442d18
 8006814:	bff921fb 	.word	0xbff921fb
 8006818:	54442d18 	.word	0x54442d18
 800681c:	bfe921fb 	.word	0xbfe921fb
 8006820:	7f3321d2 	.word	0x7f3321d2
 8006824:	4002d97c 	.word	0x4002d97c
 8006828:	7f3321d2 	.word	0x7f3321d2
 800682c:	c002d97c 	.word	0xc002d97c
 8006830:	33145c07 	.word	0x33145c07
 8006834:	3ca1a626 	.word	0x3ca1a626
 8006838:	54442d18 	.word	0x54442d18
 800683c:	400921fb 	.word	0x400921fb
 8006840:	54442d18 	.word	0x54442d18
 8006844:	3ff921fb 	.word	0x3ff921fb
 8006848:	54442d18 	.word	0x54442d18
 800684c:	3fe921fb 	.word	0x3fe921fb
 8006850:	7ff00000 	.word	0x7ff00000

08006854 <__ieee754_sqrt>:
 8006854:	4b54      	ldr	r3, [pc, #336]	; (80069a8 <__ieee754_sqrt+0x154>)
 8006856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	438b      	bics	r3, r1
 800685c:	4606      	mov	r6, r0
 800685e:	460d      	mov	r5, r1
 8006860:	460a      	mov	r2, r1
 8006862:	460c      	mov	r4, r1
 8006864:	d10f      	bne.n	8006886 <__ieee754_sqrt+0x32>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	f7f9 fe2d 	bl	80004c8 <__aeabi_dmul>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4630      	mov	r0, r6
 8006874:	4629      	mov	r1, r5
 8006876:	f7f9 fc71 	bl	800015c <__adddf3>
 800687a:	4606      	mov	r6, r0
 800687c:	460d      	mov	r5, r1
 800687e:	4630      	mov	r0, r6
 8006880:	4629      	mov	r1, r5
 8006882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006886:	2900      	cmp	r1, #0
 8006888:	4607      	mov	r7, r0
 800688a:	4603      	mov	r3, r0
 800688c:	dc0e      	bgt.n	80068ac <__ieee754_sqrt+0x58>
 800688e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006892:	ea5c 0707 	orrs.w	r7, ip, r7
 8006896:	d0f2      	beq.n	800687e <__ieee754_sqrt+0x2a>
 8006898:	b141      	cbz	r1, 80068ac <__ieee754_sqrt+0x58>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	f7f9 fc5b 	bl	8000158 <__aeabi_dsub>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	f7f9 ff39 	bl	800071c <__aeabi_ddiv>
 80068aa:	e7e6      	b.n	800687a <__ieee754_sqrt+0x26>
 80068ac:	1512      	asrs	r2, r2, #20
 80068ae:	d074      	beq.n	800699a <__ieee754_sqrt+0x146>
 80068b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80068b4:	07d5      	lsls	r5, r2, #31
 80068b6:	f04f 0500 	mov.w	r5, #0
 80068ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80068be:	bf48      	it	mi
 80068c0:	0fd9      	lsrmi	r1, r3, #31
 80068c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80068c6:	bf44      	itt	mi
 80068c8:	005b      	lslmi	r3, r3, #1
 80068ca:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80068ce:	1051      	asrs	r1, r2, #1
 80068d0:	0fda      	lsrs	r2, r3, #31
 80068d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80068d6:	4628      	mov	r0, r5
 80068d8:	2216      	movs	r2, #22
 80068da:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	1987      	adds	r7, r0, r6
 80068e2:	42a7      	cmp	r7, r4
 80068e4:	bfde      	ittt	le
 80068e6:	19b8      	addle	r0, r7, r6
 80068e8:	1be4      	suble	r4, r4, r7
 80068ea:	19ad      	addle	r5, r5, r6
 80068ec:	0fdf      	lsrs	r7, r3, #31
 80068ee:	3a01      	subs	r2, #1
 80068f0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80068f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068fc:	d1f0      	bne.n	80068e0 <__ieee754_sqrt+0x8c>
 80068fe:	f04f 0c20 	mov.w	ip, #32
 8006902:	4696      	mov	lr, r2
 8006904:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006908:	4284      	cmp	r4, r0
 800690a:	eb06 070e 	add.w	r7, r6, lr
 800690e:	dc02      	bgt.n	8006916 <__ieee754_sqrt+0xc2>
 8006910:	d112      	bne.n	8006938 <__ieee754_sqrt+0xe4>
 8006912:	429f      	cmp	r7, r3
 8006914:	d810      	bhi.n	8006938 <__ieee754_sqrt+0xe4>
 8006916:	2f00      	cmp	r7, #0
 8006918:	eb07 0e06 	add.w	lr, r7, r6
 800691c:	da42      	bge.n	80069a4 <__ieee754_sqrt+0x150>
 800691e:	f1be 0f00 	cmp.w	lr, #0
 8006922:	db3f      	blt.n	80069a4 <__ieee754_sqrt+0x150>
 8006924:	f100 0801 	add.w	r8, r0, #1
 8006928:	1a24      	subs	r4, r4, r0
 800692a:	4640      	mov	r0, r8
 800692c:	429f      	cmp	r7, r3
 800692e:	bf88      	it	hi
 8006930:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006934:	1bdb      	subs	r3, r3, r7
 8006936:	4432      	add	r2, r6
 8006938:	0064      	lsls	r4, r4, #1
 800693a:	f1bc 0c01 	subs.w	ip, ip, #1
 800693e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006942:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800694a:	d1dd      	bne.n	8006908 <__ieee754_sqrt+0xb4>
 800694c:	4323      	orrs	r3, r4
 800694e:	d006      	beq.n	800695e <__ieee754_sqrt+0x10a>
 8006950:	1c54      	adds	r4, r2, #1
 8006952:	bf0b      	itete	eq
 8006954:	4662      	moveq	r2, ip
 8006956:	3201      	addne	r2, #1
 8006958:	3501      	addeq	r5, #1
 800695a:	f022 0201 	bicne.w	r2, r2, #1
 800695e:	106b      	asrs	r3, r5, #1
 8006960:	0852      	lsrs	r2, r2, #1
 8006962:	07e8      	lsls	r0, r5, #31
 8006964:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006968:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800696c:	bf48      	it	mi
 800696e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006972:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006976:	4616      	mov	r6, r2
 8006978:	e781      	b.n	800687e <__ieee754_sqrt+0x2a>
 800697a:	0adc      	lsrs	r4, r3, #11
 800697c:	3915      	subs	r1, #21
 800697e:	055b      	lsls	r3, r3, #21
 8006980:	2c00      	cmp	r4, #0
 8006982:	d0fa      	beq.n	800697a <__ieee754_sqrt+0x126>
 8006984:	02e6      	lsls	r6, r4, #11
 8006986:	d50a      	bpl.n	800699e <__ieee754_sqrt+0x14a>
 8006988:	f1c2 0020 	rsb	r0, r2, #32
 800698c:	fa23 f000 	lsr.w	r0, r3, r0
 8006990:	1e55      	subs	r5, r2, #1
 8006992:	4093      	lsls	r3, r2
 8006994:	4304      	orrs	r4, r0
 8006996:	1b4a      	subs	r2, r1, r5
 8006998:	e78a      	b.n	80068b0 <__ieee754_sqrt+0x5c>
 800699a:	4611      	mov	r1, r2
 800699c:	e7f0      	b.n	8006980 <__ieee754_sqrt+0x12c>
 800699e:	0064      	lsls	r4, r4, #1
 80069a0:	3201      	adds	r2, #1
 80069a2:	e7ef      	b.n	8006984 <__ieee754_sqrt+0x130>
 80069a4:	4680      	mov	r8, r0
 80069a6:	e7bf      	b.n	8006928 <__ieee754_sqrt+0xd4>
 80069a8:	7ff00000 	.word	0x7ff00000

080069ac <matherr>:
 80069ac:	2000      	movs	r0, #0
 80069ae:	4770      	bx	lr

080069b0 <_init>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr

080069bc <_fini>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr
